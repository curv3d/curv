Function Printed Representation
===============================
Function values print as constructor expressions.
* Anonymous functions print as lambda expressions.
  Values of non-constant nonlocal bindings are also printed.
  Full Metal Equality says we also print source code location.
* Builtin named functions print as their names, eg `sin`. (Or `std.sin`.)
* User-defined named functions print as their names.
  Full Metal Equality says we also print source code location.
* Partially applied named functions print as a function name followed by
  argument expressions. Eg `match [#Z->0,#S n->n+1]`.

TODO:
 * Curv expression pretty-printer. Used initially for printing reactive exprs.
   See [[CodeFmt]] issue.
 * Compiler knows which expressions are constant.
 * Initial 80% solution:
    * Print builtin functions as just their names.
    * Print closures as function literals, ignoring the environment, using the
      expression printer. Ignoring the environment is a stopgap measure.
    * Print partial applications of builtins as the function name
      followed by arguments. Eg,
      * Print piecewise functions as 'match' expressions.
      * Print composite functions as 'compose' expressions.
 * Print the non-constant members of the environment of a closure
   using a `let` clause; see below.

Printing Anonymous Functions
----------------------------
Non-constant, non-local variables in a lambda expression
are printed using an enclosing `let` clause:
    let nonlocal1 = val1;
        nonlocal2 = val2;
        ...
    in param -> body

Rationale:
* The non-constant nonlocal bindings contain runtime values and printing them
  helps us to debug code/understand program dynamics.
* Printing constant nonlocal bindings is impractical.
  It means printing the full source code of all library dependencies.
  The same information can be obtained from the source code location of
  the lambda expression (which Full Metal Equality requires us to print).

Are there recursive anonymous functions? How are they printed?
* In Curv 0.5, all recursive functions are named, making them easy to print.
* According to Named Functions (and Recursive Combinator Exprs), stamping a
  function with a name and defining it recursively are orthogonal.
  So yes there are recursive anonymous functions.
* If we use Branded Values with Unconditioned Identity, then we can't mandate
  that all recursive functions are named using 'def' because then they are
  restricted from containing dynamic nonlocal bindings. So yes there are
  recursive anonymous functions.

For a constant recursive function, it's easy. This:
    let fact = match[0->1,n->n*(fact(n-1))] in fact
prints as
    match[0->1,n->n*(fact(n-1))]
Since 'fact' is a constant, the nonlocal reference 'fact' in the embedded
lambda expr doesn't need its value to be displayed, according to the
previous rules.

Things get complicated and messy if multiple lambda expressions are printed,
each with its own environment, with possibly duplicate entries.
We at least need a check for infinite regress when printing
a non-constant recursive function.

We might want a smarter pretty-printer that unifies multiple `let` clauses
where possible, suppressing duplicate entries, making the output terser
and easier to read. For example, a set of mutually recursive closures
are called a 'recursion group' and share an environment, and this can be
used to guide the construction of a shared let clause in the printout.

When printing a module, if a member function references sibling member 
functions, with or without with recursion, we want those siblings to be printed
once. Use the module scope as part of the lexical scope and don't include
bindings in local `let` clauses that are duplicated at the module level.

printing builtin functions
--------------------------
Add a new keyword, `std`, which cannot be used as a variable name (unless
quoted). Initially, the `std` keyword can only be used in one context, which
is phrases of the form `std.foo`, where `foo` is a standard binding.

Builtin functions like `sin` print as `std.sin`, an expression which means
the same thing regardless of the environment in which it is evaluated.

Later, we want `std` to denote a record containing all standard bindings.
Non-value bindings like `print` and `file` are reinterpreted as value
bindings to Metafunction values, but a metafunction can only be called
if it is a constant. See [[Macro]] and [[Constant]].
