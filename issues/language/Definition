Definition Syntax Roadmap
=========================
A number of proposals are under development that add new definitional forms.
This collects all the syntax together.

Goals:
* All of the definition syntax is documented in one place.
* Consistency in syntax and semantics.
* The syntax of a definition, in isolation, gives its semantics.
* And you can observe those semantics using the REPL,
  since any definition can be executed in the REPL.

Object Definitions
------------------
The Object proposal adds "object definitions" which bind a name
to a newly constructed object. An object name might not be an expression,
and the right side is not an expression, so I don't want to confuse object
bindings with mutable variable bindings. The 'var' keyword is not used.

    object <pattern> = <new-object>
or:
    loc <pattern> = <new-location>

Branded Value Definitions
-------------------------
def <identifier> = <expression>
def <identifier> <param>... = <expression>

These definitions are potentially legal in any context, but nonlocal references
are restricted to be constants or parameters of branded value constructors.

Data Type Definitions
---------------------
data <identifier> <TypeSpec> ...
data <identifier> = <Alternative> | <Alternative> | ...

These are potentially legal in any context. They are branded value definitions.

New syntax for imperative definitions
-------------------------------------
Corequisite: deprecate and remove imperative generators, which conflict
with the Procedure feature and the Imperative Metaprogramming idea.

Goal: Distinguish mutable/immutable variable bindings. Motivation:
 * After experience with Curv 0.5, I feel that variables should not be
   mutable unless explicitly defined as such in an imperative `do` clause.
 * `let` bindings should be immutable, so that I can document them as
   always having substitution semantics.
 * In Curv.next, constant expressions have special semantic properties.
   Now we need to reason about whether a given expression is constant.
   Now there is a benefit to syntax highlighting and semantic markers
   which assist in this.
 * Mutable variable definitions can be typed, but these are object types
   that are enforced on assignment. These types may be a subset of the schemas
   that can be used in immutable variable definitions.
 * I have a crazy idea to make a metaprogramming protocol for imperative
   control structures, which return a procedure that takes an environment
   record as an argument. This environment contains in-scope mutable bindings
   (but not immutable bindings). So it's good to distinguish mutable bindings.

But, by making this distinction, we break the symmetry between definitions
in imperative (`do`) and functional (`let`, module) contexts. Now there is a
kind of definition only legal in imperative context.

Benefits of new syntax:
* Terser.
* Closer to common practice: 'var' keyword is found in Javascript and
  many other popular languages.
* Distinguishes mutable/immutable bindings. Motivation:
  * semantic highlighting of variable names. Different colours for mutable,
    immutable, constant.
  * `let` bindings should be immutable, so that I can document them as
    always having substitution semantics.

Syntax (pure imperative contexts only, not in generators):
  var x = 0;            // immutable
  var y := 1;           // mutable
  var (x = 0, y := 1);  // simultaneous definitions?
  x = 0;                // error: did you mean assignment or definition?
  f x = -x;             // error, recursive defn in imperative context
  var f x = -x;         // syntax error
  var f x := -x;        // syntax error
  include ...;          // immutable
  test ...;

Critique of the 'var' keyword:
* All of the above definitional forms define variables.
  Why use 'var' specifically for sequentially scoped local variables?
* In other languages that have a 'var' keyword, this specifically defines
  a mutable variable, and mutability is what 'var' is supposed to mean.
  So it's odd that `var x = 0` is an immutable definition.

I like the 'my' keyword in Perl/Raku for defining lexically scoped
local variables. It's terse, it doesn't connote mutability, and it's fluent
(plain English, pronouncable, not an abbreviation).
* Also, if we need it, 'my f x = x + 1' is less weird
  than 'var f x = x + 1' given the connotations of 'var'.

So an alternative is:
    my x = 0;       // immutable, sequentially scoped variable.
    my y := 1;      // mutable, sequentially scoped variable.
Or,
    val x = 0;       // immutable, sequentially scoped variable.
    var y := 1;      // mutable, sequentially scoped variable.

Unified definition documentation
--------------------------------
a = b        // recursive def, restricted to let and modules
f x = -x     // recursive def, restricted to let and modules.
def a = b    // recursive, restricted to modules.
def f x = -x // recursive, restricted to modules.
my x = 0     // sequential def, restricted to do
my x := 0    // sequential def, restricted to do
include R    // any context
test S       // any context
object <pattern> = <new-object>    // any context

All definition types work and have distinct semantics in the REPL.
 * `a = b` and `var a = b` have distinct scoping rules for right side.
 * `var a := b`: assignment is only legal to a mutable variable.

This is an improvement over Curv 0.5, where
 * local definitions are illegal (except in a compound statement).
 * 'local include/include' and 'local test/test' are distinguished by the
   language but could not be distinguished in the REPL.

ML-style function definitions:
  f x = -x
  f x: -x
  var f x = -x
  var v x := -x
  v x := -x
The first form is provided because it is traditional in Haskell and other
ML family languages. It is an equational definition. Some users (with
Javascript experience) will ignore this form and use lambdas for definitions.

The remaining forms are unnecessary, not required by tradition, confusing.
So I will deprecate 'f x: -x'. This affects shape definitions. New style:
    make_shape {
        dist: [x,y,z,_] -> max[x,y,z] - r, // close to idiomatic Javascript
        bbox: [[-r,-r,-r],[r,r,r]],
        is_3d: true,
    }

'def' for named values:
    def a = b
    def f x = x + 1
This syntax mostly only makes sense in modules.
The proposals waffle on whether they strictly restricted to modules.
There's no reason to support imperative versions.

Brainstorming
-------------
Terser, distinguishes mutable/immutable variable bindings.
* The syntax no longer needs to be unambiguous when used in a list
  or dynamic record constructor, so I have more freedom.
* The current syntax is verbose (eg 'local include ...').
* I now have motivation for distinguishing mutable vs immutable
  variable definitions in imperative code:
  * semantic highlighting of variable names. Different colours for mutable,
    immutable, constant.
  * `let` bindings should be immutable, so that I can document them as
    always having substitution semantics.
* In a mutable variable definition, should the initial value be
  preceded by `=` or `:=`?
  * In Algol 68, the `=` denotes an immutable binding,
    while `:=` initializes a mutable binding.
  * In Modula 3, 'CONST x = 0' and 'VAR y := 1'.
* I still don't want to use `foo = 42` style definitions in imperative
  code because it isn't an assignment statement and I want to issue an
  error message asking to change this to a definition or an assignment.
* The current syntax is elegant and orthogonal. However, now I am proposing
  to add mutable variable definition syntax which isn't available in 
  a declarative context, so I'm breaking symmetry.
* The current syntax supports simultaneous definitions (which can't see
  one another), and this is useful. `local (x=y, y=x)`. Stupid example.
Proposal:
* `x=0` is an error.
* `var immutable=0` and `var mutable := 1`.
  More generally this will be 'var <pattern> := <expr>'.
* What happens to `local f x = x + 1`? Probably never used right now.
  * `var f = x -> x + 1` is fine.
  * `var f x = x + 1` can be supported. A bit weird. Could be undocumented
    but suggested as replacement in deprecation mesage.
  * Can't use `f x := x + 1`. Too weird.
* The other definition forms are used unchanged, and their bindings are
  immutable: include file`, `test (statements)`.
* simultaneous definitions? `var (x=y,y:=x)`
Possible confusion over 'var'?
In Curv, a 'variable' is like in Haskell or math or logic, it's a named
value usually, or can be a named object in the imperative sublanguage.
But in Pascal, VAR is mutable and CONST is immutable. In Javascript,
  var x = 1; -- mutable, historical messed up scoping
  let x = 1; -- mutable, lexical scoping
  const x = 1; -- immutable, lexical scoping
In Swift,
  var x = 1; -- mutable
  let x = 1; -- immutable (opposite of Javascript, yay)
In Go,
  var x int = 1; -- mutable
  y := 1;    -- mutable, type inference
The good news: it is widely understood that 'var x = 1' is a variable
definition. The bad news: 'var' consistently means mutable in other well
known languages. Beyond that, there is much variability in syntax.
