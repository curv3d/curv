Transform Patterns
------------------
Transform patterns are an abstraction mechanism that lets
you define new pattern matching operations using functions.

`pat <: func` is a transform pattern. Apply `func` to the argument.
Fail if `func arg` fails. Otherwise match `func arg` against pat.
Pronounce '<:' as 'from'.
Same precedence as '::', left associative.
Data flows left to right when <: and :: are chained.

BUT: In the Types proposal, the left argument to <: is a Schema, not a Function.

Variant Patterns
----------------
#foo
#bar <pat1>
#baz <pat1> <pat2>

Constructor Patterns
--------------------
In general, data patterns are constructor patterns.
This extension permits patterns of the form `f <pat1> <pat2> ...`
where `f` is a possibly curried constructor function.

This means we need to distinguish certain functions as constructor
functions, so that they contain the protocol for implementing these patterns.
Initially the only constructor patterns will be primitive.
Later, with ADA we will have user defined constructor functions.
