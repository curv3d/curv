Syntax changes and standard coding style for Curv 0.5
=====================================================
* Record locatives
* Uniform control structure syntax? I'm less sure about uniform mixfix now.
  * deprecate 'do' in favour of 'begin'.
* Flatten precedence of algebraic left-assoc infix to <pipeline> precedence.
  * Deprecate expressions that won't associate correctly with new syntax.
* Pipeline lambda.
  * Get rid of :: expression. Use require instead, which can be curried.
    Now :: is purely a pattern operator with <pattern> precedence
    (higher than <pipeline>). But I also want to claim :: for Type declarations.
* Argument lambda. A lambda can be used as a function argument, without
  being parenthesized. This is useful for:
   * Capturing a value in the middle of a pipeline.
   * Combinators that take a function as final argument.
   * The syntax of name-binding imperative control structures.
     Zig's 'for' loop uses this syntax:
       for (string) |character| { ... }
  Requires a reserved operator or keyword to start a lambda. For example,
    \x->...
    fn x->...
    |x|...
  Prior art:
   * Roc, uses \x->...
   * Swift has "trailing closure syntax", a special case function call syntax,
     permitting a final lambda argument to be placed after the funcall
     arg parens. However, note that Swift lambdas are enclosed in braces, they
     don't gobble all tokens to the next , or ; as I am proposing for Curv.
* Right grouping operator
  Instead of pipeline lambda or argument lambda, provide a unary symbol that
  groups all following tokens (to the end of an item) into a subphrase,
  like parens but without the closing paren. Eg,
      <primary> ::= '<<' <item>
  This is an alternative to using a symbol like \ or fn to introduce a lambda,
  and also replaces the << operator, since this symbol converts the following
  tokens into a primary phrase, which is a function argument.
  Possible syntax: @ $ \ : <<

f = |x,y| x+y
switch (a) [
  |#zero| 0,
  |#succ n| f n + 1,
]

Yes:
* Uniform control structure syntax:
    if A then B else C
    for A in B until C do E
    while A do B
    begin A in B
    let A in B
    parametric A in B
  Rationale:
  * more consistent, more pronounceable.
  * parens are used only for grouping, not as keywords or syntax.
  * leading and interior keywords are disjoint, hence 'begin'.
  * supports optional offside syntax, like Haskell/Python.

Maybe:
* locative +:= expr
* Low precedence collection@index operator? See "flatten precedence".

Done:
- Indexed locatives: a.[i,j].f@k := ...
- List locatives [loc1,loc2]
- locative!func1!func2
- In statement context, () and (a,b,c) are statements. In expression context,
  they are deprecated list syntax.
- () as an empty list is deprecated, use [].
  It is incompatible with () as the empty statement.
- (a,b,c) as a list is deprecated, use [a,b,c].
  It is incompatible with (a,b,c) as a statement and , as a first class
  expression sequencing operator.
- slice rvalue: collection.[i,j,k]
- deprecate array[i,j]; use array.[i,j] instead.
  - This syntax is incompatible with lenses as functions,
    because [lens1,lens2] is a lens.
  - This syntax can't be used for lens application because it doesn't work
    with records. (Or functions: lens application works on all values.)
  - The new syntax allows indexing a record with a symbol, replacing
    the old record."string" syntax.
- deprecate record."string"; use record.[symbol] instead.
  - 'symbol <string>' converts string to symbol
- id:expr is sugar for [#id,expr].
- Deprecate {"foo":1}. Use {[#foo, 1]} instead.
- Deprecate {foo:}. I've never used it, there hasn't been a use case.
- Deprecate `where`.

Formatting:
* A curv-fmt program that enforces standardized spacing for expressions?
  This relates to how function values are printed (as code).
  Thinking about good style, and how rigid the standard should be.
* Definitions are separated by commas? Enforced by the style guide?
  That means if you avoid the imperative dialect, then there are no semicolons.
  ("Semicolon is the imperative sequencing operator.")
  Currently, I am using semicolons for separators in 'big' constructs like a
  top-level module, or a multi-line let.

## if/for/while, grouping-only parens
 1. A more uniform, keyword-based mixfix syntax.
      <ritem> ::=
        if <ritem> then <ritem> else <ritem>
        for <ritem> in <ritem> while <ritem> do <ritem>
        while <ritem> do <ritem>
    It's not totally uniform, otherwise I'd require 'let <ritem> in <ritem>'.
    This is the smallest change to eliminate parens as syntax.

    It's weird and concerning because 'do' and 'while' can now occur at the
    beginning or the end of an ritem. But still formally parseable.
    This possible style concerns me:
        for i in 1..n
        while not (endable i)
        do ...
    because 'while' and 'do' at start of line is visually ambiguous.
    But this is fine:
        if
            some really
            long multi
            line condition
        then
            something
        else
            something else
    because 'then' and 'else' can only be interior mixfix keywords.

New keyword design:
    if <ritem> then <ritem> else <ritem>
    foreach <ritem> in <ritem> until <ritem> repeat <ritem>
    while <ritem> repeat <ritem>
Inspired by pronounceable programming research. No punctuation.
No homonyms (foreach, not for). Meaningful keywords ('repeat' precedes
the phrase to be repeatedly executed, more meaningful than 'do').

Can I parse the new syntax along with the old syntax?
    if: Try to parse an <ritem> followed by 'then'.
        If that fails, because I ran into an ritem_end_token,
        then try to parse <parens>.
    while: ditto

## array indexing
f[x,y] function call looks like array indexing, and is confusible
with actual array indexing using the a[i,j] syntax. a[i] array indexing
is incompatible with lenses.
* Switch to the a@i@j array indexing syntax.
  WAIT: Precedence of the @ operator is undecided. Finish Modular Programming.
* Switch to Elm/Haskell coding style for function calls: `f [x,y]`
  BUT: Consider the general syntax for postfix/term phrases.
  Space before `.`? Space before `@`?
* `f[x,y] = x + y` looks a lot like an assignment statement for updating
  a matrix. Introduce the `func` keyword, which is needed anyway for
  named functions bound to a combinator expression.
    func f [x, y] = x + y
  WAIT: Finish the Modular Programming design.

## @_@_ vs .[_,_]
In many cases, a@i is more legible, in context, than a[i].
I prefer p@[X,Y,Z] to p[[X,Y,Z]].

However, there are some contexts where the syntax doesn't seem ideal.
    bbox[MIN,X]        vs bbox@MIN@X
                       vs bbox @MIN @X
    array[p@Z+1,p@Z+2] vs array@(p@Z+1)@(p@Z+2)
                       vs array @(p@Z+1) @(p@Z+2)
I have elsewhere proposed to add the syntax
    collection.[i,j]
as a 'slice' syntax, equivalent to `collection@(slice[i,j])`.
It works on both arrays and records. So, now consider:
    bbox.[MIN,X]        vs bbox@MIN@X
    array.[p@Z+1,p@Z+2] vs array@(p@Z+1)@(p@Z+2)
                        vs array.[p.[Z]+1,p.[Z]+2]
Note F# uses array.[i] for array indexing. It's the closest we can get to
traditional syntax without conflicting with function calls.

Adding two syntaxes for the same thing feels like going backwards, in a ways,
since I am in the process of eliminating the dual syntax of (a,b) vs [a,b].
In this latter case, (a,b) and [a,b] have the same legibility, but in the
case of a.[i] vs a@i, I want to use a mix of both syntaxes to maximize
readability. In the case of 'f x' vs 'x >> f', the need for both is crystal
clear. Maybe this proposal is more like the two function call syntaxes.

@ is terser and more chainable if the lens is an identifier or [...].
Otherwise, if the lens is not a primary expression, it needs to be
parenthesized, so now your choice is between a@(...) and a.[...].
Both have the same legibility; a.[...] is slightly better. So the @ operator
has a limited range of applicability.

I could lower the precedence of @ so that @<term> needs no parens.
(But higher precedence than arithmetic.)
    foo @ slice[i,j,k]
    include lib.foo @ just[#bar,#baz]
And you use .[lens] inside a term.

Now, when you are chaining with @ to traverse a data structure,
you must use '@#foo' instead of '.foo'. I previously called this a weakness.
Here's a chain from std.curv:
    shapes@i.bbox@MIN@X
Oops, that now must be rewritten as one of
    shapes@i@#bbox@MIN@X
    shapes.[i].bbox.[MIN,X]   <-- this is pretty good
Okay, I prefer a.[i] for term chaining with .id

I will document a.[i] in Lists and r.[k] in Records,
and then document low-precedence @ in Collections & Lenses as a lens operator.
The deprecation for a[i] will suggest a.[i] as replacement.

Looking back at past proposals:
 * collection@key, works for dictionaries as well (so 'key' is not a lens).
   This conflicts with vec@[X,Y,Z] and collection@lens in general.
   The Scalar Map proposal eliminates this problem.
 * I have considered C@ as a curried form of C@K to convert a collection
   to a function over key values. Eg, map(C@).

## The Dot Operator
On one hand, the current syntax uses equal precedence for the juxta operator
and the dot operator. It is originally derived from C postfix expressions,
where postfix.member and postfix[index] are chained, for traversing a data
structure. It continues to make sense for Modular Programming, where a
term (a traversal of the module tree) is a chain of .member and functor call
expressions. It is also leveraged in the existing shape library API,
in cases like
    smooth 1 .union [s1, s2]

If we combine the Elm/Haskell convention of always writing an explicit space
between function and argument with chaining of juxta and dot operators,
then `term .member` would be preferred coding style. And `term @lens`.

BUT: There is an ancient and engrained tradition that you must always write
`term.member` with no spaces. The dot is not seen as an infix operator: it
is seen as part of the name.

Functional languages (ML descendents):
 * Haskell: `Module.member` vs `f . g`
 * Elm: `record.member` vs `map .member recordlist`
 * O'Caml: `f x` vs `record.member`
In these languages, dot has higher precedence than juxta.

C descendents:
 * f(x) and record.member, same precedence, no spaces.

Curv doesn't match either tradition. A suggestion for the curv format program:
 * The juxta operator is written using a space.
 * The at operator is preceded by a space. `m @x @y` is more legible
   than `m@x@y`.
 * Use a.b.c for terms containing dot operators but not juxta or at operators.
 * In a term containing juxta or at operators, dot is preceded by space.
     a.b.c
     a .b .c @x q [w,z]

Reality check: there needs to be a place to put spaces so that a long term
can be broken up over multiple lines. That place is:
    f x
    record .member
    source @lens
To the extent that they make this impossible, Haskell and Elm are wrong.

Whether the space should be mandatory is another issue.
At this point, I'd consider giving the writer a choice over tight and loose
style, and not force one style in the formatter.

The Elm style seems too rigid. Why is
    pi =
        3.1416
better than
    pi = 3.1416
? I prefer the latter, because it's short enough that the latter is clearer.
If the definition is multi-line, only then do I switch to the Elm style of
beginning the definiens on a new line.
