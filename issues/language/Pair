Directed pairs are a primitive, general purpose data structure.
The expression `a => b` is a directed pair containing arbitrary values 
`a` and `b`.

Curv provides two ways to represent an ordered pair: the list [a,b]
and the directed pair a=>b. The latter is used in those cases where
the arrow syntax is more suggestive of the mathematical structure
that is being represented. Here are two cases from mathematics where
directed pairs appear.
 1. In mathematics, a function is considered to be a set of
    argument=>result pairs. By extension, you use a directed pair a=>b
    whenever you want to represent an element of a function-like mapping.
 2. A directed graph is considered to be a set of directed pairs
    n1=>n2, where both elements are nodes in the graph.

Directed pairs are used to represent key/value pairs when
constructing and deconstructing record values.
(Since records are mappings from field names to values.)

Since records are keyed using symbols, a directed pair whose first element
is a symbol is called a "field". And there is a special shorthand syntax
for fields:
    #foo => 1
can be written as:
    foo: 1
Fields are used for constructing records, like this:
    {foo: 1, bar: 2}

Pattern syntax:
    <pattern> => <pattern>
    <identifier> : <pattern>
For example, to iterate over the key/value pairs in a record,
you can write:
    for (key=>val in myrecord) ...

Similar features in other languages:
 * The a=>b syntax comes from Ruby/PHP/Perl/Raku/Julia, where it denotes
   a key/value pair in a hash/array literal. PHP also has 'a=>b' patterns.
 * The dotted pair in Lisp -- `(a . b)` -- which is used to represent
   name=>value pairs in property lists.
 * std::pair in C++ -- `std::pair(a, b)` -- which is used to represent
   key=>value pairs in maps (such as std::map).

Curv uses directed pairs for:
 * constructing records. {a: 1, b: 2} or {#a => 1, #b => 2}
 * deconstructing records. `for (name => val in some_record) ...`
 * later, sparse arrays are {1=>x,2=>y,7=>k}

Fields could in principle be used to encode Swift style function argument
lists, which have a mix of labeled and unlabeled arguments and are ordered.
    range[1, to: 10]

There's a proposal for adding Python-like ordered dictionaries.
With directed pairs, I don't need to add special syntax for the constructor:
    dict[key1=>elem1, key2=>elem2]

Maybe use directed pairs for function types?
    Func(ArgType => ResultType)
Or dictionary types?
    Dict(KeyType => ElemType)

Syntax Confusion
----------------
=> can be confused with <= by novice programmers.

Javascript (and C#, D, Scala, SML) uses => not -> in lambda expressions.
So Javascript programmers may be confused.
But many other languages use -> in lambda expressions: Java, Julia,
many functional languages (Haskell, OCaml, F#).

Creative Uses of Directed Pair Syntax
-------------------------------------
APIs can choose to use a=>b pair syntax in preference to [a,b]
in contexts where the => symbol is more evocative of the API semantics.

In shape constructors:
 * stroke {d: diameter, from: point1, to: point2}
   stroke d (point1 => point2)
   stroke [size: d, point1 => point2]
 * half_plane [p1, p2]
   half_plane (p1 => p2)

I considered then rejected using i=>j to denote the start/end index
of a segment index (see [[Slice]]).

Critique: is it a good idea to overload the meaning of pair values,
going beyond the mathematical origins of a mapping from one value to another?
* This critique is all about the syntax a=>b that's I've chosen for
  directed pairs.
* There is no general problem with having a generalized ordered pair data
  type and using it in a wide variety of contexts (both as key=>value pairs,
  and as other kinds of pairs). Eg,
  * 2 element lists [a,b] have exactly this character in Curv.
  * Dotted pairs (in Lisp) and std::pair (in C++) have exactly this character.

I'm not going to implement any of these "creative use" ideas right away.
