Imperative Programming project
==============================
I want to clean up and improve the imperative programming features.

Long term plan:
* compound locatives: add {a:loc1,b:loc2}, document
* mutate statements: loc!f -- document
* New syntax for imperative definitions. [[Definitions]]
* Switch statement.
* Procedures.
* New generators [[Generator]]
* New debug actions [[Action]]
Speculative:
* Objects (imperative i/o)
* Imperative metaprogramming (macros)
* New syntax for control structures. [[Mixfix]]

Procedures
----------
with mixfix:
    proc <locative-pattern> in <statement>
    proc <locative-pattern> in begin <statement> in <result>
without mixfix:
    proc <locative-pattern> -> <statement>
    proc <locative-pattern> -> begin <statement> in <result>

Switch statement
----------------
with mixfix:
    switch <expr> case <pat> then <phrase> ...
without mixfix:
    switch <primary-expr> [ <case>; ... ]
    <case> ::= <pat> -> <phrase> | proc <locpat> -> <stmt>
    This syntax can be easily exchanged for 'match' syntax
    and supports procedure cases.

Rationale: 'match' doesn't work for imperative statements.
'switch' is a macro, not a function.

Objects (imperative i/o)
------------------------
Objects are a representation of mutable state.
An object is a container that holds state which changes over time.
State is represented by immutable values.

Objects have nothing to do with OOP. Maybe call them Locations.

Objects may be bound to names, but object names are not in general expressions.
Named mutable variables are a special case of named objects.
There are multiple functional abstractions over objects: this is a big
proposal.

Imperative metaprogramming
--------------------------
The goal is abstraction over statements, eg DIY imperative control structures.
How?
* Macros, as in Lisp. This works. Existing control structures like 'if'
  can be recast as macros (no need to change syntax).
* Reify statements as values. You can reify a statement as a procedure value,
  but then you have to pass the mutable variables that the statement reads or
  modifies as explicit parameters. Possible, but inconvenient.
* Reify statements as objects. A reified statement is an object that
  captures references to the mutable variables it reads or modifies.
  Per the Object proposal, it can't be bound to a local variable, but it
  can be passed as a parameter.
  * But note, the syntax for passing an object as an argument is not the
    same as function call syntax. Currently I use `obj!f` to indicate
    an effect. So some serious syntax design is required.

At present, the answer is macros. `switch` is a macro.
