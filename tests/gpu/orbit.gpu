{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-1.75,-1.75,-0.75],[1.75,1.75,0.75]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r7 = 0.0;
    |  float r17 = 0.5;
    |  float r42 = 1.0;
    |  float r43 = 1.0/0.0;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  float r5 = cos(r4);
    |  float r6 = sin(r4);
    |  vec3 r8 = vec3(r5,r6,r7);
    |  float r9 = r8.x;
    |  float r10 = r1-r9;
    |  float r11 = r8.y;
    |  float r12 = r2-r11;
    |  float r13 = r8.z;
    |  float r14 = r3-r13;
    |  vec3 r15 = vec3(r10,r12,r14);
    |  vec3 r16 = abs(r15);
    |  vec3 r18 = vec3(r17);
    |  vec3 r19 = r16-r18;
    |  float r20 = r19[0];
    |  float r21 = r19[1];
    |  float r22 = max(r20,r21);
    |  float r23 = r19[2];
    |  float r24 = max(r22,r23);
    |  float r25 = r0[0];
    |  float r26 = r0[1];
    |  float r27 = r0[2];
    |  float r28 = r0[3];
    |  float r29 = cos(r28);
    |  float r30 = sin(r28);
    |  float r31 = -(r30);
    |  vec3 r32 = vec3(r29,r31,r7);
    |  float r33 = r32.x;
    |  float r34 = r25-r33;
    |  float r35 = r32.y;
    |  float r36 = r26-r35;
    |  float r37 = r32.z;
    |  float r38 = r27-r37;
    |  vec3 r39 = vec3(r34,r36,r38);
    |  float r40 = length(r39);
    |  float r41 = r40-r17;
    |  bool r44 =(r24 == r43);
    |  float r45 = r41-r24;
    |  float r46 = r17*r45;
    |  float r47 = r46/r42;
    |  float r48 = r17+r47;
    |  float r49 = max(r48,r7);
    |  float r50 = min(r49,r42);
    |  float r51 = r42-r50;
    |  float r52 = r41*r51;
    |  float r53 = r24*r50;
    |  float r54 = r52+r53;
    |  float r55 = r42*r50;
    |  float r56 = r42-r50;
    |  float r57 = r55*r56;
    |  float r58 = r54-r57;
    |  float r59 =(r44 ? r41 : r58);
    |  return r59;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r7 = 0.0;
    |  float r17 = 0.5;
    |  float r60 = 0.8;
    |  vec3 r61 = vec3(r60,r60,r17);
    |  float r62 = 2.2;
    |  vec3 r63 = vec3(r62);
    |  vec3 r64 = pow(r61,r63);
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  float r5 = cos(r4);
    |  float r6 = sin(r4);
    |  vec3 r8 = vec3(r5,r6,r7);
    |  float r9 = r8.x;
    |  float r10 = r1-r9;
    |  float r11 = r8.y;
    |  float r12 = r2-r11;
    |  float r13 = r8.z;
    |  float r14 = r3-r13;
    |  vec3 r15 = vec3(r10,r12,r14);
    |  vec3 r16 = abs(r15);
    |  vec3 r18 = vec3(r17);
    |  vec3 r19 = r16-r18;
    |  float r20 = r19[0];
    |  float r21 = r19[1];
    |  float r22 = max(r20,r21);
    |  float r23 = r19[2];
    |  float r24 = max(r22,r23);
    |  float r25 = r0[0];
    |  float r26 = r0[1];
    |  float r27 = r0[2];
    |  float r28 = r0[3];
    |  float r29 = cos(r28);
    |  float r30 = sin(r28);
    |  float r31 = -(r30);
    |  vec3 r32 = vec3(r29,r31,r7);
    |  float r33 = r32.x;
    |  float r34 = r25-r33;
    |  float r35 = r32.y;
    |  float r36 = r26-r35;
    |  float r37 = r32.z;
    |  float r38 = r27-r37;
    |  vec3 r39 = vec3(r34,r36,r38);
    |  float r40 = length(r39);
    |  float r41 = r40-r17;
    |  bool r42 = r41<=r7;
    |  bool r43 = r41<=r24;
    |  bool r44 =(r42 || r43);
    |  float r45 = r0[0];
    |  float r46 = r0[1];
    |  float r47 = r0[2];
    |  float r48 = r0[3];
    |  float r49 = cos(r48);
    |  float r50 = sin(r48);
    |  float r51 = -(r50);
    |  vec3 r52 = vec3(r49,r51,r7);
    |  float r53 = r52.x;
    |  float r54 = r45-r53;
    |  float r55 = r52.y;
    |  float r56 = r46-r55;
    |  float r57 = r52.z;
    |  float r58 = r47-r57;
    |  vec4 r59 = vec4(r54,r56,r58,r48);
    |  float r65 = r0[0];
    |  float r66 = r0[1];
    |  float r67 = r0[2];
    |  float r68 = r0[3];
    |  float r69 = cos(r68);
    |  float r70 = sin(r68);
    |  vec3 r71 = vec3(r69,r70,r7);
    |  float r72 = r71.x;
    |  float r73 = r65-r72;
    |  float r74 = r71.y;
    |  float r75 = r66-r74;
    |  float r76 = r71.z;
    |  float r77 = r67-r76;
    |  vec4 r78 = vec4(r73,r75,r77,r68);
    |  vec3 r79 =(r44 ? r64 : r64);
    |  return r79;
    |}
    |const vec3 bbox_min = vec3(-1.75,-1.75,-0.75);
    |const vec3 bbox_max = vec3(1.75,1.75,0.75);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col,iqcol, 0.5);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
