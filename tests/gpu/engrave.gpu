{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-20.25,-9,-9],[20.25,9,9]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 2000.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(-11.25,0.0,0.0);
    |  vec3 r19 = vec3(9.0,9.0,9.0);
    |  float r26 = 0.0;
    |  float r50 = 0.1;
    |  float r68 = 0.15;
    |  float r70 = 1.5;
    |  vec3 r76 = vec3(11.25,0.0,0.0);
    |  float r140 = 0.2;
    |  float r141 = 1.0;
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  vec4 r12 = vec4(r4,r7,r10,r11);
    |  float r13 = r12[0];
    |  float r14 = r12[1];
    |  float r15 = r12[2];
    |  float r16 = r12[3];
    |  vec3 r17 = vec3(r13,r14,r15);
    |  vec3 r18 = abs(r17);
    |  vec3 r20 = r18-r19;
    |  float r21 = r20[0];
    |  float r22 = r20[1];
    |  float r23 = max(r21,r22);
    |  float r24 = r20[2];
    |  float r25 = max(r23,r24);
    |  float r27 = min(r25,r26);
    |  vec3 r28 = vec3(r26);
    |  vec3 r29 = max(r20,r28);
    |  float r30 = length(r29);
    |  float r31 = r27+r30;
    |  float r32 = r12[0];
    |  float r33 = r12[1];
    |  float r34 = r12[2];
    |  float r35 = r12[3];
    |  vec3 r36 = vec3(r32,r33,r34);
    |  vec3 r37 = abs(r36);
    |  vec3 r38 = r37-r19;
    |  float r39 = r38[0];
    |  float r40 = r38[1];
    |  float r41 = max(r39,r40);
    |  float r42 = r38[2];
    |  float r43 = max(r41,r42);
    |  float r44 = min(r43,r26);
    |  vec3 r45 = vec3(r26);
    |  vec3 r46 = max(r38,r45);
    |  float r47 = length(r46);
    |  float r48 = r44+r47;
    |  float r49 = abs(r48);
    |  float r51 = r49-r50;
    |  float r52 = r12[0];
    |  float r53 = r12[1];
    |  float r54 = r12[2];
    |  float r55 = r12[3];
    |  float r56 = cos(r52);
    |  float r57 = sin(r53);
    |  float r58 = r56*r57;
    |  float r59 = cos(r53);
    |  float r60 = sin(r54);
    |  float r61 = r59*r60;
    |  float r62 = r58+r61;
    |  float r63 = cos(r54);
    |  float r64 = sin(r52);
    |  float r65 = r63*r64;
    |  float r66 = r62+r65;
    |  float r67 = abs(r66);
    |  float r69 = r67-r68;
    |  float r71 = r69/r70;
    |  float r72 = max(r51,r71);
    |  float r73 = -(r72);
    |  float r74 = max(r31,r73);
    |  float r75 = r0.x;
    |  float r77 = r76.x;
    |  float r78 = r75-r77;
    |  float r79 = r0.y;
    |  float r80 = r76.y;
    |  float r81 = r79-r80;
    |  float r82 = r0.z;
    |  float r83 = r76.z;
    |  float r84 = r82-r83;
    |  float r85 = r0.w;
    |  vec4 r86 = vec4(r78,r81,r84,r85);
    |  float r87 = r86[0];
    |  float r88 = r86[1];
    |  float r89 = r86[2];
    |  float r90 = r86[3];
    |  vec3 r91 = vec3(r87,r88,r89);
    |  vec3 r92 = abs(r91);
    |  vec3 r93 = r92-r19;
    |  float r94 = r93[0];
    |  float r95 = r93[1];
    |  float r96 = max(r94,r95);
    |  float r97 = r93[2];
    |  float r98 = max(r96,r97);
    |  float r99 = min(r98,r26);
    |  vec3 r100 = vec3(r26);
    |  vec3 r101 = max(r93,r100);
    |  float r102 = length(r101);
    |  float r103 = r99+r102;
    |  float r104 = r86[0];
    |  float r105 = r86[1];
    |  float r106 = r86[2];
    |  float r107 = r86[3];
    |  vec3 r108 = vec3(r104,r105,r106);
    |  vec3 r109 = abs(r108);
    |  vec3 r110 = r109-r19;
    |  float r111 = r110[0];
    |  float r112 = r110[1];
    |  float r113 = max(r111,r112);
    |  float r114 = r110[2];
    |  float r115 = max(r113,r114);
    |  float r116 = min(r115,r26);
    |  vec3 r117 = vec3(r26);
    |  vec3 r118 = max(r110,r117);
    |  float r119 = length(r118);
    |  float r120 = r116+r119;
    |  float r121 = r86[0];
    |  float r122 = r86[1];
    |  float r123 = r86[2];
    |  float r124 = r86[3];
    |  float r125 = cos(r121);
    |  float r126 = sin(r122);
    |  float r127 = r125*r126;
    |  float r128 = cos(r122);
    |  float r129 = sin(r123);
    |  float r130 = r128*r129;
    |  float r131 = r127+r130;
    |  float r132 = cos(r123);
    |  float r133 = sin(r121);
    |  float r134 = r132*r133;
    |  float r135 = r131+r134;
    |  float r136 = abs(r135);
    |  float r137 = r136-r68;
    |  float r138 = r137/r70;
    |  float r139 = max(r120,r138);
    |  float r142 = r141-r140;
    |  float r143 = r103*r142;
    |  float r144 = r139*r140;
    |  float r145 = r143+r144;
    |  float r146 = min(r74,r145);
    |  return r146;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(-11.25,0.0,0.0);
    |  vec3 r19 = vec3(9.0,9.0,9.0);
    |  float r26 = 0.0;
    |  float r50 = 0.1;
    |  float r68 = 0.15;
    |  float r70 = 1.5;
    |  vec3 r76 = vec3(11.25,0.0,0.0);
    |  float r140 = 0.2;
    |  float r141 = 1.0;
    |  float r160 = 0.8;
    |  float r161 = 0.5;
    |  vec3 r162 = vec3(r160,r160,r161);
    |  float r163 = 2.2;
    |  vec3 r164 = vec3(r163);
    |  vec3 r165 = pow(r162,r164);
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  vec4 r12 = vec4(r4,r7,r10,r11);
    |  float r13 = r12[0];
    |  float r14 = r12[1];
    |  float r15 = r12[2];
    |  float r16 = r12[3];
    |  vec3 r17 = vec3(r13,r14,r15);
    |  vec3 r18 = abs(r17);
    |  vec3 r20 = r18-r19;
    |  float r21 = r20[0];
    |  float r22 = r20[1];
    |  float r23 = max(r21,r22);
    |  float r24 = r20[2];
    |  float r25 = max(r23,r24);
    |  float r27 = min(r25,r26);
    |  vec3 r28 = vec3(r26);
    |  vec3 r29 = max(r20,r28);
    |  float r30 = length(r29);
    |  float r31 = r27+r30;
    |  float r32 = r12[0];
    |  float r33 = r12[1];
    |  float r34 = r12[2];
    |  float r35 = r12[3];
    |  vec3 r36 = vec3(r32,r33,r34);
    |  vec3 r37 = abs(r36);
    |  vec3 r38 = r37-r19;
    |  float r39 = r38[0];
    |  float r40 = r38[1];
    |  float r41 = max(r39,r40);
    |  float r42 = r38[2];
    |  float r43 = max(r41,r42);
    |  float r44 = min(r43,r26);
    |  vec3 r45 = vec3(r26);
    |  vec3 r46 = max(r38,r45);
    |  float r47 = length(r46);
    |  float r48 = r44+r47;
    |  float r49 = abs(r48);
    |  float r51 = r49-r50;
    |  float r52 = r12[0];
    |  float r53 = r12[1];
    |  float r54 = r12[2];
    |  float r55 = r12[3];
    |  float r56 = cos(r52);
    |  float r57 = sin(r53);
    |  float r58 = r56*r57;
    |  float r59 = cos(r53);
    |  float r60 = sin(r54);
    |  float r61 = r59*r60;
    |  float r62 = r58+r61;
    |  float r63 = cos(r54);
    |  float r64 = sin(r52);
    |  float r65 = r63*r64;
    |  float r66 = r62+r65;
    |  float r67 = abs(r66);
    |  float r69 = r67-r68;
    |  float r71 = r69/r70;
    |  float r72 = max(r51,r71);
    |  float r73 = -(r72);
    |  float r74 = max(r31,r73);
    |  float r75 = r0.x;
    |  float r77 = r76.x;
    |  float r78 = r75-r77;
    |  float r79 = r0.y;
    |  float r80 = r76.y;
    |  float r81 = r79-r80;
    |  float r82 = r0.z;
    |  float r83 = r76.z;
    |  float r84 = r82-r83;
    |  float r85 = r0.w;
    |  vec4 r86 = vec4(r78,r81,r84,r85);
    |  float r87 = r86[0];
    |  float r88 = r86[1];
    |  float r89 = r86[2];
    |  float r90 = r86[3];
    |  vec3 r91 = vec3(r87,r88,r89);
    |  vec3 r92 = abs(r91);
    |  vec3 r93 = r92-r19;
    |  float r94 = r93[0];
    |  float r95 = r93[1];
    |  float r96 = max(r94,r95);
    |  float r97 = r93[2];
    |  float r98 = max(r96,r97);
    |  float r99 = min(r98,r26);
    |  vec3 r100 = vec3(r26);
    |  vec3 r101 = max(r93,r100);
    |  float r102 = length(r101);
    |  float r103 = r99+r102;
    |  float r104 = r86[0];
    |  float r105 = r86[1];
    |  float r106 = r86[2];
    |  float r107 = r86[3];
    |  vec3 r108 = vec3(r104,r105,r106);
    |  vec3 r109 = abs(r108);
    |  vec3 r110 = r109-r19;
    |  float r111 = r110[0];
    |  float r112 = r110[1];
    |  float r113 = max(r111,r112);
    |  float r114 = r110[2];
    |  float r115 = max(r113,r114);
    |  float r116 = min(r115,r26);
    |  vec3 r117 = vec3(r26);
    |  vec3 r118 = max(r110,r117);
    |  float r119 = length(r118);
    |  float r120 = r116+r119;
    |  float r121 = r86[0];
    |  float r122 = r86[1];
    |  float r123 = r86[2];
    |  float r124 = r86[3];
    |  float r125 = cos(r121);
    |  float r126 = sin(r122);
    |  float r127 = r125*r126;
    |  float r128 = cos(r122);
    |  float r129 = sin(r123);
    |  float r130 = r128*r129;
    |  float r131 = r127+r130;
    |  float r132 = cos(r123);
    |  float r133 = sin(r121);
    |  float r134 = r132*r133;
    |  float r135 = r131+r134;
    |  float r136 = abs(r135);
    |  float r137 = r136-r68;
    |  float r138 = r137/r70;
    |  float r139 = max(r120,r138);
    |  float r142 = r141-r140;
    |  float r143 = r103*r142;
    |  float r144 = r139*r140;
    |  float r145 = r143+r144;
    |  bool r146 = r145<=r26;
    |  bool r147 = r145<=r74;
    |  bool r148 =(r146 || r147);
    |  float r149 = r0.x;
    |  float r150 = r76.x;
    |  float r151 = r149-r150;
    |  float r152 = r0.y;
    |  float r153 = r76.y;
    |  float r154 = r152-r153;
    |  float r155 = r0.z;
    |  float r156 = r76.z;
    |  float r157 = r155-r156;
    |  float r158 = r0.w;
    |  vec4 r159 = vec4(r151,r154,r157,r158);
    |  float r166 = r141-r140;
    |  vec3 r167 = vec3(r166);
    |  vec3 r168 = r165*r167;
    |  vec3 r169 = vec3(r140);
    |  vec3 r170 = r165*r169;
    |  vec3 r171 = r168+r170;
    |  float r172 = r0.x;
    |  float r173 = r2.x;
    |  float r174 = r172-r173;
    |  float r175 = r0.y;
    |  float r176 = r2.y;
    |  float r177 = r175-r176;
    |  float r178 = r0.z;
    |  float r179 = r2.z;
    |  float r180 = r178-r179;
    |  float r181 = r0.w;
    |  vec4 r182 = vec4(r174,r177,r180,r181);
    |  vec3 r183 =(r148 ? r171 : r165);
    |  return r183;
    |}
    |const vec3 bbox_min = vec3(-20.25,-9.0,-9.0);
    |const vec3 bbox_max = vec3(20.25,9.0,9.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
