{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-32.00000000000001,-32.00000000000001,-11.000000000000009],[32.00000000000001,32.00000000000001,11.000000000000009]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r7 = 3.141592653589793;
    |  float r9 = 1.5;
    |  float r11 = 2.0;
    |  float r16 = 1.0;
    |  float r18 = 49.6;
    |  vec2 r20 = vec2(0.0,21.000000000000004);
    |  float r32 = 1.5707963267948966;
    |  vec3 r33 = vec3(0.0,1.0,0.0);
    |  float r89 = 9.999999999999998;
    |  vec2 r91 = vec2(0.0,10.500000000000004);
    |  vec3 r103 = vec3(1.0,0.0,0.0);
    |  float r148 = 0.5;
    |  float r152 = 0.0;
    |  float r160 = 1.0471975511965976;
    |  vec2 r191 = vec2(0.5,1.0/0.0);
    |  vec2 r207 = vec2(2.5,49.6);
    |  float r225 = 3.0;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec2 r5 = vec2(r1,r2);
    |  float r6 = atan(r5.y,r5.x);
    |  float r8 = r6/r7;
    |  float r10 = r8+r9;
    |  float r12 = r10/r11;
    |  float r13 = floor(r12);
    |  float r14 = r11*r13;
    |  float r15 = r10-r14;
    |  float r17 = r15-r16;
    |  float r19 = r17*r18;
    |  float r21 = r20.x;
    |  float r22 = r19+r21;
    |  float r23 = r20.y;
    |  vec2 r24 = vec2(r1,r2);
    |  float r25 = length(r24);
    |  float r26 = r23-r25;
    |  vec4 r27 = vec4(r22,r26,r3,r4);
    |  float r28 = r27[0];
    |  float r29 = r27[1];
    |  float r30 = r27[2];
    |  float r31 = r27[3];
    |  vec3 r34 = vec3(r28,r29,r30);
    |  float r35 = cos(r32);
    |  vec3 r36 = vec3(r35);
    |  vec3 r37 = r34*r36;
    |  float r38 = r33.y;
    |  float r39 = r34.z;
    |  float r40 = r38*r39;
    |  float r41 = r33.z;
    |  float r42 = r34.y;
    |  float r43 = r41*r42;
    |  float r44 = r40-r43;
    |  float r45 = r33.z;
    |  float r46 = r34.x;
    |  float r47 = r45*r46;
    |  float r48 = r33.x;
    |  float r49 = r34.z;
    |  float r50 = r48*r49;
    |  float r51 = r47-r50;
    |  float r52 = r33.x;
    |  float r53 = r34.y;
    |  float r54 = r52*r53;
    |  float r55 = r33.y;
    |  float r56 = r34.x;
    |  float r57 = r55*r56;
    |  float r58 = r54-r57;
    |  vec3 r59 = vec3(r44,r51,r58);
    |  float r60 = sin(r32);
    |  vec3 r61 = vec3(r60);
    |  vec3 r62 = r59*r61;
    |  vec3 r63 = r37-r62;
    |  float r64 = cos(r32);
    |  float r65 = r16-r64;
    |  vec3 r66 = vec3(r65);
    |  vec3 r67 = r34*r66;
    |  float r68 = dot(r33,r67);
    |  vec3 r69 = vec3(r68);
    |  vec3 r70 = r33*r69;
    |  vec3 r71 = r63+r70;
    |  float r72 = r71.x;
    |  float r73 = r71.y;
    |  float r74 = r71.z;
    |  vec4 r75 = vec4(r72,r73,r74,r31);
    |  float r76 = r75[0];
    |  float r77 = r75[1];
    |  float r78 = r75[2];
    |  float r79 = r75[3];
    |  vec2 r80 = vec2(r76,r77);
    |  float r81 = atan(r80.y,r80.x);
    |  float r82 = r81/r7;
    |  float r83 = r82+r9;
    |  float r84 = r83/r11;
    |  float r85 = floor(r84);
    |  float r86 = r11*r85;
    |  float r87 = r83-r86;
    |  float r88 = r87-r16;
    |  float r90 = r88*r89;
    |  float r92 = r91.x;
    |  float r93 = r90+r92;
    |  float r94 = r91.y;
    |  vec2 r95 = vec2(r76,r77);
    |  float r96 = length(r95);
    |  float r97 = r94-r96;
    |  vec4 r98 = vec4(r93,r97,r78,r79);
    |  float r99 = r98[0];
    |  float r100 = r98[1];
    |  float r101 = r98[2];
    |  float r102 = r98[3];
    |  vec3 r104 = vec3(r99,r100,r101);
    |  float r105 = cos(r32);
    |  vec3 r106 = vec3(r105);
    |  vec3 r107 = r104*r106;
    |  float r108 = r103.y;
    |  float r109 = r104.z;
    |  float r110 = r108*r109;
    |  float r111 = r103.z;
    |  float r112 = r104.y;
    |  float r113 = r111*r112;
    |  float r114 = r110-r113;
    |  float r115 = r103.z;
    |  float r116 = r104.x;
    |  float r117 = r115*r116;
    |  float r118 = r103.x;
    |  float r119 = r104.z;
    |  float r120 = r118*r119;
    |  float r121 = r117-r120;
    |  float r122 = r103.x;
    |  float r123 = r104.y;
    |  float r124 = r122*r123;
    |  float r125 = r103.y;
    |  float r126 = r104.x;
    |  float r127 = r125*r126;
    |  float r128 = r124-r127;
    |  vec3 r129 = vec3(r114,r121,r128);
    |  float r130 = sin(r32);
    |  vec3 r131 = vec3(r130);
    |  vec3 r132 = r129*r131;
    |  vec3 r133 = r107-r132;
    |  float r134 = cos(r32);
    |  float r135 = r16-r134;
    |  vec3 r136 = vec3(r135);
    |  vec3 r137 = r104*r136;
    |  float r138 = dot(r103,r137);
    |  vec3 r139 = vec3(r138);
    |  vec3 r140 = r103*r139;
    |  vec3 r141 = r133+r140;
    |  float r142 = r141.x;
    |  float r143 = r141.y;
    |  float r144 = r141.z;
    |  vec4 r145 = vec4(r142,r143,r144,r102);
    |  float r146 = r145.z;
    |  float r147 = abs(r146);
    |  float r149 = r147-r148;
    |  float r150 = r145.x;
    |  float r151 = r145.y;
    |  float r153 = r145.w;
    |  vec4 r154 = vec4(r150,r151,r152,r153);
    |  float r155 = r154[0];
    |  float r156 = r154[1];
    |  float r157 = r154[2];
    |  float r158 = r154[3];
    |  float r159 = abs(r155);
    |  float r161 = -(r160);
    |  vec2 r162 = vec2(r159,r156);
    |  float r163 = cos(r161);
    |  float r164 = sin(r161);
    |  vec2 r165 = vec2(r163,r164);
    |  float r166 = r162.x;
    |  float r167 = r165.x;
    |  float r168 = r166*r167;
    |  float r169 = r162.y;
    |  float r170 = r165.y;
    |  float r171 = r169*r170;
    |  float r172 = r168-r171;
    |  float r173 = r162.y;
    |  float r174 = r165.x;
    |  float r175 = r173*r174;
    |  float r176 = r162.x;
    |  float r177 = r165.y;
    |  float r178 = r176*r177;
    |  float r179 = r175+r178;
    |  vec2 r180 = vec2(r172,r179);
    |  float r181 = r180.x;
    |  float r182 = r180.y;
    |  float r183 = r181+r16;
    |  float r184 = r183/r11;
    |  float r185 = floor(r184);
    |  float r186 = r11*r185;
    |  float r187 = r183-r186;
    |  float r188 = r187-r16;
    |  vec2 r189 = vec2(r188,r182);
    |  vec2 r190 = abs(r189);
    |  vec2 r192 = r190-r191;
    |  float r193 = r192[0];
    |  float r194 = r192[1];
    |  float r195 = max(r193,r194);
    |  float r196 = min(r195,r152);
    |  vec2 r197 = vec2(r152);
    |  vec2 r198 = max(r192,r197);
    |  float r199 = length(r198);
    |  float r200 = r196+r199;
    |  float r201 = r154[0];
    |  float r202 = r154[1];
    |  float r203 = r154[2];
    |  float r204 = r154[3];
    |  vec2 r205 = vec2(r201,r202);
    |  vec2 r206 = abs(r205);
    |  vec2 r208 = r206-r207;
    |  float r209 = r208[0];
    |  float r210 = r208[1];
    |  float r211 = max(r209,r210);
    |  float r212 = min(r211,r152);
    |  vec2 r213 = vec2(r152);
    |  vec2 r214 = max(r208,r213);
    |  float r215 = length(r214);
    |  float r216 = r212+r215;
    |  float r217 = max(r200,r216);
    |  vec2 r218 = vec2(r149,r217);
    |  vec2 r219 = vec2(r152);
    |  vec2 r220 = max(r218,r219);
    |  float r221 = length(r220);
    |  float r222 = max(r149,r217);
    |  float r223 = min(r222,r152);
    |  float r224 = r221+r223;
    |  float r226 = r224/r225;
    |  return r226;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r7 = 3.141592653589793;
    |  float r9 = 1.5;
    |  float r11 = 2.0;
    |  float r16 = 1.0;
    |  float r18 = 49.6;
    |  vec2 r20 = vec2(0.0,21.000000000000004);
    |  float r32 = 1.5707963267948966;
    |  vec3 r33 = vec3(0.0,1.0,0.0);
    |  float r89 = 9.999999999999998;
    |  vec2 r91 = vec2(0.0,10.500000000000004);
    |  vec3 r103 = vec3(1.0,0.0,0.0);
    |  float r148 = 0.0;
    |  float r151 = 1.0471975511965976;
    |  float r181 = 0.8;
    |  float r182 = 0.5;
    |  vec3 r183 = vec3(r181,r181,r182);
    |  float r184 = 2.2;
    |  vec3 r185 = vec3(r184);
    |  vec3 r186 = pow(r183,r185);
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec2 r5 = vec2(r1,r2);
    |  float r6 = atan(r5.y,r5.x);
    |  float r8 = r6/r7;
    |  float r10 = r8+r9;
    |  float r12 = r10/r11;
    |  float r13 = floor(r12);
    |  float r14 = r11*r13;
    |  float r15 = r10-r14;
    |  float r17 = r15-r16;
    |  float r19 = r17*r18;
    |  float r21 = r20.x;
    |  float r22 = r19+r21;
    |  float r23 = r20.y;
    |  vec2 r24 = vec2(r1,r2);
    |  float r25 = length(r24);
    |  float r26 = r23-r25;
    |  vec4 r27 = vec4(r22,r26,r3,r4);
    |  float r28 = r27[0];
    |  float r29 = r27[1];
    |  float r30 = r27[2];
    |  float r31 = r27[3];
    |  vec3 r34 = vec3(r28,r29,r30);
    |  float r35 = cos(r32);
    |  vec3 r36 = vec3(r35);
    |  vec3 r37 = r34*r36;
    |  float r38 = r33.y;
    |  float r39 = r34.z;
    |  float r40 = r38*r39;
    |  float r41 = r33.z;
    |  float r42 = r34.y;
    |  float r43 = r41*r42;
    |  float r44 = r40-r43;
    |  float r45 = r33.z;
    |  float r46 = r34.x;
    |  float r47 = r45*r46;
    |  float r48 = r33.x;
    |  float r49 = r34.z;
    |  float r50 = r48*r49;
    |  float r51 = r47-r50;
    |  float r52 = r33.x;
    |  float r53 = r34.y;
    |  float r54 = r52*r53;
    |  float r55 = r33.y;
    |  float r56 = r34.x;
    |  float r57 = r55*r56;
    |  float r58 = r54-r57;
    |  vec3 r59 = vec3(r44,r51,r58);
    |  float r60 = sin(r32);
    |  vec3 r61 = vec3(r60);
    |  vec3 r62 = r59*r61;
    |  vec3 r63 = r37-r62;
    |  float r64 = cos(r32);
    |  float r65 = r16-r64;
    |  vec3 r66 = vec3(r65);
    |  vec3 r67 = r34*r66;
    |  float r68 = dot(r33,r67);
    |  vec3 r69 = vec3(r68);
    |  vec3 r70 = r33*r69;
    |  vec3 r71 = r63+r70;
    |  float r72 = r71.x;
    |  float r73 = r71.y;
    |  float r74 = r71.z;
    |  vec4 r75 = vec4(r72,r73,r74,r31);
    |  float r76 = r75[0];
    |  float r77 = r75[1];
    |  float r78 = r75[2];
    |  float r79 = r75[3];
    |  vec2 r80 = vec2(r76,r77);
    |  float r81 = atan(r80.y,r80.x);
    |  float r82 = r81/r7;
    |  float r83 = r82+r9;
    |  float r84 = r83/r11;
    |  float r85 = floor(r84);
    |  float r86 = r11*r85;
    |  float r87 = r83-r86;
    |  float r88 = r87-r16;
    |  float r90 = r88*r89;
    |  float r92 = r91.x;
    |  float r93 = r90+r92;
    |  float r94 = r91.y;
    |  vec2 r95 = vec2(r76,r77);
    |  float r96 = length(r95);
    |  float r97 = r94-r96;
    |  vec4 r98 = vec4(r93,r97,r78,r79);
    |  float r99 = r98[0];
    |  float r100 = r98[1];
    |  float r101 = r98[2];
    |  float r102 = r98[3];
    |  vec3 r104 = vec3(r99,r100,r101);
    |  float r105 = cos(r32);
    |  vec3 r106 = vec3(r105);
    |  vec3 r107 = r104*r106;
    |  float r108 = r103.y;
    |  float r109 = r104.z;
    |  float r110 = r108*r109;
    |  float r111 = r103.z;
    |  float r112 = r104.y;
    |  float r113 = r111*r112;
    |  float r114 = r110-r113;
    |  float r115 = r103.z;
    |  float r116 = r104.x;
    |  float r117 = r115*r116;
    |  float r118 = r103.x;
    |  float r119 = r104.z;
    |  float r120 = r118*r119;
    |  float r121 = r117-r120;
    |  float r122 = r103.x;
    |  float r123 = r104.y;
    |  float r124 = r122*r123;
    |  float r125 = r103.y;
    |  float r126 = r104.x;
    |  float r127 = r125*r126;
    |  float r128 = r124-r127;
    |  vec3 r129 = vec3(r114,r121,r128);
    |  float r130 = sin(r32);
    |  vec3 r131 = vec3(r130);
    |  vec3 r132 = r129*r131;
    |  vec3 r133 = r107-r132;
    |  float r134 = cos(r32);
    |  float r135 = r16-r134;
    |  vec3 r136 = vec3(r135);
    |  vec3 r137 = r104*r136;
    |  float r138 = dot(r103,r137);
    |  vec3 r139 = vec3(r138);
    |  vec3 r140 = r103*r139;
    |  vec3 r141 = r133+r140;
    |  float r142 = r141.x;
    |  float r143 = r141.y;
    |  float r144 = r141.z;
    |  vec4 r145 = vec4(r142,r143,r144,r102);
    |  float r146 = r145.x;
    |  float r147 = r145.y;
    |  float r149 = r145.w;
    |  float r150 = abs(r146);
    |  float r152 = -(r151);
    |  vec2 r153 = vec2(r150,r147);
    |  float r154 = cos(r152);
    |  float r155 = sin(r152);
    |  vec2 r156 = vec2(r154,r155);
    |  float r157 = r153.x;
    |  float r158 = r156.x;
    |  float r159 = r157*r158;
    |  float r160 = r153.y;
    |  float r161 = r156.y;
    |  float r162 = r160*r161;
    |  float r163 = r159-r162;
    |  float r164 = r153.y;
    |  float r165 = r156.x;
    |  float r166 = r164*r165;
    |  float r167 = r153.x;
    |  float r168 = r156.y;
    |  float r169 = r167*r168;
    |  float r170 = r166+r169;
    |  vec2 r171 = vec2(r163,r170);
    |  float r172 = r171.x;
    |  float r173 = r171.y;
    |  float r174 = r172+r16;
    |  float r175 = r174/r11;
    |  float r176 = floor(r175);
    |  float r177 = r11*r176;
    |  float r178 = r174-r177;
    |  float r179 = r178-r16;
    |  vec4 r180 = vec4(r179,r173,r148,r149);
    |  return r186;
    |}
    |const vec3 bbox_min = vec3(-32.00000000000001,-32.00000000000001,-11.000000000000009);
    |const vec3 bbox_max = vec3(32.00000000000001,32.00000000000001,11.000000000000009);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
