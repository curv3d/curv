{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-8.250000000000002,-8.25,-6.750000000000001],[8.25,8.25,19.75]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = 3.141592653589793;
    |  vec3 r6 = vec3(0.0,1.0,0.0);
    |  float r37 = 1.0;
    |  vec3 r51 = vec3(0.0,0.0,-6.0);
    |  vec3 r63 = vec3(0.0,0.0,-8.0);
    |  float r75 = 5.0;
    |  vec3 r78 = vec3(0.0,0.0,-4.5);
    |  float r91 = 0.0;
    |  float r92 = 8.0;
    |  float r95 = 6.5;
    |  vec3 r127 = vec3(0.0,0.0,6.0);
    |  vec3 r139 = vec3(6.0,6.0,5.0);
    |  float r151 = 4.0;
    |  float r152 = 1.0/0.0;
    |  float r154 = 0.5;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r7 = vec3(r1,r2,r3);
    |  float r8 = cos(r5);
    |  vec3 r9 = vec3(r8);
    |  vec3 r10 = r7*r9;
    |  float r11 = r6.y;
    |  float r12 = r7.z;
    |  float r13 = r11*r12;
    |  float r14 = r6.z;
    |  float r15 = r7.y;
    |  float r16 = r14*r15;
    |  float r17 = r13-r16;
    |  float r18 = r6.z;
    |  float r19 = r7.x;
    |  float r20 = r18*r19;
    |  float r21 = r6.x;
    |  float r22 = r7.z;
    |  float r23 = r21*r22;
    |  float r24 = r20-r23;
    |  float r25 = r6.x;
    |  float r26 = r7.y;
    |  float r27 = r25*r26;
    |  float r28 = r6.y;
    |  float r29 = r7.x;
    |  float r30 = r28*r29;
    |  float r31 = r27-r30;
    |  vec3 r32 = vec3(r17,r24,r31);
    |  float r33 = sin(r5);
    |  vec3 r34 = vec3(r33);
    |  vec3 r35 = r32*r34;
    |  vec3 r36 = r10-r35;
    |  float r38 = cos(r5);
    |  float r39 = r37-r38;
    |  vec3 r40 = vec3(r39);
    |  vec3 r41 = r7*r40;
    |  float r42 = dot(r6,r41);
    |  vec3 r43 = vec3(r42);
    |  vec3 r44 = r6*r43;
    |  vec3 r45 = r36+r44;
    |  float r46 = r45.x;
    |  float r47 = r45.y;
    |  float r48 = r45.z;
    |  vec4 r49 = vec4(r46,r47,r48,r4);
    |  float r50 = r49.x;
    |  float r52 = r51.x;
    |  float r53 = r50-r52;
    |  float r54 = r49.y;
    |  float r55 = r51.y;
    |  float r56 = r54-r55;
    |  float r57 = r49.z;
    |  float r58 = r51.z;
    |  float r59 = r57-r58;
    |  float r60 = r49.w;
    |  vec4 r61 = vec4(r53,r56,r59,r60);
    |  float r62 = r61.x;
    |  float r64 = r63.x;
    |  float r65 = r62-r64;
    |  float r66 = r61.y;
    |  float r67 = r63.y;
    |  float r68 = r66-r67;
    |  float r69 = r61.z;
    |  float r70 = r63.z;
    |  float r71 = r69-r70;
    |  float r72 = r61.w;
    |  vec3 r73 = vec3(r65,r68,r71);
    |  float r74 = length(r73);
    |  float r76 = r74-r75;
    |  float r77 = r61.x;
    |  float r79 = r78.x;
    |  float r80 = r77-r79;
    |  float r81 = r61.y;
    |  float r82 = r78.y;
    |  float r83 = r81-r82;
    |  float r84 = r61.z;
    |  float r85 = r78.z;
    |  float r86 = r84-r85;
    |  float r87 = r61.w;
    |  vec2 r88 = vec2(r80,r83);
    |  float r89 = length(r88);
    |  vec2 r90 = vec2(r89,r86);
    |  vec2 r93 = vec2(r91,r92);
    |  vec2 r94 = r90-r93;
    |  vec2 r96 = vec2(r92,r95);
    |  float r97 = length(r96);
    |  vec2 r98 = vec2(r97);
    |  vec2 r99 = r96/r98;
    |  float r100 = dot(r94,r99);
    |  float r101 = r99.y;
    |  float r102 = r99.x;
    |  float r103 = -(r102);
    |  vec2 r104 = vec2(r101,r103);
    |  float r105 = dot(r94,r104);
    |  float r106 = r90.y;
    |  float r107 = -(r106);
    |  float r108 = max(r100,r107);
    |  float r109=r108;
    |  float r110 = r90.y;
    |  bool r111 = r110>r92;
    |  bool r112 = r105<r91;
    |  bool r113 =(r111 && r112);
    |  if (r113) {
    |  float r114 = length(r94);
    |  float r115 = max(r109,r114);
    |  r109=r115;
    |  }
    |  float r116 = r90.x;
    |  bool r117 = r116>r95;
    |  vec2 r118 = vec2(r92,r95);
    |  float r119 = length(r118);
    |  bool r120 = r105>r119;
    |  bool r121 =(r117 && r120);
    |  if (r121) {
    |  vec2 r122 = vec2(r95,r91);
    |  vec2 r123 = r90-r122;
    |  float r124 = length(r123);
    |  float r125 = max(r109,r124);
    |  r109=r125;
    |  }
    |  float r126 = r61.x;
    |  float r128 = r127.x;
    |  float r129 = r126-r128;
    |  float r130 = r61.y;
    |  float r131 = r127.y;
    |  float r132 = r130-r131;
    |  float r133 = r61.z;
    |  float r134 = r127.z;
    |  float r135 = r133-r134;
    |  float r136 = r61.w;
    |  vec3 r137 = vec3(r129,r132,r135);
    |  vec3 r138 = abs(r137);
    |  vec3 r140 = r138-r139;
    |  float r141 = r140[0];
    |  float r142 = r140[1];
    |  float r143 = max(r141,r142);
    |  float r144 = r140[2];
    |  float r145 = max(r143,r144);
    |  float r146 = min(r145,r91);
    |  vec3 r147 = vec3(r91);
    |  vec3 r148 = max(r140,r147);
    |  float r149 = length(r148);
    |  float r150 = r146+r149;
    |  bool r153 =(r109 == r152);
    |  float r155 = r150-r109;
    |  float r156 = r154*r155;
    |  float r157 = r156/r151;
    |  float r158 = r154+r157;
    |  float r159 = max(r158,r91);
    |  float r160 = min(r159,r37);
    |  float r161 = r37-r160;
    |  float r162 = r150*r161;
    |  float r163 = r109*r160;
    |  float r164 = r162+r163;
    |  float r165 = r151*r160;
    |  float r166 = r37-r160;
    |  float r167 = r165*r166;
    |  float r168 = r164-r167;
    |  float r169 =(r153 ? r150 : r168);
    |  bool r170 =(r76 == r152);
    |  float r171 = r169-r76;
    |  float r172 = r154*r171;
    |  float r173 = r172/r37;
    |  float r174 = r154+r173;
    |  float r175 = max(r174,r91);
    |  float r176 = min(r175,r37);
    |  float r177 = r37-r176;
    |  float r178 = r169*r177;
    |  float r179 = r76*r176;
    |  float r180 = r178+r179;
    |  float r181 = r37*r176;
    |  float r182 = r37-r176;
    |  float r183 = r181*r182;
    |  float r184 = r180-r183;
    |  float r185 =(r170 ? r169 : r184);
    |  float r186 = r185-r154;
    |  return r186;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = 3.141592653589793;
    |  vec3 r6 = vec3(0.0,1.0,0.0);
    |  float r37 = 1.0;
    |  float r54 = 2.0;
    |  float r55 = 3.0;
    |  float r59 = 0.25;
    |  float r62 = 0.0;
    |  float r63 = 4.0;
    |  float r71 = 5.0;
    |  float r74 = 0.2;
    |  float r79 = 0.1;
    |  float r82 = 15.0;
    |  float r123 = 11.0;
    |  float r126 = 7.0;
    |  float r132 = 14.0;
    |  float r136 = 6.0;
    |  float r143 = 12.0;
    |  float r146 = 9.0;
    |  float r412 = 0.92;
    |  float r413 = 0.77;
    |  float r414 = 0.56;
    |  vec3 r415 = vec3(r412,r413,r414);
    |  float r416 = 0.8;
    |  float r417 = 0.66;
    |  float r418 = 0.49;
    |  vec3 r419 = vec3(r416,r417,r418);
    |  float r420 = 0.85;
    |  vec3 r421 = vec3(r420);
    |  vec3 r422 = r419*r421;
    |  float r429 = 2.2;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r7 = vec3(r1,r2,r3);
    |  float r8 = cos(r5);
    |  vec3 r9 = vec3(r8);
    |  vec3 r10 = r7*r9;
    |  float r11 = r6.y;
    |  float r12 = r7.z;
    |  float r13 = r11*r12;
    |  float r14 = r6.z;
    |  float r15 = r7.y;
    |  float r16 = r14*r15;
    |  float r17 = r13-r16;
    |  float r18 = r6.z;
    |  float r19 = r7.x;
    |  float r20 = r18*r19;
    |  float r21 = r6.x;
    |  float r22 = r7.z;
    |  float r23 = r21*r22;
    |  float r24 = r20-r23;
    |  float r25 = r6.x;
    |  float r26 = r7.y;
    |  float r27 = r25*r26;
    |  float r28 = r6.y;
    |  float r29 = r7.x;
    |  float r30 = r28*r29;
    |  float r31 = r27-r30;
    |  vec3 r32 = vec3(r17,r24,r31);
    |  float r33 = sin(r5);
    |  vec3 r34 = vec3(r33);
    |  vec3 r35 = r32*r34;
    |  vec3 r36 = r10-r35;
    |  float r38 = cos(r5);
    |  float r39 = r37-r38;
    |  vec3 r40 = vec3(r39);
    |  vec3 r41 = r7*r40;
    |  float r42 = dot(r6,r41);
    |  vec3 r43 = vec3(r42);
    |  vec3 r44 = r6*r43;
    |  vec3 r45 = r36+r44;
    |  float r46 = r45.x;
    |  float r47 = r45.y;
    |  float r48 = r45.z;
    |  vec4 r49 = vec4(r46,r47,r48,r4);
    |  float r50 = r49[0];
    |  float r51 = r49[1];
    |  float r52 = r49[2];
    |  float r53 = r49[3];
    |  float r56 = r52/r55;
    |  float r57 = r54+r56;
    |  float r58 = sin(r57);
    |  float r60 = r58*r59;
    |  float r61 = r50+r60;
    |  float r64 = r52/r63;
    |  float r65 = r62+r64;
    |  float r66 = cos(r65);
    |  float r67 = r66*r59;
    |  float r68 = r51+r67;
    |  vec2 r69 = vec2(r61,r68);
    |  float r70 = length(r69);
    |  float r72 = r70*r71;
    |  float r73 = sin(r52);
    |  float r75 = r73*r74;
    |  float r76 = r72+r75;
    |  float r77 = r52/r71;
    |  float r78 = sin(r77);
    |  float r80 = r78*r79;
    |  float r81 = r76+r80;
    |  float r83 = r51/r82;
    |  float r84 = r50/r82;
    |  float r85 = floor(r81);
    |  float r86 = floor(r83);
    |  float r87 = floor(r84);
    |  float r88 = r81-r85;
    |  float r89 = r88-r62;
    |  float r90 = r37-r62;
    |  float r91 = r89/r90;
    |  float r92 = max(r91,r62);
    |  float r93 = min(r92,r37);
    |  float r94 = r93*r93;
    |  float r95 = r54*r93;
    |  float r96 = r55-r95;
    |  float r97 = r94*r96;
    |  float r98 = r83-r86;
    |  float r99 = r98-r62;
    |  float r100 = r37-r62;
    |  float r101 = r99/r100;
    |  float r102 = max(r101,r62);
    |  float r103 = min(r102,r37);
    |  float r104 = r103*r103;
    |  float r105 = r54*r103;
    |  float r106 = r55-r105;
    |  float r107 = r104*r106;
    |  float r108 = r84-r87;
    |  float r109 = r108-r62;
    |  float r110 = r37-r62;
    |  float r111 = r109/r110;
    |  float r112 = max(r111,r62);
    |  float r113 = min(r112,r37);
    |  float r114 = r113*r113;
    |  float r115 = r54*r113;
    |  float r116 = r55-r115;
    |  float r117 = r114*r116;
    |  vec3 r118 = vec3(r85,r86,r87);
    |  uvec3 r119 = floatBitsToUint(r118);
    |  uint r120 = r119[0];
    |  uint r121 = r119[1];
    |  uint r122 = r119[2];
    |  uint r124 = r120 >> int(r123);
    |  uint r125 = r120 + r124;
    |  r120=r125;
    |  uint r127 = r120 << int(r126);
    |  uint r128 = r120^r127;
    |  r120=r128;
    |  uint r129 = r120 + r121;
    |  r120=r129;
    |  uint r130 = r120 << int(r55);
    |  uint r131 = r120^r130;
    |  r120=r131;
    |  uint r133 = r120 >> int(r132);
    |  uint r134 = r122^r133;
    |  uint r135 = r120 + r134;
    |  r120=r135;
    |  uint r137 = r120 << int(r136);
    |  uint r138 = r120^r137;
    |  r120=r138;
    |  uint r139 = r120 >> int(r82);
    |  uint r140 = r120 + r139;
    |  r120=r140;
    |  uint r141 = r120 << int(r71);
    |  uint r142 = r120^r141;
    |  r120=r142;
    |  uint r144 = r120 >> int(r143);
    |  uint r145 = r120 + r144;
    |  r120=r145;
    |  uint r147 = r120 << int(r146);
    |  uint r148 = r120^r147;
    |  r120=r148;
    |  uint r149 = 8388607u;
    |  uint r150 = r120&r149;
    |;
    |  uint r151 = 1065353216u;
    |  uint r152 = r150|r151;
    |;
    |  r120=r152;
    |  float r153 = uintBitsToFloat(r120);
    |  float r154 = r153-r37;
    |  float r155 = r85+r37;
    |  vec3 r156 = vec3(r155,r86,r87);
    |  uvec3 r157 = floatBitsToUint(r156);
    |  uint r158 = r157[0];
    |  uint r159 = r157[1];
    |  uint r160 = r157[2];
    |  uint r161 = r158 >> int(r123);
    |  uint r162 = r158 + r161;
    |  r158=r162;
    |  uint r163 = r158 << int(r126);
    |  uint r164 = r158^r163;
    |  r158=r164;
    |  uint r165 = r158 + r159;
    |  r158=r165;
    |  uint r166 = r158 << int(r55);
    |  uint r167 = r158^r166;
    |  r158=r167;
    |  uint r168 = r158 >> int(r132);
    |  uint r169 = r160^r168;
    |  uint r170 = r158 + r169;
    |  r158=r170;
    |  uint r171 = r158 << int(r136);
    |  uint r172 = r158^r171;
    |  r158=r172;
    |  uint r173 = r158 >> int(r82);
    |  uint r174 = r158 + r173;
    |  r158=r174;
    |  uint r175 = r158 << int(r71);
    |  uint r176 = r158^r175;
    |  r158=r176;
    |  uint r177 = r158 >> int(r143);
    |  uint r178 = r158 + r177;
    |  r158=r178;
    |  uint r179 = r158 << int(r146);
    |  uint r180 = r158^r179;
    |  r158=r180;
    |  uint r181 = 8388607u;
    |  uint r182 = r158&r181;
    |;
    |  uint r183 = 1065353216u;
    |  uint r184 = r182|r183;
    |;
    |  r158=r184;
    |  float r185 = uintBitsToFloat(r158);
    |  float r186 = r185-r37;
    |  float r187 = r85+r37;
    |  float r188 = r86+r37;
    |  vec3 r189 = vec3(r187,r188,r87);
    |  uvec3 r190 = floatBitsToUint(r189);
    |  uint r191 = r190[0];
    |  uint r192 = r190[1];
    |  uint r193 = r190[2];
    |  uint r194 = r191 >> int(r123);
    |  uint r195 = r191 + r194;
    |  r191=r195;
    |  uint r196 = r191 << int(r126);
    |  uint r197 = r191^r196;
    |  r191=r197;
    |  uint r198 = r191 + r192;
    |  r191=r198;
    |  uint r199 = r191 << int(r55);
    |  uint r200 = r191^r199;
    |  r191=r200;
    |  uint r201 = r191 >> int(r132);
    |  uint r202 = r193^r201;
    |  uint r203 = r191 + r202;
    |  r191=r203;
    |  uint r204 = r191 << int(r136);
    |  uint r205 = r191^r204;
    |  r191=r205;
    |  uint r206 = r191 >> int(r82);
    |  uint r207 = r191 + r206;
    |  r191=r207;
    |  uint r208 = r191 << int(r71);
    |  uint r209 = r191^r208;
    |  r191=r209;
    |  uint r210 = r191 >> int(r143);
    |  uint r211 = r191 + r210;
    |  r191=r211;
    |  uint r212 = r191 << int(r146);
    |  uint r213 = r191^r212;
    |  r191=r213;
    |  uint r214 = 8388607u;
    |  uint r215 = r191&r214;
    |;
    |  uint r216 = 1065353216u;
    |  uint r217 = r215|r216;
    |;
    |  r191=r217;
    |  float r218 = uintBitsToFloat(r191);
    |  float r219 = r218-r37;
    |  float r220 = r86+r37;
    |  vec3 r221 = vec3(r85,r220,r87);
    |  uvec3 r222 = floatBitsToUint(r221);
    |  uint r223 = r222[0];
    |  uint r224 = r222[1];
    |  uint r225 = r222[2];
    |  uint r226 = r223 >> int(r123);
    |  uint r227 = r223 + r226;
    |  r223=r227;
    |  uint r228 = r223 << int(r126);
    |  uint r229 = r223^r228;
    |  r223=r229;
    |  uint r230 = r223 + r224;
    |  r223=r230;
    |  uint r231 = r223 << int(r55);
    |  uint r232 = r223^r231;
    |  r223=r232;
    |  uint r233 = r223 >> int(r132);
    |  uint r234 = r225^r233;
    |  uint r235 = r223 + r234;
    |  r223=r235;
    |  uint r236 = r223 << int(r136);
    |  uint r237 = r223^r236;
    |  r223=r237;
    |  uint r238 = r223 >> int(r82);
    |  uint r239 = r223 + r238;
    |  r223=r239;
    |  uint r240 = r223 << int(r71);
    |  uint r241 = r223^r240;
    |  r223=r241;
    |  uint r242 = r223 >> int(r143);
    |  uint r243 = r223 + r242;
    |  r223=r243;
    |  uint r244 = r223 << int(r146);
    |  uint r245 = r223^r244;
    |  r223=r245;
    |  uint r246 = 8388607u;
    |  uint r247 = r223&r246;
    |;
    |  uint r248 = 1065353216u;
    |  uint r249 = r247|r248;
    |;
    |  r223=r249;
    |  float r250 = uintBitsToFloat(r223);
    |  float r251 = r250-r37;
    |  float r252 = r87+r37;
    |  vec3 r253 = vec3(r85,r86,r252);
    |  uvec3 r254 = floatBitsToUint(r253);
    |  uint r255 = r254[0];
    |  uint r256 = r254[1];
    |  uint r257 = r254[2];
    |  uint r258 = r255 >> int(r123);
    |  uint r259 = r255 + r258;
    |  r255=r259;
    |  uint r260 = r255 << int(r126);
    |  uint r261 = r255^r260;
    |  r255=r261;
    |  uint r262 = r255 + r256;
    |  r255=r262;
    |  uint r263 = r255 << int(r55);
    |  uint r264 = r255^r263;
    |  r255=r264;
    |  uint r265 = r255 >> int(r132);
    |  uint r266 = r257^r265;
    |  uint r267 = r255 + r266;
    |  r255=r267;
    |  uint r268 = r255 << int(r136);
    |  uint r269 = r255^r268;
    |  r255=r269;
    |  uint r270 = r255 >> int(r82);
    |  uint r271 = r255 + r270;
    |  r255=r271;
    |  uint r272 = r255 << int(r71);
    |  uint r273 = r255^r272;
    |  r255=r273;
    |  uint r274 = r255 >> int(r143);
    |  uint r275 = r255 + r274;
    |  r255=r275;
    |  uint r276 = r255 << int(r146);
    |  uint r277 = r255^r276;
    |  r255=r277;
    |  uint r278 = 8388607u;
    |  uint r279 = r255&r278;
    |;
    |  uint r280 = 1065353216u;
    |  uint r281 = r279|r280;
    |;
    |  r255=r281;
    |  float r282 = uintBitsToFloat(r255);
    |  float r283 = r282-r37;
    |  float r284 = r85+r37;
    |  float r285 = r87+r37;
    |  vec3 r286 = vec3(r284,r86,r285);
    |  uvec3 r287 = floatBitsToUint(r286);
    |  uint r288 = r287[0];
    |  uint r289 = r287[1];
    |  uint r290 = r287[2];
    |  uint r291 = r288 >> int(r123);
    |  uint r292 = r288 + r291;
    |  r288=r292;
    |  uint r293 = r288 << int(r126);
    |  uint r294 = r288^r293;
    |  r288=r294;
    |  uint r295 = r288 + r289;
    |  r288=r295;
    |  uint r296 = r288 << int(r55);
    |  uint r297 = r288^r296;
    |  r288=r297;
    |  uint r298 = r288 >> int(r132);
    |  uint r299 = r290^r298;
    |  uint r300 = r288 + r299;
    |  r288=r300;
    |  uint r301 = r288 << int(r136);
    |  uint r302 = r288^r301;
    |  r288=r302;
    |  uint r303 = r288 >> int(r82);
    |  uint r304 = r288 + r303;
    |  r288=r304;
    |  uint r305 = r288 << int(r71);
    |  uint r306 = r288^r305;
    |  r288=r306;
    |  uint r307 = r288 >> int(r143);
    |  uint r308 = r288 + r307;
    |  r288=r308;
    |  uint r309 = r288 << int(r146);
    |  uint r310 = r288^r309;
    |  r288=r310;
    |  uint r311 = 8388607u;
    |  uint r312 = r288&r311;
    |;
    |  uint r313 = 1065353216u;
    |  uint r314 = r312|r313;
    |;
    |  r288=r314;
    |  float r315 = uintBitsToFloat(r288);
    |  float r316 = r315-r37;
    |  float r317 = r85+r37;
    |  float r318 = r86+r37;
    |  float r319 = r87+r37;
    |  vec3 r320 = vec3(r317,r318,r319);
    |  uvec3 r321 = floatBitsToUint(r320);
    |  uint r322 = r321[0];
    |  uint r323 = r321[1];
    |  uint r324 = r321[2];
    |  uint r325 = r322 >> int(r123);
    |  uint r326 = r322 + r325;
    |  r322=r326;
    |  uint r327 = r322 << int(r126);
    |  uint r328 = r322^r327;
    |  r322=r328;
    |  uint r329 = r322 + r323;
    |  r322=r329;
    |  uint r330 = r322 << int(r55);
    |  uint r331 = r322^r330;
    |  r322=r331;
    |  uint r332 = r322 >> int(r132);
    |  uint r333 = r324^r332;
    |  uint r334 = r322 + r333;
    |  r322=r334;
    |  uint r335 = r322 << int(r136);
    |  uint r336 = r322^r335;
    |  r322=r336;
    |  uint r337 = r322 >> int(r82);
    |  uint r338 = r322 + r337;
    |  r322=r338;
    |  uint r339 = r322 << int(r71);
    |  uint r340 = r322^r339;
    |  r322=r340;
    |  uint r341 = r322 >> int(r143);
    |  uint r342 = r322 + r341;
    |  r322=r342;
    |  uint r343 = r322 << int(r146);
    |  uint r344 = r322^r343;
    |  r322=r344;
    |  uint r345 = 8388607u;
    |  uint r346 = r322&r345;
    |;
    |  uint r347 = 1065353216u;
    |  uint r348 = r346|r347;
    |;
    |  r322=r348;
    |  float r349 = uintBitsToFloat(r322);
    |  float r350 = r349-r37;
    |  float r351 = r86+r37;
    |  float r352 = r87+r37;
    |  vec3 r353 = vec3(r85,r351,r352);
    |  uvec3 r354 = floatBitsToUint(r353);
    |  uint r355 = r354[0];
    |  uint r356 = r354[1];
    |  uint r357 = r354[2];
    |  uint r358 = r355 >> int(r123);
    |  uint r359 = r355 + r358;
    |  r355=r359;
    |  uint r360 = r355 << int(r126);
    |  uint r361 = r355^r360;
    |  r355=r361;
    |  uint r362 = r355 + r356;
    |  r355=r362;
    |  uint r363 = r355 << int(r55);
    |  uint r364 = r355^r363;
    |  r355=r364;
    |  uint r365 = r355 >> int(r132);
    |  uint r366 = r357^r365;
    |  uint r367 = r355 + r366;
    |  r355=r367;
    |  uint r368 = r355 << int(r136);
    |  uint r369 = r355^r368;
    |  r355=r369;
    |  uint r370 = r355 >> int(r82);
    |  uint r371 = r355 + r370;
    |  r355=r371;
    |  uint r372 = r355 << int(r71);
    |  uint r373 = r355^r372;
    |  r355=r373;
    |  uint r374 = r355 >> int(r143);
    |  uint r375 = r355 + r374;
    |  r355=r375;
    |  uint r376 = r355 << int(r146);
    |  uint r377 = r355^r376;
    |  r355=r377;
    |  uint r378 = 8388607u;
    |  uint r379 = r355&r378;
    |;
    |  uint r380 = 1065353216u;
    |  uint r381 = r379|r380;
    |;
    |  r355=r381;
    |  float r382 = uintBitsToFloat(r355);
    |  float r383 = r382-r37;
    |  float r384 = r37-r97;
    |  float r385 = r154*r384;
    |  float r386 = r186*r97;
    |  float r387 = r385+r386;
    |  float r388 = r37-r97;
    |  float r389 = r251*r388;
    |  float r390 = r219*r97;
    |  float r391 = r389+r390;
    |  float r392 = r37-r97;
    |  float r393 = r283*r392;
    |  float r394 = r316*r97;
    |  float r395 = r393+r394;
    |  float r396 = r37-r97;
    |  float r397 = r383*r396;
    |  float r398 = r350*r97;
    |  float r399 = r397+r398;
    |  float r400 = r37-r107;
    |  float r401 = r387*r400;
    |  float r402 = r391*r107;
    |  float r403 = r401+r402;
    |  float r404 = r37-r107;
    |  float r405 = r395*r404;
    |  float r406 = r399*r107;
    |  float r407 = r405+r406;
    |  float r408 = r37-r117;
    |  float r409 = r403*r408;
    |  float r410 = r407*r117;
    |  float r411 = r409+r410;
    |  float r423 = r37-r411;
    |  vec3 r424 = vec3(r423);
    |  vec3 r425 = r415*r424;
    |  vec3 r426 = vec3(r411);
    |  vec3 r427 = r422*r426;
    |  vec3 r428 = r425+r427;
    |  vec3 r430 = vec3(r429);
    |  vec3 r431 = pow(r428,r430);
    |  return r431;
    |}
    |const vec3 bbox_min = vec3(-8.250000000000002,-8.25,-6.750000000000001);
    |const vec3 bbox_max = vec3(8.25,8.25,19.75);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
