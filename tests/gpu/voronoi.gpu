{
  is_2d: #true;
  is_3d: #true;
  bbox: [[-1e9999,-1e9999,-1e9999],[1e9999,1e9999,1e9999]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |uniform mat3 u_view2d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r1 = 1.0/0.0;
    |  float r2 = -(r1);
    |  /* body */
    |  return r2;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r9 = 8.0;
    |  float r11 = 1.0;
    |  float r12 = -(r11);
    |  float r20 = 1000.0;
    |  float r24 = 10000.0;
    |  float r27 = 1000000.0;
    |  float r36 = 2.2;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec2 r5 = vec2(r1,r2);
    |  vec2 r6 = floor(r5);
    |  vec2 r7 = vec2(r1,r2);
    |  vec2 r8 = fract(r7);
    |  float r10=r9;
    |  for (float r13=r12;r13<=r11;r13+=r11) {
    |  for (float r14=r12;r14<=r11;r14+=r11) {
    |  vec2 r15 = vec2(r13,r14);
    |  vec2 r16 = r15-r8;
    |  vec2 r17 = r6+r15;
    |  float r18 = r17[0];
    |  float r19 = r17[1];
    |  float r21 = r19*r20;
    |  float r22 = r18+r21;
    |  float r23 = sin(r22);
    |  float r25 = r23*r24;
    |  float r26 = fract(r25);
    |  float r28 = r23*r27;
    |  float r29 = fract(r28);
    |  vec2 r30 = vec2(r26,r29);
    |  vec2 r31 = r16+r30;
    |  float r32 = dot(r31,r31);
    |  float r33 = min(r10,r32);
    |  r10=r33;
    |  }
    |  }
    |  float r34 = sqrt(r10);
    |  vec3 r35 = vec3(r34,r34,r34);
    |  vec3 r37 = vec3(r36);
    |  vec3 r38 = pow(r35,r37);
    |  return r38;
    |}
    |const vec4 bbox = vec4(-10.0,-10.0,+10.0,+10.0);
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec2 size = bbox.zw - bbox.xy;
    |    vec2 scale2 = size / iResolution.xy;
    |    vec2 offset = bbox.xy;
    |    float scale;
    |    if (scale2.x > scale2.y) {
    |        scale = scale2.x;
    |        offset.y -= (iResolution.y*scale - size.y)/2.0;
    |    } else {
    |        scale = scale2.y;
    |        offset.x -= (iResolution.x*scale - size.x)/2.0;
    |    }
    |    vec3 col = vec3(0.0);
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 jitter = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 jitter = vec2(0.0);
    |#endif
    |    vec2 xy = fragCoord + jitter;
    |    xy = (u_view2d * vec3(xy,1)).xy;
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    vec4 p = vec4(xy*scale+offset,0,time);
    |    float d = dist(p);
    |    if (d > 0.0) {
    |        col += background_colour;
    |    } else {
    |        col += colour(p);
    |    }
    |    
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |    // convert linear RGB to sRGB
    |    fragColour = vec4(pow(col, vec3(0.454545454545454545)),1.0);
    |}
    ";
  parameters: [
  ];
}
