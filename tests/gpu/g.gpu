{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-1,-1,-1],[1,1,1]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = 0.0;
    |  float r7 = 13.0;
    |  float r9 = 18.0;
    |  float r13 = 1.0;
    |  vec3 r14 = vec3(r13,r5,r5);
    |  vec3 r19 = vec3(r5,r13,r5);
    |  float r23 = 2.0;
    |  vec3 r25 = vec3(r5,r5,r13);
    |  float r29 = 3.0;
    |  vec3 r31 = vec3(r13,r13,r13);
    |  float r35 = 4.0;
    |  float r37 = -(r13);
    |  vec3 r38 = vec3(r37,r13,r13);
    |  float r42 = 5.0;
    |  vec3 r44 = vec3(r13,r13,r37);
    |  float r48 = 6.0;
    |  vec3 r50 = vec3(r13,r37,r13);
    |  float r54 = 7.0;
    |  float r56 = 1.618033988749895;
    |  float r62 = 8.0;
    |  float r69 = 9.0;
    |  float r76 = 10.0;
    |  float r84 = 11.0;
    |  float r91 = 12.0;
    |  float r103 = 14.0;
    |  float r110 = 15.0;
    |  float r116 = 16.0;
    |  float r122 = 17.0;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  float r6=r5;
    |  float r8=r7;
    |  while (true) {
    |  bool r10 = r8<=r9;
    |  if (!r10) break;
    |  vec3 r11 = vec3(r1,r2,r3);
    |  bool r12 =(r8 == r5);
    |  float r15 = length(r14);
    |  vec3 r16 = vec3(r15);
    |  vec3 r17 = r14/r16;
    |  bool r18 =(r8 == r13);
    |  float r20 = length(r19);
    |  vec3 r21 = vec3(r20);
    |  vec3 r22 = r19/r21;
    |  bool r24 =(r8 == r23);
    |  float r26 = length(r25);
    |  vec3 r27 = vec3(r26);
    |  vec3 r28 = r25/r27;
    |  bool r30 =(r8 == r29);
    |  float r32 = length(r31);
    |  vec3 r33 = vec3(r32);
    |  vec3 r34 = r31/r33;
    |  bool r36 =(r8 == r35);
    |  float r39 = length(r38);
    |  vec3 r40 = vec3(r39);
    |  vec3 r41 = r38/r40;
    |  bool r43 =(r8 == r42);
    |  float r45 = length(r44);
    |  vec3 r46 = vec3(r45);
    |  vec3 r47 = r44/r46;
    |  bool r49 =(r8 == r48);
    |  float r51 = length(r50);
    |  vec3 r52 = vec3(r51);
    |  vec3 r53 = r50/r52;
    |  bool r55 =(r8 == r54);
    |  float r57 = r56+r13;
    |  vec3 r58 = vec3(r5,r13,r57);
    |  float r59 = length(r58);
    |  vec3 r60 = vec3(r59);
    |  vec3 r61 = r58/r60;
    |  bool r63 =(r8 == r62);
    |  float r64 = r56+r13;
    |  vec3 r65 = vec3(r5,r37,r64);
    |  float r66 = length(r65);
    |  vec3 r67 = vec3(r66);
    |  vec3 r68 = r65/r67;
    |  bool r70 =(r8 == r69);
    |  float r71 = r56+r13;
    |  vec3 r72 = vec3(r71,r5,r13);
    |  float r73 = length(r72);
    |  vec3 r74 = vec3(r73);
    |  vec3 r75 = r72/r74;
    |  bool r77 =(r8 == r76);
    |  float r78 = -(r56);
    |  float r79 = r78-r13;
    |  vec3 r80 = vec3(r79,r5,r13);
    |  float r81 = length(r80);
    |  vec3 r82 = vec3(r81);
    |  vec3 r83 = r80/r82;
    |  bool r85 =(r8 == r84);
    |  float r86 = r56+r13;
    |  vec3 r87 = vec3(r13,r86,r5);
    |  float r88 = length(r87);
    |  vec3 r89 = vec3(r88);
    |  vec3 r90 = r87/r89;
    |  bool r92 =(r8 == r91);
    |  float r93 = r56+r13;
    |  vec3 r94 = vec3(r37,r93,r5);
    |  float r95 = length(r94);
    |  vec3 r96 = vec3(r95);
    |  vec3 r97 = r94/r96;
    |  bool r98 =(r8 == r7);
    |  vec3 r99 = vec3(r5,r56,r13);
    |  float r100 = length(r99);
    |  vec3 r101 = vec3(r100);
    |  vec3 r102 = r99/r101;
    |  bool r104 =(r8 == r103);
    |  float r105 = -(r56);
    |  vec3 r106 = vec3(r5,r105,r13);
    |  float r107 = length(r106);
    |  vec3 r108 = vec3(r107);
    |  vec3 r109 = r106/r108;
    |  bool r111 =(r8 == r110);
    |  vec3 r112 = vec3(r13,r5,r56);
    |  float r113 = length(r112);
    |  vec3 r114 = vec3(r113);
    |  vec3 r115 = r112/r114;
    |  bool r117 =(r8 == r116);
    |  vec3 r118 = vec3(r37,r5,r56);
    |  float r119 = length(r118);
    |  vec3 r120 = vec3(r119);
    |  vec3 r121 = r118/r120;
    |  bool r123 =(r8 == r122);
    |  vec3 r124 = vec3(r56,r13,r5);
    |  float r125 = length(r124);
    |  vec3 r126 = vec3(r125);
    |  vec3 r127 = r124/r126;
    |  float r128 = -(r56);
    |  vec3 r129 = vec3(r128,r13,r5);
    |  float r130 = length(r129);
    |  vec3 r131 = vec3(r130);
    |  vec3 r132 = r129/r131;
    |  vec3 r133 =(r123 ? r127 : r132);
    |  vec3 r134 =(r117 ? r121 : r133);
    |  vec3 r135 =(r111 ? r115 : r134);
    |  vec3 r136 =(r104 ? r109 : r135);
    |  vec3 r137 =(r98 ? r102 : r136);
    |  vec3 r138 =(r92 ? r97 : r137);
    |  vec3 r139 =(r85 ? r90 : r138);
    |  vec3 r140 =(r77 ? r83 : r139);
    |  vec3 r141 =(r70 ? r75 : r140);
    |  vec3 r142 =(r63 ? r68 : r141);
    |  vec3 r143 =(r55 ? r61 : r142);
    |  vec3 r144 =(r49 ? r53 : r143);
    |  vec3 r145 =(r43 ? r47 : r144);
    |  vec3 r146 =(r36 ? r41 : r145);
    |  vec3 r147 =(r30 ? r34 : r146);
    |  vec3 r148 =(r24 ? r28 : r147);
    |  vec3 r149 =(r18 ? r22 : r148);
    |  vec3 r150 =(r12 ? r17 : r149);
    |  float r151 = dot(r11,r150);
    |  float r152 = abs(r151);
    |  float r153 = max(r6,r152);
    |  r6=r153;
    |  float r154 = r8+r13;
    |  r8=r154;
    |  }
    |  float r155 = r6-r13;
    |  return r155;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r1 = 0.8;
    |  float r2 = 0.5;
    |  vec3 r3 = vec3(r1,r1,r2);
    |  float r4 = 2.2;
    |  vec3 r5 = vec3(r4);
    |  vec3 r6 = pow(r3,r5);
    |  /* body */
    |  return r6;
    |}
    |const vec3 bbox_min = vec3(-1.0,-1.0,-1.0);
    |const vec3 bbox_max = vec3(1.0,1.0,1.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
