{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-1.8,-1.8,-1.1500000000000001],[1.8,1.8,2.9]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(0.0,0.0,3.0);
    |  float r16 = 0.0;
    |  float r17 = 3.0;
    |  float r20 = 1.0;
    |  vec3 r55 = vec3(3.0,3.0,2.5);
    |  float r64 = 0.5;
    |  float r72 = 1.0/0.0;
    |  vec3 r93 = vec3(-1.0/0.0,-1.0/0.0,-1.1);
    |  vec3 r102 = vec3(1.0/0.0,1.0/0.0,1.0/0.0);
    |  float r140 = 0.05;
    |  vec3 r146 = vec3(-1.0/0.0,-1.0/0.0,-1.0/0.0);
    |  vec3 r155 = vec3(1.0/0.0,1.0/0.0,2.9);
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  float r12 = -(r10);
    |  vec2 r13 = vec2(r4,r7);
    |  float r14 = length(r13);
    |  vec2 r15 = vec2(r14,r12);
    |  vec2 r18 = vec2(r16,r17);
    |  vec2 r19 = r15-r18;
    |  vec2 r21 = vec2(r17,r20);
    |  float r22 = length(r21);
    |  vec2 r23 = vec2(r22);
    |  vec2 r24 = r21/r23;
    |  float r25 = dot(r19,r24);
    |  float r26 = r24.y;
    |  float r27 = r24.x;
    |  float r28 = -(r27);
    |  vec2 r29 = vec2(r26,r28);
    |  float r30 = dot(r19,r29);
    |  float r31 = r15.y;
    |  float r32 = -(r31);
    |  float r33 = max(r25,r32);
    |  float r34=r33;
    |  float r35 = r15.y;
    |  bool r36 = r35>r17;
    |  bool r37 = r30<r16;
    |  bool r38 =(r36 && r37);
    |  if (r38) {
    |  float r39 = length(r19);
    |  float r40 = max(r34,r39);
    |  r34=r40;
    |  }
    |  float r41 = r15.x;
    |  bool r42 = r41>r20;
    |  vec2 r43 = vec2(r17,r20);
    |  float r44 = length(r43);
    |  bool r45 = r30>r44;
    |  bool r46 =(r42 && r45);
    |  if (r46) {
    |  vec2 r47 = vec2(r20,r16);
    |  vec2 r48 = r15-r47;
    |  float r49 = length(r48);
    |  float r50 = max(r34,r49);
    |  r34=r50;
    |  }
    |  float r51 = r0[0];
    |  float r52 = r0[1];
    |  float r53 = r0[2];
    |  float r54 = r0[3];
    |  float r56 = r55.x;
    |  float r57 = r51/r56;
    |  float r58 = r55.y;
    |  float r59 = r52/r58;
    |  float r60 = r55.z;
    |  float r61 = r53/r60;
    |  vec3 r62 = vec3(r57,r59,r61);
    |  float r63 = length(r62);
    |  float r65 = r63-r64;
    |  float r66 = r55[0];
    |  float r67 = r55[1];
    |  float r68 = min(r66,r67);
    |  float r69 = r55[2];
    |  float r70 = min(r68,r69);
    |  float r71 = r65*r70;
    |  bool r73 =(r34 == r72);
    |  float r74 = r71-r34;
    |  float r75 = r64*r74;
    |  float r76 = r75/r20;
    |  float r77 = r64+r76;
    |  float r78 = max(r77,r16);
    |  float r79 = min(r78,r20);
    |  float r80 = r20-r79;
    |  float r81 = r71*r80;
    |  float r82 = r34*r79;
    |  float r83 = r81+r82;
    |  float r84 = r20*r79;
    |  float r85 = r20-r79;
    |  float r86 = r84*r85;
    |  float r87 = r83-r86;
    |  float r88 =(r73 ? r71 : r87);
    |  float r89 = r0[0];
    |  float r90 = r0[1];
    |  float r91 = r0[2];
    |  float r92 = r0[3];
    |  vec3 r94 = vec3(r89,r90,r91);
    |  vec3 r95 = r93-r94;
    |  float r96 = r95[0];
    |  float r97 = r95[1];
    |  float r98 = max(r96,r97);
    |  float r99 = r95[2];
    |  float r100 = max(r98,r99);
    |  vec3 r101 = vec3(r89,r90,r91);
    |  vec3 r103 = r101-r102;
    |  float r104 = r103[0];
    |  float r105 = r103[1];
    |  float r106 = max(r104,r105);
    |  float r107 = r103[2];
    |  float r108 = max(r106,r107);
    |  float r109 = max(r100,r108);
    |  float r110 = r93.x;
    |  float r111 = r102.x;
    |  bool r112 = r89<r110;
    |  float r113 = r110-r89;
    |  bool r114 = r89>r111;
    |  float r115 = r89-r111;
    |  float r116 =(r114 ? r115 : r16);
    |  float r117 =(r112 ? r113 : r116);
    |  float r118 = r93.y;
    |  float r119 = r102.y;
    |  bool r120 = r90<r118;
    |  float r121 = r118-r90;
    |  bool r122 = r90>r119;
    |  float r123 = r90-r119;
    |  float r124 =(r122 ? r123 : r16);
    |  float r125 =(r120 ? r121 : r124);
    |  float r126 = r93.z;
    |  float r127 = r102.z;
    |  bool r128 = r91<r126;
    |  float r129 = r126-r91;
    |  bool r130 = r91>r127;
    |  float r131 = r91-r127;
    |  float r132 =(r130 ? r131 : r16);
    |  float r133 =(r128 ? r129 : r132);
    |  vec3 r134 = vec3(r117,r125,r133);
    |  float r135 = length(r134);
    |  bool r136 = r109<=r16;
    |  float r137 =(r136 ? r109 : r135);
    |  float r138 = max(r88,r137);
    |  float r139 = abs(r138);
    |  float r141 = r139-r140;
    |  float r142 = r0[0];
    |  float r143 = r0[1];
    |  float r144 = r0[2];
    |  float r145 = r0[3];
    |  vec3 r147 = vec3(r142,r143,r144);
    |  vec3 r148 = r146-r147;
    |  float r149 = r148[0];
    |  float r150 = r148[1];
    |  float r151 = max(r149,r150);
    |  float r152 = r148[2];
    |  float r153 = max(r151,r152);
    |  vec3 r154 = vec3(r142,r143,r144);
    |  vec3 r156 = r154-r155;
    |  float r157 = r156[0];
    |  float r158 = r156[1];
    |  float r159 = max(r157,r158);
    |  float r160 = r156[2];
    |  float r161 = max(r159,r160);
    |  float r162 = max(r153,r161);
    |  float r163 = r146.x;
    |  float r164 = r155.x;
    |  bool r165 = r142<r163;
    |  float r166 = r163-r142;
    |  bool r167 = r142>r164;
    |  float r168 = r142-r164;
    |  float r169 =(r167 ? r168 : r16);
    |  float r170 =(r165 ? r166 : r169);
    |  float r171 = r146.y;
    |  float r172 = r155.y;
    |  bool r173 = r143<r171;
    |  float r174 = r171-r143;
    |  bool r175 = r143>r172;
    |  float r176 = r143-r172;
    |  float r177 =(r175 ? r176 : r16);
    |  float r178 =(r173 ? r174 : r177);
    |  float r179 = r146.z;
    |  float r180 = r155.z;
    |  bool r181 = r144<r179;
    |  float r182 = r179-r144;
    |  bool r183 = r144>r180;
    |  float r184 = r144-r180;
    |  float r185 =(r183 ? r184 : r16);
    |  float r186 =(r181 ? r182 : r185);
    |  vec3 r187 = vec3(r170,r178,r186);
    |  float r188 = length(r187);
    |  bool r189 = r162<=r16;
    |  float r190 =(r189 ? r162 : r188);
    |  float r191 = max(r141,r190);
    |  return r191;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = 10.0;
    |  float r8 = 100.0;
    |  vec2 r9 = vec2(r8,r8);
    |  float r10 = 0.5;
    |  float r15 = 0.0;
    |  float r18 = 1.0;
    |  float r19 = 5.0;
    |  float r23 = 12.9898;
    |  float r24 = 78.233;
    |  vec2 r25 = vec2(r23,r24);
    |  float r28 = 43758.5453123;
    |  vec2 r31 = vec2(r18,r15);
    |  vec2 r37 = vec2(r15,r18);
    |  vec2 r43 = vec2(r18,r18);
    |  float r50 = 3.0;
    |  float r51 = 2.0;
    |  vec2 r104 = vec2(r23,r24);
    |  vec2 r109 = vec2(r18,r15);
    |  vec2 r115 = vec2(r15,r18);
    |  vec2 r121 = vec2(r18,r18);
    |  float r174 = 1.7;
    |  float r175 = 9.2;
    |  vec2 r176 = vec2(r174,r175);
    |  float r178 = 0.15;
    |  vec2 r188 = vec2(r23,r24);
    |  vec2 r193 = vec2(r18,r15);
    |  vec2 r199 = vec2(r15,r18);
    |  vec2 r205 = vec2(r18,r18);
    |  float r257 = 8.3;
    |  float r258 = 2.8;
    |  vec2 r259 = vec2(r257,r258);
    |  float r261 = 0.126;
    |  vec2 r271 = vec2(r23,r24);
    |  vec2 r276 = vec2(r18,r15);
    |  vec2 r282 = vec2(r15,r18);
    |  vec2 r288 = vec2(r18,r18);
    |  vec2 r347 = vec2(r23,r24);
    |  vec2 r352 = vec2(r18,r15);
    |  vec2 r358 = vec2(r15,r18);
    |  vec2 r364 = vec2(r18,r18);
    |  float r415 = 0.101961;
    |  float r416 = 0.619608;
    |  float r417 = 0.666667;
    |  vec3 r418 = vec3(r415,r416,r417);
    |  float r419 = 0.498039;
    |  vec3 r420 = vec3(r417,r417,r419);
    |  float r422 = 4.0;
    |  float r433 = 0.164706;
    |  vec3 r434 = vec3(r15,r15,r433);
    |  vec3 r444 = vec3(r417,r18,r18);
    |  float r456 = 0.6;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  float r6 = r3*r5;
    |  vec2 r7 = vec2(r1,r2);
    |  float r11 = cos(r10);
    |  float r12 = sin(r10);
    |  vec2 r13 = vec2(r11,r12);
    |  vec2 r14=r7;
    |  float r16=r15;
    |  float r17=r10;
    |  for (float r20=r18;r20<=r19;r20+=r18) {
    |  vec2 r21 = floor(r14);
    |  vec2 r22 = r14-r21;
    |  float r26 = dot(r21,r25);
    |  float r27 = sin(r26);
    |  float r29 = r27*r28;
    |  float r30 = fract(r29);
    |  vec2 r32 = r21+r31;
    |  float r33 = dot(r32,r25);
    |  float r34 = sin(r33);
    |  float r35 = r34*r28;
    |  float r36 = fract(r35);
    |  vec2 r38 = r21+r37;
    |  float r39 = dot(r38,r25);
    |  float r40 = sin(r39);
    |  float r41 = r40*r28;
    |  float r42 = fract(r41);
    |  vec2 r44 = r21+r43;
    |  float r45 = dot(r44,r25);
    |  float r46 = sin(r45);
    |  float r47 = r46*r28;
    |  float r48 = fract(r47);
    |  vec2 r49 = r22*r22;
    |  vec2 r52 = vec2(r51);
    |  vec2 r53 = r52*r22;
    |  vec2 r54 = vec2(r50);
    |  vec2 r55 = r54-r53;
    |  vec2 r56 = r49*r55;
    |  float r57 = r56.x;
    |  float r58 = r18-r57;
    |  float r59 = r30*r58;
    |  float r60 = r36*r57;
    |  float r61 = r59+r60;
    |  float r62 = r42-r30;
    |  float r63 = r56.y;
    |  float r64 = r62*r63;
    |  float r65 = r56.x;
    |  float r66 = r18-r65;
    |  float r67 = r64*r66;
    |  float r68 = r61+r67;
    |  float r69 = r48-r36;
    |  float r70 = r56.x;
    |  float r71 = r69*r70;
    |  float r72 = r56.y;
    |  float r73 = r71*r72;
    |  float r74 = r68+r73;
    |  float r75 = r17*r74;
    |  float r76 = r16+r75;
    |  r16=r76;
    |  float r77 = r13.x;
    |  float r78 = r14.x;
    |  float r79 = r77*r78;
    |  float r80 = r13.y;
    |  float r81 = r14.y;
    |  float r82 = r80*r81;
    |  float r83 = r79-r82;
    |  float r84 = r13.y;
    |  float r85 = r14.x;
    |  float r86 = r84*r85;
    |  float r87 = r13.x;
    |  float r88 = r14.y;
    |  float r89 = r87*r88;
    |  float r90 = r86+r89;
    |  vec2 r91 = vec2(r83,r90);
    |  vec2 r92 = vec2(r51);
    |  vec2 r93 = r91*r92;
    |  vec2 r94 = r93+r9;
    |  r14=r94;
    |  float r95 = r17*r10;
    |  r17=r95;
    |  }
    |  vec2 r96 = vec2(r18);
    |  vec2 r97 = r7+r96;
    |  vec2 r98=r97;
    |  float r99=r15;
    |  float r100=r10;
    |  for (float r101=r18;r101<=r19;r101+=r18) {
    |  vec2 r102 = floor(r98);
    |  vec2 r103 = r98-r102;
    |  float r105 = dot(r102,r104);
    |  float r106 = sin(r105);
    |  float r107 = r106*r28;
    |  float r108 = fract(r107);
    |  vec2 r110 = r102+r109;
    |  float r111 = dot(r110,r104);
    |  float r112 = sin(r111);
    |  float r113 = r112*r28;
    |  float r114 = fract(r113);
    |  vec2 r116 = r102+r115;
    |  float r117 = dot(r116,r104);
    |  float r118 = sin(r117);
    |  float r119 = r118*r28;
    |  float r120 = fract(r119);
    |  vec2 r122 = r102+r121;
    |  float r123 = dot(r122,r104);
    |  float r124 = sin(r123);
    |  float r125 = r124*r28;
    |  float r126 = fract(r125);
    |  vec2 r127 = r103*r103;
    |  vec2 r128 = vec2(r51);
    |  vec2 r129 = r128*r103;
    |  vec2 r130 = vec2(r50);
    |  vec2 r131 = r130-r129;
    |  vec2 r132 = r127*r131;
    |  float r133 = r132.x;
    |  float r134 = r18-r133;
    |  float r135 = r108*r134;
    |  float r136 = r114*r133;
    |  float r137 = r135+r136;
    |  float r138 = r120-r108;
    |  float r139 = r132.y;
    |  float r140 = r138*r139;
    |  float r141 = r132.x;
    |  float r142 = r18-r141;
    |  float r143 = r140*r142;
    |  float r144 = r137+r143;
    |  float r145 = r126-r114;
    |  float r146 = r132.x;
    |  float r147 = r145*r146;
    |  float r148 = r132.y;
    |  float r149 = r147*r148;
    |  float r150 = r144+r149;
    |  float r151 = r100*r150;
    |  float r152 = r99+r151;
    |  r99=r152;
    |  float r153 = r13.x;
    |  float r154 = r98.x;
    |  float r155 = r153*r154;
    |  float r156 = r13.y;
    |  float r157 = r98.y;
    |  float r158 = r156*r157;
    |  float r159 = r155-r158;
    |  float r160 = r13.y;
    |  float r161 = r98.x;
    |  float r162 = r160*r161;
    |  float r163 = r13.x;
    |  float r164 = r98.y;
    |  float r165 = r163*r164;
    |  float r166 = r162+r165;
    |  vec2 r167 = vec2(r159,r166);
    |  vec2 r168 = vec2(r51);
    |  vec2 r169 = r167*r168;
    |  vec2 r170 = r169+r9;
    |  r98=r170;
    |  float r171 = r100*r10;
    |  r100=r171;
    |  }
    |  vec2 r172 = vec2(r16,r99);
    |  vec2 r173 = r7+r172;
    |  vec2 r177 = r173+r176;
    |  float r179 = r178*r6;
    |  vec2 r180 = vec2(r179);
    |  vec2 r181 = r177+r180;
    |  vec2 r182=r181;
    |  float r183=r15;
    |  float r184=r10;
    |  for (float r185=r18;r185<=r19;r185+=r18) {
    |  vec2 r186 = floor(r182);
    |  vec2 r187 = r182-r186;
    |  float r189 = dot(r186,r188);
    |  float r190 = sin(r189);
    |  float r191 = r190*r28;
    |  float r192 = fract(r191);
    |  vec2 r194 = r186+r193;
    |  float r195 = dot(r194,r188);
    |  float r196 = sin(r195);
    |  float r197 = r196*r28;
    |  float r198 = fract(r197);
    |  vec2 r200 = r186+r199;
    |  float r201 = dot(r200,r188);
    |  float r202 = sin(r201);
    |  float r203 = r202*r28;
    |  float r204 = fract(r203);
    |  vec2 r206 = r186+r205;
    |  float r207 = dot(r206,r188);
    |  float r208 = sin(r207);
    |  float r209 = r208*r28;
    |  float r210 = fract(r209);
    |  vec2 r211 = r187*r187;
    |  vec2 r212 = vec2(r51);
    |  vec2 r213 = r212*r187;
    |  vec2 r214 = vec2(r50);
    |  vec2 r215 = r214-r213;
    |  vec2 r216 = r211*r215;
    |  float r217 = r216.x;
    |  float r218 = r18-r217;
    |  float r219 = r192*r218;
    |  float r220 = r198*r217;
    |  float r221 = r219+r220;
    |  float r222 = r204-r192;
    |  float r223 = r216.y;
    |  float r224 = r222*r223;
    |  float r225 = r216.x;
    |  float r226 = r18-r225;
    |  float r227 = r224*r226;
    |  float r228 = r221+r227;
    |  float r229 = r210-r198;
    |  float r230 = r216.x;
    |  float r231 = r229*r230;
    |  float r232 = r216.y;
    |  float r233 = r231*r232;
    |  float r234 = r228+r233;
    |  float r235 = r184*r234;
    |  float r236 = r183+r235;
    |  r183=r236;
    |  float r237 = r13.x;
    |  float r238 = r182.x;
    |  float r239 = r237*r238;
    |  float r240 = r13.y;
    |  float r241 = r182.y;
    |  float r242 = r240*r241;
    |  float r243 = r239-r242;
    |  float r244 = r13.y;
    |  float r245 = r182.x;
    |  float r246 = r244*r245;
    |  float r247 = r13.x;
    |  float r248 = r182.y;
    |  float r249 = r247*r248;
    |  float r250 = r246+r249;
    |  vec2 r251 = vec2(r243,r250);
    |  vec2 r252 = vec2(r51);
    |  vec2 r253 = r251*r252;
    |  vec2 r254 = r253+r9;
    |  r182=r254;
    |  float r255 = r184*r10;
    |  r184=r255;
    |  }
    |  vec2 r256 = r7+r172;
    |  vec2 r260 = r256+r259;
    |  float r262 = r261*r6;
    |  vec2 r263 = vec2(r262);
    |  vec2 r264 = r260+r263;
    |  vec2 r265=r264;
    |  float r266=r15;
    |  float r267=r10;
    |  for (float r268=r18;r268<=r19;r268+=r18) {
    |  vec2 r269 = floor(r265);
    |  vec2 r270 = r265-r269;
    |  float r272 = dot(r269,r271);
    |  float r273 = sin(r272);
    |  float r274 = r273*r28;
    |  float r275 = fract(r274);
    |  vec2 r277 = r269+r276;
    |  float r278 = dot(r277,r271);
    |  float r279 = sin(r278);
    |  float r280 = r279*r28;
    |  float r281 = fract(r280);
    |  vec2 r283 = r269+r282;
    |  float r284 = dot(r283,r271);
    |  float r285 = sin(r284);
    |  float r286 = r285*r28;
    |  float r287 = fract(r286);
    |  vec2 r289 = r269+r288;
    |  float r290 = dot(r289,r271);
    |  float r291 = sin(r290);
    |  float r292 = r291*r28;
    |  float r293 = fract(r292);
    |  vec2 r294 = r270*r270;
    |  vec2 r295 = vec2(r51);
    |  vec2 r296 = r295*r270;
    |  vec2 r297 = vec2(r50);
    |  vec2 r298 = r297-r296;
    |  vec2 r299 = r294*r298;
    |  float r300 = r299.x;
    |  float r301 = r18-r300;
    |  float r302 = r275*r301;
    |  float r303 = r281*r300;
    |  float r304 = r302+r303;
    |  float r305 = r287-r275;
    |  float r306 = r299.y;
    |  float r307 = r305*r306;
    |  float r308 = r299.x;
    |  float r309 = r18-r308;
    |  float r310 = r307*r309;
    |  float r311 = r304+r310;
    |  float r312 = r293-r281;
    |  float r313 = r299.x;
    |  float r314 = r312*r313;
    |  float r315 = r299.y;
    |  float r316 = r314*r315;
    |  float r317 = r311+r316;
    |  float r318 = r267*r317;
    |  float r319 = r266+r318;
    |  r266=r319;
    |  float r320 = r13.x;
    |  float r321 = r265.x;
    |  float r322 = r320*r321;
    |  float r323 = r13.y;
    |  float r324 = r265.y;
    |  float r325 = r323*r324;
    |  float r326 = r322-r325;
    |  float r327 = r13.y;
    |  float r328 = r265.x;
    |  float r329 = r327*r328;
    |  float r330 = r13.x;
    |  float r331 = r265.y;
    |  float r332 = r330*r331;
    |  float r333 = r329+r332;
    |  vec2 r334 = vec2(r326,r333);
    |  vec2 r335 = vec2(r51);
    |  vec2 r336 = r334*r335;
    |  vec2 r337 = r336+r9;
    |  r265=r337;
    |  float r338 = r267*r10;
    |  r267=r338;
    |  }
    |  vec2 r339 = vec2(r183,r266);
    |  vec2 r340 = r7+r339;
    |  vec2 r341=r340;
    |  float r342=r15;
    |  float r343=r10;
    |  for (float r344=r18;r344<=r19;r344+=r18) {
    |  vec2 r345 = floor(r341);
    |  vec2 r346 = r341-r345;
    |  float r348 = dot(r345,r347);
    |  float r349 = sin(r348);
    |  float r350 = r349*r28;
    |  float r351 = fract(r350);
    |  vec2 r353 = r345+r352;
    |  float r354 = dot(r353,r347);
    |  float r355 = sin(r354);
    |  float r356 = r355*r28;
    |  float r357 = fract(r356);
    |  vec2 r359 = r345+r358;
    |  float r360 = dot(r359,r347);
    |  float r361 = sin(r360);
    |  float r362 = r361*r28;
    |  float r363 = fract(r362);
    |  vec2 r365 = r345+r364;
    |  float r366 = dot(r365,r347);
    |  float r367 = sin(r366);
    |  float r368 = r367*r28;
    |  float r369 = fract(r368);
    |  vec2 r370 = r346*r346;
    |  vec2 r371 = vec2(r51);
    |  vec2 r372 = r371*r346;
    |  vec2 r373 = vec2(r50);
    |  vec2 r374 = r373-r372;
    |  vec2 r375 = r370*r374;
    |  float r376 = r375.x;
    |  float r377 = r18-r376;
    |  float r378 = r351*r377;
    |  float r379 = r357*r376;
    |  float r380 = r378+r379;
    |  float r381 = r363-r351;
    |  float r382 = r375.y;
    |  float r383 = r381*r382;
    |  float r384 = r375.x;
    |  float r385 = r18-r384;
    |  float r386 = r383*r385;
    |  float r387 = r380+r386;
    |  float r388 = r369-r357;
    |  float r389 = r375.x;
    |  float r390 = r388*r389;
    |  float r391 = r375.y;
    |  float r392 = r390*r391;
    |  float r393 = r387+r392;
    |  float r394 = r343*r393;
    |  float r395 = r342+r394;
    |  r342=r395;
    |  float r396 = r13.x;
    |  float r397 = r341.x;
    |  float r398 = r396*r397;
    |  float r399 = r13.y;
    |  float r400 = r341.y;
    |  float r401 = r399*r400;
    |  float r402 = r398-r401;
    |  float r403 = r13.y;
    |  float r404 = r341.x;
    |  float r405 = r403*r404;
    |  float r406 = r13.x;
    |  float r407 = r341.y;
    |  float r408 = r406*r407;
    |  float r409 = r405+r408;
    |  vec2 r410 = vec2(r402,r409);
    |  vec2 r411 = vec2(r51);
    |  vec2 r412 = r410*r411;
    |  vec2 r413 = r412+r9;
    |  r341=r413;
    |  float r414 = r343*r10;
    |  r343=r414;
    |  }
    |  float r421 = r342*r342;
    |  float r423 = r421*r422;
    |  float r424 = max(r423,r15);
    |  float r425 = min(r424,r18);
    |  float r426 = r18-r425;
    |  vec3 r427 = vec3(r426);
    |  vec3 r428 = r418*r427;
    |  vec3 r429 = vec3(r425);
    |  vec3 r430 = r420*r429;
    |  vec3 r431 = r428+r430;
    |  vec3 r432=r431;
    |  float r435 = length(r172);
    |  float r436 = max(r435,r15);
    |  float r437 = min(r436,r18);
    |  float r438 = r18-r437;
    |  vec3 r439 = vec3(r438);
    |  vec3 r440 = r432*r439;
    |  vec3 r441 = vec3(r437);
    |  vec3 r442 = r434*r441;
    |  vec3 r443 = r440+r442;
    |  r432=r443;
    |  float r445 = r339.x;
    |  float r446 = max(r445,r15);
    |  float r447 = min(r446,r18);
    |  float r448 = r18-r447;
    |  vec3 r449 = vec3(r448);
    |  vec3 r450 = r432*r449;
    |  vec3 r451 = vec3(r447);
    |  vec3 r452 = r444*r451;
    |  vec3 r453 = r450+r452;
    |  r432=r453;
    |  float r454 = r342*r342;
    |  float r455 = r454*r342;
    |  float r457 = r456*r342;
    |  float r458 = r457*r342;
    |  float r459 = r455+r458;
    |  float r460 = r10*r342;
    |  float r461 = r459+r460;
    |  vec3 r462 = vec3(r461);
    |  vec3 r463 = r462*r432;
    |  return r463;
    |}
    |const vec3 bbox_min = vec3(-1.8,-1.8,-1.1500000000000001);
    |const vec3 bbox_max = vec3(1.8,1.8,2.9);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col,iqcol, 0.5);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
