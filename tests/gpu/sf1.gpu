{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-1,-1,-1],[1,1,1]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r7 = vec3(1.0,1.0,1.0);
    |  float r14 = 0.0;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r5 = vec3(r1,r2,r3);
    |  vec3 r6 = abs(r5);
    |  vec3 r8 = r6-r7;
    |  float r9 = r8[0];
    |  float r10 = r8[1];
    |  float r11 = max(r9,r10);
    |  float r12 = r8[2];
    |  float r13 = max(r11,r12);
    |  float r15 = min(r13,r14);
    |  vec3 r16 = vec3(r14);
    |  vec3 r17 = max(r8,r16);
    |  float r18 = length(r17);
    |  float r19 = r15+r18;
    |  return r19;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r1 = 0.8;
    |  float r2 = 0.5;
    |  vec3 r3 = vec3(r1,r1,r2);
    |  float r4 = 2.2;
    |  vec3 r5 = vec3(r4);
    |  vec3 r6 = pow(r3,r5);
    |  /* body */
    |  return r6;
    |}
    |const vec3 bbox_min = vec3(-1.0,-1.0,-1.0);
    |const vec3 bbox_max = vec3(1.0,1.0,1.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |vec3 sf1(vec3 r0, vec3 r1, vec3 r2, vec3 r3)
    |{
    |  /* constants */
    |  float r4 = 2.0;
    |  float r10 = 0.4;
    |  float r11 = -(r10);
    |  float r12 = 0.6;
    |  float r13 = 0.7;
    |  vec3 r14 = vec3(r11,r12,r13);
    |  float r18 = 0.5;
    |  float r22 = 0.0;
    |  float r23 = 1.0;
    |  float r44 = 0.1;
    |  float r45 = -(r44);
    |  float r53 = 3.0;
    |  float r65 = 16.0;
    |  float r67 = 1.3;
    |  float r69 = 0.8;
    |  float r70 = 0.55;
    |  vec3 r71 = vec3(r23,r69,r70);
    |  float r75 = 0.9;
    |  vec3 r76 = vec3(r23,r75,r13);
    |  vec3 r83 = vec3(r10,r12,r23);
    |  float r92 = 0.35;
    |  vec3 r93 = vec3(r92,r92,r92);
    |  float r97 = 0.25;
    |  vec3 r99 = vec3(r23,r23,r23);
    |  /* body */
    |  float r5 = dot(r1,r2);
    |  float r6 = r4*r5;
    |  vec3 r7 = vec3(r6);
    |  vec3 r8 = r7*r1;
    |  vec3 r9 = r2-r8;
    |  float r15 = length(r14);
    |  vec3 r16 = vec3(r15);
    |  vec3 r17 = r14/r16;
    |  float r19 = r1.z;
    |  float r20 = r18*r19;
    |  float r21 = r18+r20;
    |  float r24 = max(r21,r22);
    |  float r25 = min(r24,r23);
    |  float r26 = dot(r1,r17);
    |  float r27 = max(r26,r22);
    |  float r28 = min(r27,r23);
    |  float r29 = r17.x;
    |  float r30 = -(r29);
    |  float r31 = r17.y;
    |  vec3 r32 = vec3(r30,r31,r22);
    |  float r33 = length(r32);
    |  vec3 r34 = vec3(r33);
    |  vec3 r35 = r32/r34;
    |  float r36 = dot(r1,r35);
    |  float r37 = max(r36,r22);
    |  float r38 = min(r37,r23);
    |  float r39 = r0.z;
    |  float r40 = r23-r39;
    |  float r41 = max(r40,r22);
    |  float r42 = min(r41,r23);
    |  float r43 = r38*r42;
    |  float r46 = r9.z;
    |  float r47 = r46-r45;
    |  float r48 = r44-r45;
    |  float r49 = r47/r48;
    |  float r50 = max(r49,r22);
    |  float r51 = min(r50,r23);
    |  float r52 = r51*r51;
    |  float r54 = r4*r51;
    |  float r55 = r53-r54;
    |  float r56 = r52*r55;
    |  float r57 = dot(r1,r2);
    |  float r58 = r23+r57;
    |  float r59 = max(r58,r22);
    |  float r60 = min(r59,r23);
    |  float r61 = pow(r60,r4);
    |  float r62 = dot(r9,r17);
    |  float r63 = max(r62,r22);
    |  float r64 = min(r63,r23);
    |  float r66 = pow(r64,r65);
    |  float r68 = r67*r28;
    |  vec3 r72 = vec3(r68);
    |  vec3 r73 = r72*r71;
    |  float r74 = r4*r66;
    |  vec3 r77 = vec3(r74);
    |  vec3 r78 = r77*r76;
    |  vec3 r79 = vec3(r28);
    |  vec3 r80 = r78*r79;
    |  vec3 r81 = r73+r80;
    |  float r82 = r10*r25;
    |  vec3 r84 = vec3(r82);
    |  vec3 r85 = r84*r83;
    |  vec3 r86 = r81+r85;
    |  float r87 = r18*r56;
    |  vec3 r88 = vec3(r87);
    |  vec3 r89 = r88*r83;
    |  vec3 r90 = r86+r89;
    |  float r91 = r18*r43;
    |  vec3 r94 = vec3(r91);
    |  vec3 r95 = r94*r93;
    |  vec3 r96 = r90+r95;
    |  float r98 = r97*r61;
    |  vec3 r100 = vec3(r98);
    |  vec3 r101 = r100*r99;
    |  vec3 r102 = r96+r101;
    |  vec3 r103 = r3*r102;
    |  float r104 = r23-r18;
    |  vec3 r105 = vec3(r104);
    |  vec3 r106 = r3*r105;
    |  vec3 r107 = vec3(r18);
    |  vec3 r108 = r103*r107;
    |  vec3 r109 = r106+r108;
    |  return r109;
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        col = sf1(pos, nor, rd, c);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
