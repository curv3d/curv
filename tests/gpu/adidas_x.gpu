{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-15.000000000000005,-15.000000000000002,-15.000000000000004],[15.000000000000005,15.000000000000002,15.000000000000004]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 2000.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |uniform float rv_h;
    |uniform float rv_l;
    |uniform float rv_p1;
    |uniform float rv_p2;
    |uniform float rv_t;
    |uniform float rv_tt;
    |uniform float rv_ttt;
    |uniform float rv_w;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = -1.5707963267948966;
    |  vec3 r6 = vec3(0.0,1.0,0.0);
    |  float r37 = 1.0;
    |  float r50 = 1.5707963267948966;
    |  vec3 r51 = vec3(0.0,1.0,0.0);
    |  float r124 = rv_w;
    |  float r125 = 4.0;
    |  float r126 = r124/r125;
    |  vec3 r127 = vec3(r126,0.0,0.0);
    |  float r144 = 2.0;
    |  float r145 = r124/r144;
    |  float r146 = r145/r144;
    |  float r147 = rv_l;
    |  float r148 = r147/r144;
    |  float r149 = rv_h;
    |  float r150 = r149/r144;
    |  vec3 r151 = vec3(r146,r148,r150);
    |  float r158 = 0.0;
    |  float r170 = rv_t;
    |  float r171 = -(r170);
    |  float r172 = r145-r171;
    |  float r173 = r172/r144;
    |  float r174 = r147-r170;
    |  float r175 = r174/r144;
    |  float r176 = r149-r170;
    |  float r177 = r176/r144;
    |  vec3 r178 = vec3(r173,r175,r177);
    |  float r193 = r124/r125;
    |  float r194 = 0.2;
    |  float r195 = r193+r194;
    |  float r196 = -2.0;
    |  float r197 = r149/r196;
    |  vec3 r198 = vec3(r195,0.0,r197);
    |  vec3 r208 = vec3(0.0,0.0,1.0);
    |  vec3 r250 = vec3(1.0,0.0,0.0);
    |  vec3 r292 = vec3(0.0,1.0,0.0);
    |  float r337 = r147+r170;
    |  float r338 = r337/r144;
    |  float r339 = r338;
    |  float r346 = r149/r144;
    |  vec2[3] r347 = vec2[3](vec2(0.0,0.0),vec2(0.0,rv_h),vec2(rv_p1,r346));
    |  float r413 = rv_tt;
    |  float r414 = r413/r144;
    |  float r415 = r147/r196;
    |  float r416 = rv_ttt;
    |  float r417 = r416/r144;
    |  float r418 = r415+r417;
    |  float r419 = r418-r194;
    |  float r420 = r149/r144;
    |  float r421 = r420+r194;
    |  vec3 r422 = vec3(r414,r419,r421);
    |  vec3 r432 = vec3(0.0,0.0,1.0);
    |  vec3 r474 = vec3(0.0,1.0,0.0);
    |  float r519 = r416/r144;
    |  float r520 = r519;
    |  float r527 = r413/r144;
    |  vec2[3] r528 = vec2[3](vec2(0.0,0.0),vec2(0.0,rv_tt),vec2(rv_p2,r527));
    |  vec3 r597 = vec3(0.0,0.0,1.0);
    |  vec3 r599 = vec3(0.0,0.0,0.0);
    |  vec3 r609 = vec3(0.0,-1.0,0.0);
    |  vec3 r611 = vec3(0.0,-0.0,0.0);
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r7 = vec3(r1,r2,r3);
    |  float r8 = cos(r5);
    |  vec3 r9 = vec3(r8);
    |  vec3 r10 = r7*r9;
    |  float r11 = r6.y;
    |  float r12 = r7.z;
    |  float r13 = r11*r12;
    |  float r14 = r6.z;
    |  float r15 = r7.y;
    |  float r16 = r14*r15;
    |  float r17 = r13-r16;
    |  float r18 = r6.z;
    |  float r19 = r7.x;
    |  float r20 = r18*r19;
    |  float r21 = r6.x;
    |  float r22 = r7.z;
    |  float r23 = r21*r22;
    |  float r24 = r20-r23;
    |  float r25 = r6.x;
    |  float r26 = r7.y;
    |  float r27 = r25*r26;
    |  float r28 = r6.y;
    |  float r29 = r7.x;
    |  float r30 = r28*r29;
    |  float r31 = r27-r30;
    |  vec3 r32 = vec3(r17,r24,r31);
    |  float r33 = sin(r5);
    |  vec3 r34 = vec3(r33);
    |  vec3 r35 = r32*r34;
    |  vec3 r36 = r10-r35;
    |  float r38 = cos(r5);
    |  float r39 = r37-r38;
    |  vec3 r40 = vec3(r39);
    |  vec3 r41 = r7*r40;
    |  float r42 = dot(r6,r41);
    |  vec3 r43 = vec3(r42);
    |  vec3 r44 = r6*r43;
    |  vec3 r45 = r36+r44;
    |  float r46 = r45.x;
    |  float r47 = r45.y;
    |  float r48 = r45.z;
    |  float r49 = abs(r46);
    |  vec3 r52 = vec3(r49,r47,r48);
    |  float r53 = cos(r50);
    |  vec3 r54 = vec3(r53);
    |  vec3 r55 = r52*r54;
    |  float r56 = r51.y;
    |  float r57 = r52.z;
    |  float r58 = r56*r57;
    |  float r59 = r51.z;
    |  float r60 = r52.y;
    |  float r61 = r59*r60;
    |  float r62 = r58-r61;
    |  float r63 = r51.z;
    |  float r64 = r52.x;
    |  float r65 = r63*r64;
    |  float r66 = r51.x;
    |  float r67 = r52.z;
    |  float r68 = r66*r67;
    |  float r69 = r65-r68;
    |  float r70 = r51.x;
    |  float r71 = r52.y;
    |  float r72 = r70*r71;
    |  float r73 = r51.y;
    |  float r74 = r52.x;
    |  float r75 = r73*r74;
    |  float r76 = r72-r75;
    |  vec3 r77 = vec3(r62,r69,r76);
    |  float r78 = sin(r50);
    |  vec3 r79 = vec3(r78);
    |  vec3 r80 = r77*r79;
    |  vec3 r81 = r55-r80;
    |  float r82 = cos(r50);
    |  float r83 = r37-r82;
    |  vec3 r84 = vec3(r83);
    |  vec3 r85 = r52*r84;
    |  float r86 = dot(r51,r85);
    |  vec3 r87 = vec3(r86);
    |  vec3 r88 = r51*r87;
    |  vec3 r89 = r81+r88;
    |  float r90 = r89.x;
    |  float r91 = r89.y;
    |  float r92 = r89.z;
    |  float r93 = abs(r90);
    |  float r94 = -(r50);
    |  vec2 r95 = vec2(r93,r91);
    |  float r96 = cos(r94);
    |  float r97 = sin(r94);
    |  vec2 r98 = vec2(r96,r97);
    |  float r99 = r95.x;
    |  float r100 = r98.x;
    |  float r101 = r99*r100;
    |  float r102 = r95.y;
    |  float r103 = r98.y;
    |  float r104 = r102*r103;
    |  float r105 = r101-r104;
    |  float r106 = r95.y;
    |  float r107 = r98.x;
    |  float r108 = r106*r107;
    |  float r109 = r95.x;
    |  float r110 = r98.y;
    |  float r111 = r109*r110;
    |  float r112 = r108+r111;
    |  vec2 r113 = vec2(r105,r112);
    |  float r114 = r113.x;
    |  float r115 = r113.y;
    |  vec4 r116 = vec4(r114,r115,r92,r4);
    |  float r117 = r116[0];
    |  float r118 = r116[1];
    |  float r119 = r116[2];
    |  float r120 = r116[3];
    |  float r121 = abs(r117);
    |  vec4 r122 = vec4(r121,r118,r119,r120);
    |  float r123 = r122.x;
    |  float r128 = r127.x;
    |  float r129 = r123-r128;
    |  float r130 = r122.y;
    |  float r131 = r127.y;
    |  float r132 = r130-r131;
    |  float r133 = r122.z;
    |  float r134 = r127.z;
    |  float r135 = r133-r134;
    |  float r136 = r122.w;
    |  vec4 r137 = vec4(r129,r132,r135,r136);
    |  float r138 = r137[0];
    |  float r139 = r137[1];
    |  float r140 = r137[2];
    |  float r141 = r137[3];
    |  vec3 r142 = vec3(r138,r139,r140);
    |  vec3 r143 = abs(r142);
    |  vec3 r152 = r143-r151;
    |  float r153 = r152[0];
    |  float r154 = r152[1];
    |  float r155 = max(r153,r154);
    |  float r156 = r152[2];
    |  float r157 = max(r155,r156);
    |  float r159 = min(r157,r158);
    |  vec3 r160 = vec3(r158);
    |  vec3 r161 = max(r152,r160);
    |  float r162 = length(r161);
    |  float r163 = r159+r162;
    |  float r164 = r137[0];
    |  float r165 = r137[1];
    |  float r166 = r137[2];
    |  float r167 = r137[3];
    |  vec3 r168 = vec3(r164,r165,r166);
    |  vec3 r169 = abs(r168);
    |  vec3 r179 = r169-r178;
    |  float r180 = r179[0];
    |  float r181 = r179[1];
    |  float r182 = max(r180,r181);
    |  float r183 = r179[2];
    |  float r184 = max(r182,r183);
    |  float r185 = min(r184,r158);
    |  vec3 r186 = vec3(r158);
    |  vec3 r187 = max(r179,r186);
    |  float r188 = length(r187);
    |  float r189 = r185+r188;
    |  float r190 = -(r189);
    |  float r191 = max(r163,r190);
    |  float r192 = r137.x;
    |  float r199 = r198.x;
    |  float r200 = r192-r199;
    |  float r201 = r137.y;
    |  float r202 = r198.y;
    |  float r203 = r201-r202;
    |  float r204 = r137.z;
    |  float r205 = r198.z;
    |  float r206 = r204-r205;
    |  float r207 = r137.w;
    |  vec3 r209 = vec3(r200,r203,r206);
    |  float r210 = cos(r50);
    |  vec3 r211 = vec3(r210);
    |  vec3 r212 = r209*r211;
    |  float r213 = r208.y;
    |  float r214 = r209.z;
    |  float r215 = r213*r214;
    |  float r216 = r208.z;
    |  float r217 = r209.y;
    |  float r218 = r216*r217;
    |  float r219 = r215-r218;
    |  float r220 = r208.z;
    |  float r221 = r209.x;
    |  float r222 = r220*r221;
    |  float r223 = r208.x;
    |  float r224 = r209.z;
    |  float r225 = r223*r224;
    |  float r226 = r222-r225;
    |  float r227 = r208.x;
    |  float r228 = r209.y;
    |  float r229 = r227*r228;
    |  float r230 = r208.y;
    |  float r231 = r209.x;
    |  float r232 = r230*r231;
    |  float r233 = r229-r232;
    |  vec3 r234 = vec3(r219,r226,r233);
    |  float r235 = sin(r50);
    |  vec3 r236 = vec3(r235);
    |  vec3 r237 = r234*r236;
    |  vec3 r238 = r212-r237;
    |  float r239 = cos(r50);
    |  float r240 = r37-r239;
    |  vec3 r241 = vec3(r240);
    |  vec3 r242 = r209*r241;
    |  float r243 = dot(r208,r242);
    |  vec3 r244 = vec3(r243);
    |  vec3 r245 = r208*r244;
    |  vec3 r246 = r238+r245;
    |  float r247 = r246.x;
    |  float r248 = r246.y;
    |  float r249 = r246.z;
    |  vec3 r251 = vec3(r247,r248,r249);
    |  float r252 = cos(r50);
    |  vec3 r253 = vec3(r252);
    |  vec3 r254 = r251*r253;
    |  float r255 = r250.y;
    |  float r256 = r251.z;
    |  float r257 = r255*r256;
    |  float r258 = r250.z;
    |  float r259 = r251.y;
    |  float r260 = r258*r259;
    |  float r261 = r257-r260;
    |  float r262 = r250.z;
    |  float r263 = r251.x;
    |  float r264 = r262*r263;
    |  float r265 = r250.x;
    |  float r266 = r251.z;
    |  float r267 = r265*r266;
    |  float r268 = r264-r267;
    |  float r269 = r250.x;
    |  float r270 = r251.y;
    |  float r271 = r269*r270;
    |  float r272 = r250.y;
    |  float r273 = r251.x;
    |  float r274 = r272*r273;
    |  float r275 = r271-r274;
    |  vec3 r276 = vec3(r261,r268,r275);
    |  float r277 = sin(r50);
    |  vec3 r278 = vec3(r277);
    |  vec3 r279 = r276*r278;
    |  vec3 r280 = r254-r279;
    |  float r281 = cos(r50);
    |  float r282 = r37-r281;
    |  vec3 r283 = vec3(r282);
    |  vec3 r284 = r251*r283;
    |  float r285 = dot(r250,r284);
    |  vec3 r286 = vec3(r285);
    |  vec3 r287 = r250*r286;
    |  vec3 r288 = r280+r287;
    |  float r289 = r288.x;
    |  float r290 = r288.y;
    |  float r291 = r288.z;
    |  vec3 r293 = vec3(r289,r290,r291);
    |  float r294 = cos(r50);
    |  vec3 r295 = vec3(r294);
    |  vec3 r296 = r293*r295;
    |  float r297 = r292.y;
    |  float r298 = r293.z;
    |  float r299 = r297*r298;
    |  float r300 = r292.z;
    |  float r301 = r293.y;
    |  float r302 = r300*r301;
    |  float r303 = r299-r302;
    |  float r304 = r292.z;
    |  float r305 = r293.x;
    |  float r306 = r304*r305;
    |  float r307 = r292.x;
    |  float r308 = r293.z;
    |  float r309 = r307*r308;
    |  float r310 = r306-r309;
    |  float r311 = r292.x;
    |  float r312 = r293.y;
    |  float r313 = r311*r312;
    |  float r314 = r292.y;
    |  float r315 = r293.x;
    |  float r316 = r314*r315;
    |  float r317 = r313-r316;
    |  vec3 r318 = vec3(r303,r310,r317);
    |  float r319 = sin(r50);
    |  vec3 r320 = vec3(r319);
    |  vec3 r321 = r318*r320;
    |  vec3 r322 = r296-r321;
    |  float r323 = cos(r50);
    |  float r324 = r37-r323;
    |  vec3 r325 = vec3(r324);
    |  vec3 r326 = r293*r325;
    |  float r327 = dot(r292,r326);
    |  vec3 r328 = vec3(r327);
    |  vec3 r329 = r292*r328;
    |  vec3 r330 = r322+r329;
    |  float r331 = r330.x;
    |  float r332 = r330.y;
    |  float r333 = r330.z;
    |  vec4 r334 = vec4(r331,r332,r333,r207);
    |  float r335 = r334.z;
    |  float r336 = abs(r335);
    |  float r340 = r336-r339;
    |  float r341 = r334.x;
    |  float r342 = r334.y;
    |  float r343 = r334.w;
    |  vec4 r344 = vec4(r341,r342,r158,r343);
    |  vec2 r345 = r344.xy;
    |  float r348 = 3;
    |  vec2 r349 = r347[int(r158)];
    |  vec2 r350 = r345-r349;
    |  vec2 r351 = r347[int(r158)];
    |  vec2 r352 = r345-r351;
    |  float r353 = dot(r350,r352);
    |  float r354=r353;
    |  float r355=r37;
    |  float r356 = r348-r37;
    |  float r357=r356;
    |  for (float r358=r158;r358<r348;r358+=r37) {
    |  vec2 r359 = r347[int(r357)];
    |  vec2 r360 = r347[int(r358)];
    |  vec2 r361 = r359-r360;
    |  vec2 r362 = r347[int(r358)];
    |  vec2 r363 = r345-r362;
    |  float r364 = dot(r363,r361);
    |  float r365 = dot(r361,r361);
    |  float r366 = r364/r365;
    |  float r367 = max(r366,r158);
    |  float r368 = min(r367,r37);
    |  vec2 r369 = vec2(r368);
    |  vec2 r370 = r361*r369;
    |  vec2 r371 = r363-r370;
    |  float r372 = dot(r371,r371);
    |  float r373 = min(r354,r372);
    |  r354=r373;
    |  float r374 = r345.y;
    |  float r375 = r347[int(r358)][int(r37)];
    |  bool r376 = r374>=r375;
    |  float r377 = r345.y;
    |  float r378 = r347[int(r357)][int(r37)];
    |  bool r379 = r377<r378;
    |  float r380 = r361.x;
    |  float r381 = r363.y;
    |  float r382 = r380*r381;
    |  float r383 = r361.y;
    |  float r384 = r363.x;
    |  float r385 = r383*r384;
    |  bool r386 = r382>r385;
    |  bvec3 r387 = bvec3(r376,r379,r386);
    |  bool r388 = r387[0];
    |  bool r389 = r387[1];
    |  bool r390 = r388&&r389;
    |;
    |  bool r391 = r387[2];
    |  bool r392 = r390&&r391;
    |;
    |  bvec3 r393 = not(r387);
    |  bool r394 = r393[0];
    |  bool r395 = r393[1];
    |  bool r396 = r394&&r395;
    |;
    |  bool r397 = r393[2];
    |  bool r398 = r396&&r397;
    |;
    |  bool r399 =(r392 || r398);
    |  if (r399) {
    |  float r400 = -(r355);
    |  r355=r400;
    |  }
    |  r357=r358;
    |  }
    |  float r401 = sqrt(r354);
    |  float r402 = r355*r401;
    |  vec2 r403 = vec2(r340,r402);
    |  vec2 r404 = vec2(r158);
    |  vec2 r405 = max(r403,r404);
    |  float r406 = length(r405);
    |  float r407 = max(r340,r402);
    |  float r408 = min(r407,r158);
    |  float r409 = r406+r408;
    |  float r410 = -(r409);
    |  float r411 = max(r191,r410);
    |  float r412 = r116.x;
    |  float r423 = r422.x;
    |  float r424 = r412-r423;
    |  float r425 = r116.y;
    |  float r426 = r422.y;
    |  float r427 = r425-r426;
    |  float r428 = r116.z;
    |  float r429 = r422.z;
    |  float r430 = r428-r429;
    |  float r431 = r116.w;
    |  vec3 r433 = vec3(r424,r427,r430);
    |  float r434 = cos(r50);
    |  vec3 r435 = vec3(r434);
    |  vec3 r436 = r433*r435;
    |  float r437 = r432.y;
    |  float r438 = r433.z;
    |  float r439 = r437*r438;
    |  float r440 = r432.z;
    |  float r441 = r433.y;
    |  float r442 = r440*r441;
    |  float r443 = r439-r442;
    |  float r444 = r432.z;
    |  float r445 = r433.x;
    |  float r446 = r444*r445;
    |  float r447 = r432.x;
    |  float r448 = r433.z;
    |  float r449 = r447*r448;
    |  float r450 = r446-r449;
    |  float r451 = r432.x;
    |  float r452 = r433.y;
    |  float r453 = r451*r452;
    |  float r454 = r432.y;
    |  float r455 = r433.x;
    |  float r456 = r454*r455;
    |  float r457 = r453-r456;
    |  vec3 r458 = vec3(r443,r450,r457);
    |  float r459 = sin(r50);
    |  vec3 r460 = vec3(r459);
    |  vec3 r461 = r458*r460;
    |  vec3 r462 = r436-r461;
    |  float r463 = cos(r50);
    |  float r464 = r37-r463;
    |  vec3 r465 = vec3(r464);
    |  vec3 r466 = r433*r465;
    |  float r467 = dot(r432,r466);
    |  vec3 r468 = vec3(r467);
    |  vec3 r469 = r432*r468;
    |  vec3 r470 = r462+r469;
    |  float r471 = r470.x;
    |  float r472 = r470.y;
    |  float r473 = r470.z;
    |  vec3 r475 = vec3(r471,r472,r473);
    |  float r476 = cos(r50);
    |  vec3 r477 = vec3(r476);
    |  vec3 r478 = r475*r477;
    |  float r479 = r474.y;
    |  float r480 = r475.z;
    |  float r481 = r479*r480;
    |  float r482 = r474.z;
    |  float r483 = r475.y;
    |  float r484 = r482*r483;
    |  float r485 = r481-r484;
    |  float r486 = r474.z;
    |  float r487 = r475.x;
    |  float r488 = r486*r487;
    |  float r489 = r474.x;
    |  float r490 = r475.z;
    |  float r491 = r489*r490;
    |  float r492 = r488-r491;
    |  float r493 = r474.x;
    |  float r494 = r475.y;
    |  float r495 = r493*r494;
    |  float r496 = r474.y;
    |  float r497 = r475.x;
    |  float r498 = r496*r497;
    |  float r499 = r495-r498;
    |  vec3 r500 = vec3(r485,r492,r499);
    |  float r501 = sin(r50);
    |  vec3 r502 = vec3(r501);
    |  vec3 r503 = r500*r502;
    |  vec3 r504 = r478-r503;
    |  float r505 = cos(r50);
    |  float r506 = r37-r505;
    |  vec3 r507 = vec3(r506);
    |  vec3 r508 = r475*r507;
    |  float r509 = dot(r474,r508);
    |  vec3 r510 = vec3(r509);
    |  vec3 r511 = r474*r510;
    |  vec3 r512 = r504+r511;
    |  float r513 = r512.x;
    |  float r514 = r512.y;
    |  float r515 = r512.z;
    |  vec4 r516 = vec4(r513,r514,r515,r431);
    |  float r517 = r516.z;
    |  float r518 = abs(r517);
    |  float r521 = r518-r520;
    |  float r522 = r516.x;
    |  float r523 = r516.y;
    |  float r524 = r516.w;
    |  vec4 r525 = vec4(r522,r523,r158,r524);
    |  vec2 r526 = r525.xy;
    |  float r529 = 3;
    |  vec2 r530 = r528[int(r158)];
    |  vec2 r531 = r526-r530;
    |  vec2 r532 = r528[int(r158)];
    |  vec2 r533 = r526-r532;
    |  float r534 = dot(r531,r533);
    |  float r535=r534;
    |  float r536=r37;
    |  float r537 = r529-r37;
    |  float r538=r537;
    |  for (float r539=r158;r539<r529;r539+=r37) {
    |  vec2 r540 = r528[int(r538)];
    |  vec2 r541 = r528[int(r539)];
    |  vec2 r542 = r540-r541;
    |  vec2 r543 = r528[int(r539)];
    |  vec2 r544 = r526-r543;
    |  float r545 = dot(r544,r542);
    |  float r546 = dot(r542,r542);
    |  float r547 = r545/r546;
    |  float r548 = max(r547,r158);
    |  float r549 = min(r548,r37);
    |  vec2 r550 = vec2(r549);
    |  vec2 r551 = r542*r550;
    |  vec2 r552 = r544-r551;
    |  float r553 = dot(r552,r552);
    |  float r554 = min(r535,r553);
    |  r535=r554;
    |  float r555 = r526.y;
    |  float r556 = r528[int(r539)][int(r37)];
    |  bool r557 = r555>=r556;
    |  float r558 = r526.y;
    |  float r559 = r528[int(r538)][int(r37)];
    |  bool r560 = r558<r559;
    |  float r561 = r542.x;
    |  float r562 = r544.y;
    |  float r563 = r561*r562;
    |  float r564 = r542.y;
    |  float r565 = r544.x;
    |  float r566 = r564*r565;
    |  bool r567 = r563>r566;
    |  bvec3 r568 = bvec3(r557,r560,r567);
    |  bool r569 = r568[0];
    |  bool r570 = r568[1];
    |  bool r571 = r569&&r570;
    |;
    |  bool r572 = r568[2];
    |  bool r573 = r571&&r572;
    |;
    |  bvec3 r574 = not(r568);
    |  bool r575 = r574[0];
    |  bool r576 = r574[1];
    |  bool r577 = r575&&r576;
    |;
    |  bool r578 = r574[2];
    |  bool r579 = r577&&r578;
    |;
    |  bool r580 =(r573 || r579);
    |  if (r580) {
    |  float r581 = -(r536);
    |  r536=r581;
    |  }
    |  r538=r539;
    |  }
    |  float r582 = sqrt(r535);
    |  float r583 = r536*r582;
    |  vec2 r584 = vec2(r521,r583);
    |  vec2 r585 = vec2(r158);
    |  vec2 r586 = max(r584,r585);
    |  float r587 = length(r586);
    |  float r588 = max(r521,r583);
    |  float r589 = min(r588,r158);
    |  float r590 = r587+r589;
    |  float r591 = -(r590);
    |  float r592 = max(r411,r591);
    |  float r593 = r116[0];
    |  float r594 = r116[1];
    |  float r595 = r116[2];
    |  float r596 = r116[3];
    |  vec3 r598 = -(r597);
    |  vec3 r600 = vec3(r593,r594,r595);
    |  vec3 r601 = r599-r600;
    |  float r602 = dot(r598,r601);
    |  float r603 = -(r602);
    |  float r604 = max(r592,r603);
    |  float r605 = r116[0];
    |  float r606 = r116[1];
    |  float r607 = r116[2];
    |  float r608 = r116[3];
    |  vec3 r610 = -(r609);
    |  vec3 r612 = vec3(r605,r606,r607);
    |  vec3 r613 = r611-r612;
    |  float r614 = dot(r610,r613);
    |  float r615 = -(r614);
    |  float r616 = max(r604,r615);
    |  return r616;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = -1.5707963267948966;
    |  vec3 r6 = vec3(0.0,1.0,0.0);
    |  float r37 = 1.0;
    |  float r50 = 1.5707963267948966;
    |  vec3 r51 = vec3(0.0,1.0,0.0);
    |  float r119 = rv_w;
    |  float r120 = 4.0;
    |  float r121 = r119/r120;
    |  vec3 r122 = vec3(r121,0.0,0.0);
    |  float r133 = 0.8;
    |  float r134 = 0.5;
    |  vec3 r135 = vec3(r133,r133,r134);
    |  float r136 = 2.2;
    |  vec3 r137 = vec3(r136);
    |  vec3 r138 = pow(r135,r137);
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r7 = vec3(r1,r2,r3);
    |  float r8 = cos(r5);
    |  vec3 r9 = vec3(r8);
    |  vec3 r10 = r7*r9;
    |  float r11 = r6.y;
    |  float r12 = r7.z;
    |  float r13 = r11*r12;
    |  float r14 = r6.z;
    |  float r15 = r7.y;
    |  float r16 = r14*r15;
    |  float r17 = r13-r16;
    |  float r18 = r6.z;
    |  float r19 = r7.x;
    |  float r20 = r18*r19;
    |  float r21 = r6.x;
    |  float r22 = r7.z;
    |  float r23 = r21*r22;
    |  float r24 = r20-r23;
    |  float r25 = r6.x;
    |  float r26 = r7.y;
    |  float r27 = r25*r26;
    |  float r28 = r6.y;
    |  float r29 = r7.x;
    |  float r30 = r28*r29;
    |  float r31 = r27-r30;
    |  vec3 r32 = vec3(r17,r24,r31);
    |  float r33 = sin(r5);
    |  vec3 r34 = vec3(r33);
    |  vec3 r35 = r32*r34;
    |  vec3 r36 = r10-r35;
    |  float r38 = cos(r5);
    |  float r39 = r37-r38;
    |  vec3 r40 = vec3(r39);
    |  vec3 r41 = r7*r40;
    |  float r42 = dot(r6,r41);
    |  vec3 r43 = vec3(r42);
    |  vec3 r44 = r6*r43;
    |  vec3 r45 = r36+r44;
    |  float r46 = r45.x;
    |  float r47 = r45.y;
    |  float r48 = r45.z;
    |  float r49 = abs(r46);
    |  vec3 r52 = vec3(r49,r47,r48);
    |  float r53 = cos(r50);
    |  vec3 r54 = vec3(r53);
    |  vec3 r55 = r52*r54;
    |  float r56 = r51.y;
    |  float r57 = r52.z;
    |  float r58 = r56*r57;
    |  float r59 = r51.z;
    |  float r60 = r52.y;
    |  float r61 = r59*r60;
    |  float r62 = r58-r61;
    |  float r63 = r51.z;
    |  float r64 = r52.x;
    |  float r65 = r63*r64;
    |  float r66 = r51.x;
    |  float r67 = r52.z;
    |  float r68 = r66*r67;
    |  float r69 = r65-r68;
    |  float r70 = r51.x;
    |  float r71 = r52.y;
    |  float r72 = r70*r71;
    |  float r73 = r51.y;
    |  float r74 = r52.x;
    |  float r75 = r73*r74;
    |  float r76 = r72-r75;
    |  vec3 r77 = vec3(r62,r69,r76);
    |  float r78 = sin(r50);
    |  vec3 r79 = vec3(r78);
    |  vec3 r80 = r77*r79;
    |  vec3 r81 = r55-r80;
    |  float r82 = cos(r50);
    |  float r83 = r37-r82;
    |  vec3 r84 = vec3(r83);
    |  vec3 r85 = r52*r84;
    |  float r86 = dot(r51,r85);
    |  vec3 r87 = vec3(r86);
    |  vec3 r88 = r51*r87;
    |  vec3 r89 = r81+r88;
    |  float r90 = r89.x;
    |  float r91 = r89.y;
    |  float r92 = r89.z;
    |  float r93 = abs(r90);
    |  float r94 = -(r50);
    |  vec2 r95 = vec2(r93,r91);
    |  float r96 = cos(r94);
    |  float r97 = sin(r94);
    |  vec2 r98 = vec2(r96,r97);
    |  float r99 = r95.x;
    |  float r100 = r98.x;
    |  float r101 = r99*r100;
    |  float r102 = r95.y;
    |  float r103 = r98.y;
    |  float r104 = r102*r103;
    |  float r105 = r101-r104;
    |  float r106 = r95.y;
    |  float r107 = r98.x;
    |  float r108 = r106*r107;
    |  float r109 = r95.x;
    |  float r110 = r98.y;
    |  float r111 = r109*r110;
    |  float r112 = r108+r111;
    |  vec2 r113 = vec2(r105,r112);
    |  float r114 = r113.x;
    |  float r115 = r113.y;
    |  float r116 = abs(r114);
    |  vec4 r117 = vec4(r116,r115,r92,r4);
    |  float r118 = r117.x;
    |  float r123 = r122.x;
    |  float r124 = r118-r123;
    |  float r125 = r117.y;
    |  float r126 = r122.y;
    |  float r127 = r125-r126;
    |  float r128 = r117.z;
    |  float r129 = r122.z;
    |  float r130 = r128-r129;
    |  float r131 = r117.w;
    |  vec4 r132 = vec4(r124,r127,r130,r131);
    |  return r138;
    |}
    |const vec3 bbox_min = vec3(-15.000000000000005,-15.000000000000002,-15.000000000000004);
    |const vec3 bbox_max = vec3(15.000000000000005,15.000000000000002,15.000000000000004);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
    {name: "rv_h", type: "float", value: 30, label: "h", config: {slider:[1,100]}};
    {name: "rv_l", type: "float", value: 30, label: "l", config: {slider:[1,100]}};
    {name: "rv_p1", type: "float", value: 1.7, label: "p1", config: {slider:[1,10]}};
    {name: "rv_p2", type: "float", value: 1.7, label: "p2", config: {slider:[1,10]}};
    {name: "rv_t", type: "float", value: 1.7, label: "t", config: {slider:[0.2,10]}};
    {name: "rv_tt", type: "float", value: 5, label: "tt", config: {slider:[1,100]}};
    {name: "rv_ttt", type: "float", value: 5, label: "ttt", config: {slider:[1,15]}};
    {name: "rv_w", type: "float", value: 30, label: "w", config: {slider:[1,100]}};
  ];
}
