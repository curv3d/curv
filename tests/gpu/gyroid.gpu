{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-35,-10,-10],[35,10,10]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(-25.0,0.0,0.0);
    |  float r28 = -1.2;
    |  float r30 = 1.5;
    |  float r57 = 10.0;
    |  float r59 = 0.5;
    |  float r62 = 1.0/0.0;
    |  float r68 = 0.0;
    |  float r69 = 1.0;
    |  vec3 r83 = vec3(0.0,0.0,0.0);
    |  float r110 = 0.1;
    |  vec3 r123 = vec3(25.0,0.0,0.0);
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  vec4 r12 = vec4(r4,r7,r10,r11);
    |  float r13 = r12[0];
    |  float r14 = r12[1];
    |  float r15 = r12[2];
    |  float r16 = r12[3];
    |  float r17 = cos(r13);
    |  float r18 = sin(r14);
    |  float r19 = r17*r18;
    |  float r20 = cos(r14);
    |  float r21 = sin(r15);
    |  float r22 = r20*r21;
    |  float r23 = r19+r22;
    |  float r24 = cos(r15);
    |  float r25 = sin(r13);
    |  float r26 = r24*r25;
    |  float r27 = r23+r26;
    |  float r29 = r27-r28;
    |  float r31 = r29/r30;
    |  float r32 = r12[0];
    |  float r33 = r12[1];
    |  float r34 = r12[2];
    |  float r35 = r12[3];
    |  float r36 = cos(r32);
    |  float r37 = sin(r33);
    |  float r38 = r36*r37;
    |  float r39 = cos(r33);
    |  float r40 = sin(r34);
    |  float r41 = r39*r40;
    |  float r42 = r38+r41;
    |  float r43 = cos(r34);
    |  float r44 = sin(r32);
    |  float r45 = r43*r44;
    |  float r46 = r42+r45;
    |  float r47 = -(r46);
    |  float r48 = r47-r28;
    |  float r49 = r48/r30;
    |  float r50 = min(r31,r49);
    |  float r51 = r12[0];
    |  float r52 = r12[1];
    |  float r53 = r12[2];
    |  float r54 = r12[3];
    |  vec3 r55 = vec3(r51,r52,r53);
    |  float r56 = length(r55);
    |  float r58 = r56-r57;
    |  float r60 = -(r50);
    |  float r61 = -(r58);
    |  bool r63 =(r60 == r62);
    |  float r64 = r61-r60;
    |  float r65 = r59*r64;
    |  float r66 = r65/r59;
    |  float r67 = r59+r66;
    |  float r70 = max(r67,r68);
    |  float r71 = min(r70,r69);
    |  float r72 = r69-r71;
    |  float r73 = r61*r72;
    |  float r74 = r60*r71;
    |  float r75 = r73+r74;
    |  float r76 = r59*r71;
    |  float r77 = r69-r71;
    |  float r78 = r76*r77;
    |  float r79 = r75-r78;
    |  float r80 =(r63 ? r61 : r79);
    |  float r81 = -(r80);
    |  float r82 = r0.x;
    |  float r84 = r83.x;
    |  float r85 = r82-r84;
    |  float r86 = r0.y;
    |  float r87 = r83.y;
    |  float r88 = r86-r87;
    |  float r89 = r0.z;
    |  float r90 = r83.z;
    |  float r91 = r89-r90;
    |  float r92 = r0.w;
    |  vec4 r93 = vec4(r85,r88,r91,r92);
    |  float r94 = r93[0];
    |  float r95 = r93[1];
    |  float r96 = r93[2];
    |  float r97 = r93[3];
    |  float r98 = cos(r94);
    |  float r99 = sin(r95);
    |  float r100 = r98*r99;
    |  float r101 = cos(r95);
    |  float r102 = sin(r96);
    |  float r103 = r101*r102;
    |  float r104 = r100+r103;
    |  float r105 = cos(r96);
    |  float r106 = sin(r94);
    |  float r107 = r105*r106;
    |  float r108 = r104+r107;
    |  float r109 = abs(r108);
    |  float r111 = r109-r110;
    |  float r112 = r111/r30;
    |  float r113 = r93[0];
    |  float r114 = r93[1];
    |  float r115 = r93[2];
    |  float r116 = r93[3];
    |  vec3 r117 = vec3(r113,r114,r115);
    |  float r118 = length(r117);
    |  float r119 = r118-r57;
    |  float r120 = max(r112,r119);
    |  float r121 = min(r81,r120);
    |  float r122 = r0.x;
    |  float r124 = r123.x;
    |  float r125 = r122-r124;
    |  float r126 = r0.y;
    |  float r127 = r123.y;
    |  float r128 = r126-r127;
    |  float r129 = r0.z;
    |  float r130 = r123.z;
    |  float r131 = r129-r130;
    |  float r132 = r0.w;
    |  vec3 r133 = vec3(r125,r128,r131);
    |  float r134 = length(r133);
    |  float r135 = r134-r57;
    |  float r136 = min(r121,r135);
    |  return r136;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(-25.0,0.0,0.0);
    |  float r28 = -1.2;
    |  float r30 = 1.5;
    |  float r57 = 10.0;
    |  float r59 = 0.5;
    |  float r62 = 1.0/0.0;
    |  float r68 = 0.0;
    |  float r69 = 1.0;
    |  vec3 r83 = vec3(0.0,0.0,0.0);
    |  float r110 = 0.1;
    |  vec3 r123 = vec3(25.0,0.0,0.0);
    |  float r166 = 3.0;
    |  float r169 = 2.2;
    |  float r296 = 0.8;
    |  vec3 r297 = vec3(r296,r296,r59);
    |  vec3 r298 = vec3(r169);
    |  vec3 r299 = pow(r297,r298);
    |  vec3 r349 = vec3(0.03227620375301516,0.45626345839647037,0.03227620375301509);
    |  vec3 r350 = vec3(0.07074027770369606,0.07074027770369623,1.0);
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  vec4 r12 = vec4(r4,r7,r10,r11);
    |  float r13 = r12[0];
    |  float r14 = r12[1];
    |  float r15 = r12[2];
    |  float r16 = r12[3];
    |  float r17 = cos(r13);
    |  float r18 = sin(r14);
    |  float r19 = r17*r18;
    |  float r20 = cos(r14);
    |  float r21 = sin(r15);
    |  float r22 = r20*r21;
    |  float r23 = r19+r22;
    |  float r24 = cos(r15);
    |  float r25 = sin(r13);
    |  float r26 = r24*r25;
    |  float r27 = r23+r26;
    |  float r29 = r27-r28;
    |  float r31 = r29/r30;
    |  float r32 = r12[0];
    |  float r33 = r12[1];
    |  float r34 = r12[2];
    |  float r35 = r12[3];
    |  float r36 = cos(r32);
    |  float r37 = sin(r33);
    |  float r38 = r36*r37;
    |  float r39 = cos(r33);
    |  float r40 = sin(r34);
    |  float r41 = r39*r40;
    |  float r42 = r38+r41;
    |  float r43 = cos(r34);
    |  float r44 = sin(r32);
    |  float r45 = r43*r44;
    |  float r46 = r42+r45;
    |  float r47 = -(r46);
    |  float r48 = r47-r28;
    |  float r49 = r48/r30;
    |  float r50 = min(r31,r49);
    |  float r51 = r12[0];
    |  float r52 = r12[1];
    |  float r53 = r12[2];
    |  float r54 = r12[3];
    |  vec3 r55 = vec3(r51,r52,r53);
    |  float r56 = length(r55);
    |  float r58 = r56-r57;
    |  float r60 = -(r50);
    |  float r61 = -(r58);
    |  bool r63 =(r60 == r62);
    |  float r64 = r61-r60;
    |  float r65 = r59*r64;
    |  float r66 = r65/r59;
    |  float r67 = r59+r66;
    |  float r70 = max(r67,r68);
    |  float r71 = min(r70,r69);
    |  float r72 = r69-r71;
    |  float r73 = r61*r72;
    |  float r74 = r60*r71;
    |  float r75 = r73+r74;
    |  float r76 = r59*r71;
    |  float r77 = r69-r71;
    |  float r78 = r76*r77;
    |  float r79 = r75-r78;
    |  float r80 =(r63 ? r61 : r79);
    |  float r81 = -(r80);
    |  float r82 = r0.x;
    |  float r84 = r83.x;
    |  float r85 = r82-r84;
    |  float r86 = r0.y;
    |  float r87 = r83.y;
    |  float r88 = r86-r87;
    |  float r89 = r0.z;
    |  float r90 = r83.z;
    |  float r91 = r89-r90;
    |  float r92 = r0.w;
    |  vec4 r93 = vec4(r85,r88,r91,r92);
    |  float r94 = r93[0];
    |  float r95 = r93[1];
    |  float r96 = r93[2];
    |  float r97 = r93[3];
    |  float r98 = cos(r94);
    |  float r99 = sin(r95);
    |  float r100 = r98*r99;
    |  float r101 = cos(r95);
    |  float r102 = sin(r96);
    |  float r103 = r101*r102;
    |  float r104 = r100+r103;
    |  float r105 = cos(r96);
    |  float r106 = sin(r94);
    |  float r107 = r105*r106;
    |  float r108 = r104+r107;
    |  float r109 = abs(r108);
    |  float r111 = r109-r110;
    |  float r112 = r111/r30;
    |  float r113 = r93[0];
    |  float r114 = r93[1];
    |  float r115 = r93[2];
    |  float r116 = r93[3];
    |  vec3 r117 = vec3(r113,r114,r115);
    |  float r118 = length(r117);
    |  float r119 = r118-r57;
    |  float r120 = max(r112,r119);
    |  float r121 = min(r81,r120);
    |  float r122 = r0.x;
    |  float r124 = r123.x;
    |  float r125 = r122-r124;
    |  float r126 = r0.y;
    |  float r127 = r123.y;
    |  float r128 = r126-r127;
    |  float r129 = r0.z;
    |  float r130 = r123.z;
    |  float r131 = r129-r130;
    |  float r132 = r0.w;
    |  vec3 r133 = vec3(r125,r128,r131);
    |  float r134 = length(r133);
    |  float r135 = r134-r57;
    |  bool r136 = r135<=r68;
    |  bool r137 = r135<=r121;
    |  bool r138 =(r136 || r137);
    |  float r139 = r0.x;
    |  float r140 = r123.x;
    |  float r141 = r139-r140;
    |  float r142 = r0.y;
    |  float r143 = r123.y;
    |  float r144 = r142-r143;
    |  float r145 = r0.z;
    |  float r146 = r123.z;
    |  float r147 = r145-r146;
    |  float r148 = r0.w;
    |  vec4 r149 = vec4(r141,r144,r147,r148);
    |  float r150 = r149[0];
    |  float r151 = r149[1];
    |  float r152 = r149[2];
    |  float r153 = r149[3];
    |  float r154 = cos(r150);
    |  float r155 = sin(r151);
    |  float r156 = r154*r155;
    |  float r157 = cos(r151);
    |  float r158 = sin(r152);
    |  float r159 = r157*r158;
    |  float r160 = r156+r159;
    |  float r161 = cos(r152);
    |  float r162 = sin(r150);
    |  float r163 = r161*r162;
    |  float r164 = r160+r163;
    |  float r165 = r164+r30;
    |  float r167 = r165/r166;
    |  vec3 r168 = vec3(r167,r167,r167);
    |  vec3 r170 = vec3(r169);
    |  vec3 r171 = pow(r168,r170);
    |  float r172 = r0.x;
    |  float r173 = r2.x;
    |  float r174 = r172-r173;
    |  float r175 = r0.y;
    |  float r176 = r2.y;
    |  float r177 = r175-r176;
    |  float r178 = r0.z;
    |  float r179 = r2.z;
    |  float r180 = r178-r179;
    |  float r181 = r0.w;
    |  vec4 r182 = vec4(r174,r177,r180,r181);
    |  float r183 = r182[0];
    |  float r184 = r182[1];
    |  float r185 = r182[2];
    |  float r186 = r182[3];
    |  float r187 = cos(r183);
    |  float r188 = sin(r184);
    |  float r189 = r187*r188;
    |  float r190 = cos(r184);
    |  float r191 = sin(r185);
    |  float r192 = r190*r191;
    |  float r193 = r189+r192;
    |  float r194 = cos(r185);
    |  float r195 = sin(r183);
    |  float r196 = r194*r195;
    |  float r197 = r193+r196;
    |  float r198 = r197-r28;
    |  float r199 = r198/r30;
    |  float r200 = r182[0];
    |  float r201 = r182[1];
    |  float r202 = r182[2];
    |  float r203 = r182[3];
    |  float r204 = cos(r200);
    |  float r205 = sin(r201);
    |  float r206 = r204*r205;
    |  float r207 = cos(r201);
    |  float r208 = sin(r202);
    |  float r209 = r207*r208;
    |  float r210 = r206+r209;
    |  float r211 = cos(r202);
    |  float r212 = sin(r200);
    |  float r213 = r211*r212;
    |  float r214 = r210+r213;
    |  float r215 = -(r214);
    |  float r216 = r215-r28;
    |  float r217 = r216/r30;
    |  float r218 = min(r199,r217);
    |  float r219 = r182[0];
    |  float r220 = r182[1];
    |  float r221 = r182[2];
    |  float r222 = r182[3];
    |  vec3 r223 = vec3(r219,r220,r221);
    |  float r224 = length(r223);
    |  float r225 = r224-r57;
    |  float r226 = -(r218);
    |  float r227 = -(r225);
    |  bool r228 =(r226 == r62);
    |  float r229 = r227-r226;
    |  float r230 = r59*r229;
    |  float r231 = r230/r59;
    |  float r232 = r59+r231;
    |  float r233 = max(r232,r68);
    |  float r234 = min(r233,r69);
    |  float r235 = r69-r234;
    |  float r236 = r227*r235;
    |  float r237 = r226*r234;
    |  float r238 = r236+r237;
    |  float r239 = r59*r234;
    |  float r240 = r69-r234;
    |  float r241 = r239*r240;
    |  float r242 = r238-r241;
    |  float r243 =(r228 ? r227 : r242);
    |  float r244 = -(r243);
    |  float r245 = r0.x;
    |  float r246 = r83.x;
    |  float r247 = r245-r246;
    |  float r248 = r0.y;
    |  float r249 = r83.y;
    |  float r250 = r248-r249;
    |  float r251 = r0.z;
    |  float r252 = r83.z;
    |  float r253 = r251-r252;
    |  float r254 = r0.w;
    |  vec4 r255 = vec4(r247,r250,r253,r254);
    |  float r256 = r255[0];
    |  float r257 = r255[1];
    |  float r258 = r255[2];
    |  float r259 = r255[3];
    |  float r260 = cos(r256);
    |  float r261 = sin(r257);
    |  float r262 = r260*r261;
    |  float r263 = cos(r257);
    |  float r264 = sin(r258);
    |  float r265 = r263*r264;
    |  float r266 = r262+r265;
    |  float r267 = cos(r258);
    |  float r268 = sin(r256);
    |  float r269 = r267*r268;
    |  float r270 = r266+r269;
    |  float r271 = abs(r270);
    |  float r272 = r271-r110;
    |  float r273 = r272/r30;
    |  float r274 = r255[0];
    |  float r275 = r255[1];
    |  float r276 = r255[2];
    |  float r277 = r255[3];
    |  vec3 r278 = vec3(r274,r275,r276);
    |  float r279 = length(r278);
    |  float r280 = r279-r57;
    |  float r281 = max(r273,r280);
    |  bool r282 = r281<=r68;
    |  bool r283 = r281<=r244;
    |  bool r284 =(r282 || r283);
    |  float r285 = r0.x;
    |  float r286 = r83.x;
    |  float r287 = r285-r286;
    |  float r288 = r0.y;
    |  float r289 = r83.y;
    |  float r290 = r288-r289;
    |  float r291 = r0.z;
    |  float r292 = r83.z;
    |  float r293 = r291-r292;
    |  float r294 = r0.w;
    |  vec4 r295 = vec4(r287,r290,r293,r294);
    |  float r300 = r0.x;
    |  float r301 = r2.x;
    |  float r302 = r300-r301;
    |  float r303 = r0.y;
    |  float r304 = r2.y;
    |  float r305 = r303-r304;
    |  float r306 = r0.z;
    |  float r307 = r2.z;
    |  float r308 = r306-r307;
    |  float r309 = r0.w;
    |  vec4 r310 = vec4(r302,r305,r308,r309);
    |  float r311 = r310[0];
    |  float r312 = r310[1];
    |  float r313 = r310[2];
    |  float r314 = r310[3];
    |  float r315 = cos(r311);
    |  float r316 = sin(r312);
    |  float r317 = r315*r316;
    |  float r318 = cos(r312);
    |  float r319 = sin(r313);
    |  float r320 = r318*r319;
    |  float r321 = r317+r320;
    |  float r322 = cos(r313);
    |  float r323 = sin(r311);
    |  float r324 = r322*r323;
    |  float r325 = r321+r324;
    |  float r326 = r325-r28;
    |  float r327 = r326/r30;
    |  float r328 = r310[0];
    |  float r329 = r310[1];
    |  float r330 = r310[2];
    |  float r331 = r310[3];
    |  float r332 = cos(r328);
    |  float r333 = sin(r329);
    |  float r334 = r332*r333;
    |  float r335 = cos(r329);
    |  float r336 = sin(r330);
    |  float r337 = r335*r336;
    |  float r338 = r334+r337;
    |  float r339 = cos(r330);
    |  float r340 = sin(r328);
    |  float r341 = r339*r340;
    |  float r342 = r338+r341;
    |  float r343 = -(r342);
    |  float r344 = r343-r28;
    |  float r345 = r344/r30;
    |  bool r346 = r345<=r68;
    |  bool r347 = r345<=r327;
    |  bool r348 =(r346 || r347);
    |  vec3 r351 =(r348 ? r349 : r350);
    |  vec3 r352 =(r284 ? r299 : r351);
    |  vec3 r353 =(r138 ? r171 : r352);
    |  return r353;
    |}
    |const vec3 bbox_min = vec3(-35.0,-10.0,-10.0);
    |const vec3 bbox_max = vec3(35.0,10.0,10.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
