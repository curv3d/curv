{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-1.5811388300841895,-1.5811388300841895,-1.5],[1.5811388300841895,1.5811388300841895,1.5]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r3 = 2.0943951023931953;
    |  float r28 = 1.5707963267948966;
    |  vec3 r29 = vec3(0.0,1.0,0.0);
    |  float r60 = 1.0;
    |  float r72 = 0.0;
    |  float r78 = 0.5;
    |  float r80 = 2.2;
    |  /* body */
    |  vec2 r1 = r0.xy;
    |  float r2 = r0.z;
    |  float r4 = -(r3);
    |  float r5 = r2*r4;
    |  float r6 = cos(r5);
    |  float r7 = sin(r5);
    |  vec2 r8 = vec2(r6,r7);
    |  float r9 = r1.x;
    |  float r10 = r8.x;
    |  float r11 = r9*r10;
    |  float r12 = r1.y;
    |  float r13 = r8.y;
    |  float r14 = r12*r13;
    |  float r15 = r11-r14;
    |  float r16 = r1.y;
    |  float r17 = r8.x;
    |  float r18 = r16*r17;
    |  float r19 = r1.x;
    |  float r20 = r8.y;
    |  float r21 = r19*r20;
    |  float r22 = r18+r21;
    |  vec2 r23 = vec2(r15,r22);
    |  float r24 = r23.x;
    |  float r25 = r23.y;
    |  float r26 = r0.z;
    |  float r27 = r0.w;
    |  vec3 r30 = vec3(r24,r25,r26);
    |  float r31 = cos(r28);
    |  vec3 r32 = vec3(r31);
    |  vec3 r33 = r30*r32;
    |  float r34 = r29.y;
    |  float r35 = r30.z;
    |  float r36 = r34*r35;
    |  float r37 = r29.z;
    |  float r38 = r30.y;
    |  float r39 = r37*r38;
    |  float r40 = r36-r39;
    |  float r41 = r29.z;
    |  float r42 = r30.x;
    |  float r43 = r41*r42;
    |  float r44 = r29.x;
    |  float r45 = r30.z;
    |  float r46 = r44*r45;
    |  float r47 = r43-r46;
    |  float r48 = r29.x;
    |  float r49 = r30.y;
    |  float r50 = r48*r49;
    |  float r51 = r29.y;
    |  float r52 = r30.x;
    |  float r53 = r51*r52;
    |  float r54 = r50-r53;
    |  vec3 r55 = vec3(r40,r47,r54);
    |  float r56 = sin(r28);
    |  vec3 r57 = vec3(r56);
    |  vec3 r58 = r55*r57;
    |  vec3 r59 = r33-r58;
    |  float r61 = cos(r28);
    |  float r62 = r60-r61;
    |  vec3 r63 = vec3(r62);
    |  vec3 r64 = r30*r63;
    |  float r65 = dot(r29,r64);
    |  vec3 r66 = vec3(r65);
    |  vec3 r67 = r29*r66;
    |  vec3 r68 = r59+r67;
    |  float r69 = r68.x;
    |  float r70 = r68.y;
    |  float r71 = r68.z;
    |  vec2 r73 = vec2(r69,r70);
    |  float r74 = length(r73);
    |  float r75 = r74-r60;
    |  vec2 r76 = vec2(r75,r71);
    |  float r77 = length(r76);
    |  float r79 = r77-r78;
    |  float r81 = r79/r80;
    |  return r81;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r3 = 2.0943951023931953;
    |  float r28 = 1.5707963267948966;
    |  vec3 r29 = vec3(0.0,1.0,0.0);
    |  float r60 = 1.0;
    |  float r79 = 6.283185307179586;
    |  float r81 = 0.25;
    |  float r88 = 8.0;
    |  float r95 = 2.0;
    |  float r96 = 3.0;
    |  float r97 = r95/r96;
    |  float r98 = r60/r96;
    |  vec3 r99 = vec3(r60,r97,r98);
    |  float r108 = 6.0;
    |  float r116 = 0.0;
    |  float r129 = 2.2;
    |  /* body */
    |  vec2 r1 = r0.xy;
    |  float r2 = r0.z;
    |  float r4 = -(r3);
    |  float r5 = r2*r4;
    |  float r6 = cos(r5);
    |  float r7 = sin(r5);
    |  vec2 r8 = vec2(r6,r7);
    |  float r9 = r1.x;
    |  float r10 = r8.x;
    |  float r11 = r9*r10;
    |  float r12 = r1.y;
    |  float r13 = r8.y;
    |  float r14 = r12*r13;
    |  float r15 = r11-r14;
    |  float r16 = r1.y;
    |  float r17 = r8.x;
    |  float r18 = r16*r17;
    |  float r19 = r1.x;
    |  float r20 = r8.y;
    |  float r21 = r19*r20;
    |  float r22 = r18+r21;
    |  vec2 r23 = vec2(r15,r22);
    |  float r24 = r23.x;
    |  float r25 = r23.y;
    |  float r26 = r0.z;
    |  float r27 = r0.w;
    |  vec3 r30 = vec3(r24,r25,r26);
    |  float r31 = cos(r28);
    |  vec3 r32 = vec3(r31);
    |  vec3 r33 = r30*r32;
    |  float r34 = r29.y;
    |  float r35 = r30.z;
    |  float r36 = r34*r35;
    |  float r37 = r29.z;
    |  float r38 = r30.y;
    |  float r39 = r37*r38;
    |  float r40 = r36-r39;
    |  float r41 = r29.z;
    |  float r42 = r30.x;
    |  float r43 = r41*r42;
    |  float r44 = r29.x;
    |  float r45 = r30.z;
    |  float r46 = r44*r45;
    |  float r47 = r43-r46;
    |  float r48 = r29.x;
    |  float r49 = r30.y;
    |  float r50 = r48*r49;
    |  float r51 = r29.y;
    |  float r52 = r30.x;
    |  float r53 = r51*r52;
    |  float r54 = r50-r53;
    |  vec3 r55 = vec3(r40,r47,r54);
    |  float r56 = sin(r28);
    |  vec3 r57 = vec3(r56);
    |  vec3 r58 = r55*r57;
    |  vec3 r59 = r33-r58;
    |  float r61 = cos(r28);
    |  float r62 = r60-r61;
    |  vec3 r63 = vec3(r62);
    |  vec3 r64 = r30*r63;
    |  float r65 = dot(r29,r64);
    |  vec3 r66 = vec3(r65);
    |  vec3 r67 = r29*r66;
    |  vec3 r68 = r59+r67;
    |  float r69 = r68.x;
    |  float r70 = r68.y;
    |  float r71 = r68.z;
    |  vec4 r72 = vec4(r69,r70,r71,r27);
    |  float r73 = r72[0];
    |  float r74 = r72[1];
    |  float r75 = r72[2];
    |  float r76 = r72[3];
    |  vec2 r77 = vec2(r73,r74);
    |  float r78 = atan(r77.y,r77.x);
    |  float r80 = r78/r79;
    |  float r82 = r80-r81;
    |  float r83 = r82*r60;
    |  float r84 = r83/r60;
    |  float r85 = floor(r84);
    |  float r86 = r60*r85;
    |  float r87 = r83-r86;
    |  float r89 = r76/r88;
    |  float r90 = r87+r89;
    |  float r91 = r90/r60;
    |  float r92 = floor(r91);
    |  float r93 = r60*r92;
    |  float r94 = r90-r93;
    |  vec3 r100 = vec3(r94);
    |  vec3 r101 = r100+r99;
    |  vec3 r102 = vec3(r60);
    |  vec3 r103 = r101/r102;
    |  vec3 r104 = floor(r103);
    |  vec3 r105 = vec3(r60);
    |  vec3 r106 = r105*r104;
    |  vec3 r107 = r101-r106;
    |  vec3 r109 = vec3(r108);
    |  vec3 r110 = r107*r109;
    |  vec3 r111 = vec3(r96);
    |  vec3 r112 = r110-r111;
    |  vec3 r113 = abs(r112);
    |  vec3 r114 = vec3(r60);
    |  vec3 r115 = r113-r114;
    |  vec3 r117 = vec3(r116);
    |  vec3 r118 = max(r115,r117);
    |  vec3 r119 = vec3(r60);
    |  vec3 r120 = min(r118,r119);
    |  float r121 = r60-r60;
    |  float r122 = r60*r121;
    |  vec3 r123 = vec3(r60);
    |  vec3 r124 = r120*r123;
    |  vec3 r125 = vec3(r122);
    |  vec3 r126 = r125+r124;
    |  vec3 r127 = vec3(r60);
    |  vec3 r128 = r127*r126;
    |  vec3 r130 = vec3(r129);
    |  vec3 r131 = pow(r128,r130);
    |  return r131;
    |}
    |const vec3 bbox_min = vec3(-1.5811388300841895,-1.5811388300841895,-1.5);
    |const vec3 bbox_max = vec3(1.5811388300841895,1.5811388300841895,1.5);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
