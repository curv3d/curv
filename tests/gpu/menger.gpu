{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-1,-1,-1],[1,1,1]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r7 = vec3(1.0,1.0,1.0);
    |  float r14 = 0.0;
    |  vec2 r24 = vec2(1.0,1.0);
    |  float r27 = 2.0;
    |  float r49 = 1.0/0.0;
    |  vec2 r56 = vec2(0.3333333333333333,0.3333333333333333);
    |  vec2 r77 = vec2(0.3333333333333333,0.3333333333333333);
    |  vec2 r107 = vec2(0.1111111111111111,0.1111111111111111);
    |  vec2 r129 = vec2(0.1111111111111111,0.1111111111111111);
    |  vec2 r159 = vec2(0.037037037037037035,0.037037037037037035);
    |  vec2 r181 = vec2(0.037037037037037035,0.037037037037037035);
    |  vec2 r211 = vec2(0.012345679012345678,0.012345679012345678);
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r5 = vec3(r1,r2,r3);
    |  vec3 r6 = abs(r5);
    |  vec3 r8 = r6-r7;
    |  float r9 = r8[0];
    |  float r10 = r8[1];
    |  float r11 = max(r9,r10);
    |  float r12 = r8[2];
    |  float r13 = max(r11,r12);
    |  float r15 = min(r13,r14);
    |  vec3 r16 = vec3(r14);
    |  vec3 r17 = max(r8,r16);
    |  float r18 = length(r17);
    |  float r19 = r15+r18;
    |  float r20 = r0[0];
    |  float r21 = r0[1];
    |  float r22 = r0[2];
    |  float r23 = r0[3];
    |  float r25 = r24.x;
    |  float r26 = r20+r25;
    |  float r28 = r24.x;
    |  float r29 = r27*r28;
    |  float r30 = r26/r29;
    |  float r31 = floor(r30);
    |  float r32 = r29*r31;
    |  float r33 = r26-r32;
    |  float r34 = r24.x;
    |  float r35 = r33-r34;
    |  float r36 = r24.y;
    |  float r37 = r21+r36;
    |  float r38 = r24.y;
    |  float r39 = r27*r38;
    |  float r40 = r37/r39;
    |  float r41 = floor(r40);
    |  float r42 = r39*r41;
    |  float r43 = r37-r42;
    |  float r44 = r24.y;
    |  float r45 = r43-r44;
    |  vec4 r46 = vec4(r35,r45,r22,r23);
    |  float r47 = r46.z;
    |  float r48 = abs(r47);
    |  float r50 = r48-r49;
    |  float r51 = r46.x;
    |  float r52 = r46.y;
    |  float r53 = r46.w;
    |  vec2 r54 = vec2(r51,r52);
    |  vec2 r55 = abs(r54);
    |  vec2 r57 = r55-r56;
    |  float r58 = r57[0];
    |  float r59 = r57[1];
    |  float r60 = max(r58,r59);
    |  float r61 = min(r60,r14);
    |  vec2 r62 = vec2(r14);
    |  vec2 r63 = max(r57,r62);
    |  float r64 = length(r63);
    |  float r65 = r61+r64;
    |  vec2 r66 = vec2(r50,r65);
    |  vec2 r67 = vec2(r14);
    |  vec2 r68 = max(r66,r67);
    |  float r69 = length(r68);
    |  float r70 = max(r50,r65);
    |  float r71 = min(r70,r14);
    |  float r72 = r69+r71;
    |  float r73 = r0[0];
    |  float r74 = r0[1];
    |  float r75 = r0[2];
    |  float r76 = r0[3];
    |  float r78 = r77.x;
    |  float r79 = r73+r78;
    |  float r80 = r77.x;
    |  float r81 = r27*r80;
    |  float r82 = r79/r81;
    |  float r83 = floor(r82);
    |  float r84 = r81*r83;
    |  float r85 = r79-r84;
    |  float r86 = r77.x;
    |  float r87 = r85-r86;
    |  float r88 = r77.y;
    |  float r89 = r74+r88;
    |  float r90 = r77.y;
    |  float r91 = r27*r90;
    |  float r92 = r89/r91;
    |  float r93 = floor(r92);
    |  float r94 = r91*r93;
    |  float r95 = r89-r94;
    |  float r96 = r77.y;
    |  float r97 = r95-r96;
    |  vec4 r98 = vec4(r87,r97,r75,r76);
    |  float r99 = r98.z;
    |  float r100 = abs(r99);
    |  float r101 = r100-r49;
    |  float r102 = r98.x;
    |  float r103 = r98.y;
    |  float r104 = r98.w;
    |  vec2 r105 = vec2(r102,r103);
    |  vec2 r106 = abs(r105);
    |  vec2 r108 = r106-r107;
    |  float r109 = r108[0];
    |  float r110 = r108[1];
    |  float r111 = max(r109,r110);
    |  float r112 = min(r111,r14);
    |  vec2 r113 = vec2(r14);
    |  vec2 r114 = max(r108,r113);
    |  float r115 = length(r114);
    |  float r116 = r112+r115;
    |  vec2 r117 = vec2(r101,r116);
    |  vec2 r118 = vec2(r14);
    |  vec2 r119 = max(r117,r118);
    |  float r120 = length(r119);
    |  float r121 = max(r101,r116);
    |  float r122 = min(r121,r14);
    |  float r123 = r120+r122;
    |  float r124 = min(r72,r123);
    |  float r125 = r0[0];
    |  float r126 = r0[1];
    |  float r127 = r0[2];
    |  float r128 = r0[3];
    |  float r130 = r129.x;
    |  float r131 = r125+r130;
    |  float r132 = r129.x;
    |  float r133 = r27*r132;
    |  float r134 = r131/r133;
    |  float r135 = floor(r134);
    |  float r136 = r133*r135;
    |  float r137 = r131-r136;
    |  float r138 = r129.x;
    |  float r139 = r137-r138;
    |  float r140 = r129.y;
    |  float r141 = r126+r140;
    |  float r142 = r129.y;
    |  float r143 = r27*r142;
    |  float r144 = r141/r143;
    |  float r145 = floor(r144);
    |  float r146 = r143*r145;
    |  float r147 = r141-r146;
    |  float r148 = r129.y;
    |  float r149 = r147-r148;
    |  vec4 r150 = vec4(r139,r149,r127,r128);
    |  float r151 = r150.z;
    |  float r152 = abs(r151);
    |  float r153 = r152-r49;
    |  float r154 = r150.x;
    |  float r155 = r150.y;
    |  float r156 = r150.w;
    |  vec2 r157 = vec2(r154,r155);
    |  vec2 r158 = abs(r157);
    |  vec2 r160 = r158-r159;
    |  float r161 = r160[0];
    |  float r162 = r160[1];
    |  float r163 = max(r161,r162);
    |  float r164 = min(r163,r14);
    |  vec2 r165 = vec2(r14);
    |  vec2 r166 = max(r160,r165);
    |  float r167 = length(r166);
    |  float r168 = r164+r167;
    |  vec2 r169 = vec2(r153,r168);
    |  vec2 r170 = vec2(r14);
    |  vec2 r171 = max(r169,r170);
    |  float r172 = length(r171);
    |  float r173 = max(r153,r168);
    |  float r174 = min(r173,r14);
    |  float r175 = r172+r174;
    |  float r176 = min(r124,r175);
    |  float r177 = r0[0];
    |  float r178 = r0[1];
    |  float r179 = r0[2];
    |  float r180 = r0[3];
    |  float r182 = r181.x;
    |  float r183 = r177+r182;
    |  float r184 = r181.x;
    |  float r185 = r27*r184;
    |  float r186 = r183/r185;
    |  float r187 = floor(r186);
    |  float r188 = r185*r187;
    |  float r189 = r183-r188;
    |  float r190 = r181.x;
    |  float r191 = r189-r190;
    |  float r192 = r181.y;
    |  float r193 = r178+r192;
    |  float r194 = r181.y;
    |  float r195 = r27*r194;
    |  float r196 = r193/r195;
    |  float r197 = floor(r196);
    |  float r198 = r195*r197;
    |  float r199 = r193-r198;
    |  float r200 = r181.y;
    |  float r201 = r199-r200;
    |  vec4 r202 = vec4(r191,r201,r179,r180);
    |  float r203 = r202.z;
    |  float r204 = abs(r203);
    |  float r205 = r204-r49;
    |  float r206 = r202.x;
    |  float r207 = r202.y;
    |  float r208 = r202.w;
    |  vec2 r209 = vec2(r206,r207);
    |  vec2 r210 = abs(r209);
    |  vec2 r212 = r210-r211;
    |  float r213 = r212[0];
    |  float r214 = r212[1];
    |  float r215 = max(r213,r214);
    |  float r216 = min(r215,r14);
    |  vec2 r217 = vec2(r14);
    |  vec2 r218 = max(r212,r217);
    |  float r219 = length(r218);
    |  float r220 = r216+r219;
    |  vec2 r221 = vec2(r205,r220);
    |  vec2 r222 = vec2(r14);
    |  vec2 r223 = max(r221,r222);
    |  float r224 = length(r223);
    |  float r225 = max(r205,r220);
    |  float r226 = min(r225,r14);
    |  float r227 = r224+r226;
    |  float r228 = min(r176,r227);
    |  float r229 = -(r228);
    |  float r230 = max(r19,r229);
    |  float r231 = r0[0];
    |  float r232 = r0[1];
    |  float r233 = r0[2];
    |  float r234 = r0[3];
    |  vec4 r235 = vec4(r231,r233,r232,r234);
    |  float r236 = r235[0];
    |  float r237 = r235[1];
    |  float r238 = r235[2];
    |  float r239 = r235[3];
    |  float r240 = r24.x;
    |  float r241 = r236+r240;
    |  float r242 = r24.x;
    |  float r243 = r27*r242;
    |  float r244 = r241/r243;
    |  float r245 = floor(r244);
    |  float r246 = r243*r245;
    |  float r247 = r241-r246;
    |  float r248 = r24.x;
    |  float r249 = r247-r248;
    |  float r250 = r24.y;
    |  float r251 = r237+r250;
    |  float r252 = r24.y;
    |  float r253 = r27*r252;
    |  float r254 = r251/r253;
    |  float r255 = floor(r254);
    |  float r256 = r253*r255;
    |  float r257 = r251-r256;
    |  float r258 = r24.y;
    |  float r259 = r257-r258;
    |  vec4 r260 = vec4(r249,r259,r238,r239);
    |  float r261 = r260.z;
    |  float r262 = abs(r261);
    |  float r263 = r262-r49;
    |  float r264 = r260.x;
    |  float r265 = r260.y;
    |  float r266 = r260.w;
    |  vec2 r267 = vec2(r264,r265);
    |  vec2 r268 = abs(r267);
    |  vec2 r269 = r268-r56;
    |  float r270 = r269[0];
    |  float r271 = r269[1];
    |  float r272 = max(r270,r271);
    |  float r273 = min(r272,r14);
    |  vec2 r274 = vec2(r14);
    |  vec2 r275 = max(r269,r274);
    |  float r276 = length(r275);
    |  float r277 = r273+r276;
    |  vec2 r278 = vec2(r263,r277);
    |  vec2 r279 = vec2(r14);
    |  vec2 r280 = max(r278,r279);
    |  float r281 = length(r280);
    |  float r282 = max(r263,r277);
    |  float r283 = min(r282,r14);
    |  float r284 = r281+r283;
    |  float r285 = r235[0];
    |  float r286 = r235[1];
    |  float r287 = r235[2];
    |  float r288 = r235[3];
    |  float r289 = r77.x;
    |  float r290 = r285+r289;
    |  float r291 = r77.x;
    |  float r292 = r27*r291;
    |  float r293 = r290/r292;
    |  float r294 = floor(r293);
    |  float r295 = r292*r294;
    |  float r296 = r290-r295;
    |  float r297 = r77.x;
    |  float r298 = r296-r297;
    |  float r299 = r77.y;
    |  float r300 = r286+r299;
    |  float r301 = r77.y;
    |  float r302 = r27*r301;
    |  float r303 = r300/r302;
    |  float r304 = floor(r303);
    |  float r305 = r302*r304;
    |  float r306 = r300-r305;
    |  float r307 = r77.y;
    |  float r308 = r306-r307;
    |  vec4 r309 = vec4(r298,r308,r287,r288);
    |  float r310 = r309.z;
    |  float r311 = abs(r310);
    |  float r312 = r311-r49;
    |  float r313 = r309.x;
    |  float r314 = r309.y;
    |  float r315 = r309.w;
    |  vec2 r316 = vec2(r313,r314);
    |  vec2 r317 = abs(r316);
    |  vec2 r318 = r317-r107;
    |  float r319 = r318[0];
    |  float r320 = r318[1];
    |  float r321 = max(r319,r320);
    |  float r322 = min(r321,r14);
    |  vec2 r323 = vec2(r14);
    |  vec2 r324 = max(r318,r323);
    |  float r325 = length(r324);
    |  float r326 = r322+r325;
    |  vec2 r327 = vec2(r312,r326);
    |  vec2 r328 = vec2(r14);
    |  vec2 r329 = max(r327,r328);
    |  float r330 = length(r329);
    |  float r331 = max(r312,r326);
    |  float r332 = min(r331,r14);
    |  float r333 = r330+r332;
    |  float r334 = min(r284,r333);
    |  float r335 = r235[0];
    |  float r336 = r235[1];
    |  float r337 = r235[2];
    |  float r338 = r235[3];
    |  float r339 = r129.x;
    |  float r340 = r335+r339;
    |  float r341 = r129.x;
    |  float r342 = r27*r341;
    |  float r343 = r340/r342;
    |  float r344 = floor(r343);
    |  float r345 = r342*r344;
    |  float r346 = r340-r345;
    |  float r347 = r129.x;
    |  float r348 = r346-r347;
    |  float r349 = r129.y;
    |  float r350 = r336+r349;
    |  float r351 = r129.y;
    |  float r352 = r27*r351;
    |  float r353 = r350/r352;
    |  float r354 = floor(r353);
    |  float r355 = r352*r354;
    |  float r356 = r350-r355;
    |  float r357 = r129.y;
    |  float r358 = r356-r357;
    |  vec4 r359 = vec4(r348,r358,r337,r338);
    |  float r360 = r359.z;
    |  float r361 = abs(r360);
    |  float r362 = r361-r49;
    |  float r363 = r359.x;
    |  float r364 = r359.y;
    |  float r365 = r359.w;
    |  vec2 r366 = vec2(r363,r364);
    |  vec2 r367 = abs(r366);
    |  vec2 r368 = r367-r159;
    |  float r369 = r368[0];
    |  float r370 = r368[1];
    |  float r371 = max(r369,r370);
    |  float r372 = min(r371,r14);
    |  vec2 r373 = vec2(r14);
    |  vec2 r374 = max(r368,r373);
    |  float r375 = length(r374);
    |  float r376 = r372+r375;
    |  vec2 r377 = vec2(r362,r376);
    |  vec2 r378 = vec2(r14);
    |  vec2 r379 = max(r377,r378);
    |  float r380 = length(r379);
    |  float r381 = max(r362,r376);
    |  float r382 = min(r381,r14);
    |  float r383 = r380+r382;
    |  float r384 = min(r334,r383);
    |  float r385 = r235[0];
    |  float r386 = r235[1];
    |  float r387 = r235[2];
    |  float r388 = r235[3];
    |  float r389 = r181.x;
    |  float r390 = r385+r389;
    |  float r391 = r181.x;
    |  float r392 = r27*r391;
    |  float r393 = r390/r392;
    |  float r394 = floor(r393);
    |  float r395 = r392*r394;
    |  float r396 = r390-r395;
    |  float r397 = r181.x;
    |  float r398 = r396-r397;
    |  float r399 = r181.y;
    |  float r400 = r386+r399;
    |  float r401 = r181.y;
    |  float r402 = r27*r401;
    |  float r403 = r400/r402;
    |  float r404 = floor(r403);
    |  float r405 = r402*r404;
    |  float r406 = r400-r405;
    |  float r407 = r181.y;
    |  float r408 = r406-r407;
    |  vec4 r409 = vec4(r398,r408,r387,r388);
    |  float r410 = r409.z;
    |  float r411 = abs(r410);
    |  float r412 = r411-r49;
    |  float r413 = r409.x;
    |  float r414 = r409.y;
    |  float r415 = r409.w;
    |  vec2 r416 = vec2(r413,r414);
    |  vec2 r417 = abs(r416);
    |  vec2 r418 = r417-r211;
    |  float r419 = r418[0];
    |  float r420 = r418[1];
    |  float r421 = max(r419,r420);
    |  float r422 = min(r421,r14);
    |  vec2 r423 = vec2(r14);
    |  vec2 r424 = max(r418,r423);
    |  float r425 = length(r424);
    |  float r426 = r422+r425;
    |  vec2 r427 = vec2(r412,r426);
    |  vec2 r428 = vec2(r14);
    |  vec2 r429 = max(r427,r428);
    |  float r430 = length(r429);
    |  float r431 = max(r412,r426);
    |  float r432 = min(r431,r14);
    |  float r433 = r430+r432;
    |  float r434 = min(r384,r433);
    |  float r435 = -(r434);
    |  float r436 = max(r230,r435);
    |  float r437 = r0[0];
    |  float r438 = r0[1];
    |  float r439 = r0[2];
    |  float r440 = r0[3];
    |  vec4 r441 = vec4(r439,r438,r437,r440);
    |  float r442 = r441[0];
    |  float r443 = r441[1];
    |  float r444 = r441[2];
    |  float r445 = r441[3];
    |  float r446 = r24.x;
    |  float r447 = r442+r446;
    |  float r448 = r24.x;
    |  float r449 = r27*r448;
    |  float r450 = r447/r449;
    |  float r451 = floor(r450);
    |  float r452 = r449*r451;
    |  float r453 = r447-r452;
    |  float r454 = r24.x;
    |  float r455 = r453-r454;
    |  float r456 = r24.y;
    |  float r457 = r443+r456;
    |  float r458 = r24.y;
    |  float r459 = r27*r458;
    |  float r460 = r457/r459;
    |  float r461 = floor(r460);
    |  float r462 = r459*r461;
    |  float r463 = r457-r462;
    |  float r464 = r24.y;
    |  float r465 = r463-r464;
    |  vec4 r466 = vec4(r455,r465,r444,r445);
    |  float r467 = r466.z;
    |  float r468 = abs(r467);
    |  float r469 = r468-r49;
    |  float r470 = r466.x;
    |  float r471 = r466.y;
    |  float r472 = r466.w;
    |  vec2 r473 = vec2(r470,r471);
    |  vec2 r474 = abs(r473);
    |  vec2 r475 = r474-r56;
    |  float r476 = r475[0];
    |  float r477 = r475[1];
    |  float r478 = max(r476,r477);
    |  float r479 = min(r478,r14);
    |  vec2 r480 = vec2(r14);
    |  vec2 r481 = max(r475,r480);
    |  float r482 = length(r481);
    |  float r483 = r479+r482;
    |  vec2 r484 = vec2(r469,r483);
    |  vec2 r485 = vec2(r14);
    |  vec2 r486 = max(r484,r485);
    |  float r487 = length(r486);
    |  float r488 = max(r469,r483);
    |  float r489 = min(r488,r14);
    |  float r490 = r487+r489;
    |  float r491 = r441[0];
    |  float r492 = r441[1];
    |  float r493 = r441[2];
    |  float r494 = r441[3];
    |  float r495 = r77.x;
    |  float r496 = r491+r495;
    |  float r497 = r77.x;
    |  float r498 = r27*r497;
    |  float r499 = r496/r498;
    |  float r500 = floor(r499);
    |  float r501 = r498*r500;
    |  float r502 = r496-r501;
    |  float r503 = r77.x;
    |  float r504 = r502-r503;
    |  float r505 = r77.y;
    |  float r506 = r492+r505;
    |  float r507 = r77.y;
    |  float r508 = r27*r507;
    |  float r509 = r506/r508;
    |  float r510 = floor(r509);
    |  float r511 = r508*r510;
    |  float r512 = r506-r511;
    |  float r513 = r77.y;
    |  float r514 = r512-r513;
    |  vec4 r515 = vec4(r504,r514,r493,r494);
    |  float r516 = r515.z;
    |  float r517 = abs(r516);
    |  float r518 = r517-r49;
    |  float r519 = r515.x;
    |  float r520 = r515.y;
    |  float r521 = r515.w;
    |  vec2 r522 = vec2(r519,r520);
    |  vec2 r523 = abs(r522);
    |  vec2 r524 = r523-r107;
    |  float r525 = r524[0];
    |  float r526 = r524[1];
    |  float r527 = max(r525,r526);
    |  float r528 = min(r527,r14);
    |  vec2 r529 = vec2(r14);
    |  vec2 r530 = max(r524,r529);
    |  float r531 = length(r530);
    |  float r532 = r528+r531;
    |  vec2 r533 = vec2(r518,r532);
    |  vec2 r534 = vec2(r14);
    |  vec2 r535 = max(r533,r534);
    |  float r536 = length(r535);
    |  float r537 = max(r518,r532);
    |  float r538 = min(r537,r14);
    |  float r539 = r536+r538;
    |  float r540 = min(r490,r539);
    |  float r541 = r441[0];
    |  float r542 = r441[1];
    |  float r543 = r441[2];
    |  float r544 = r441[3];
    |  float r545 = r129.x;
    |  float r546 = r541+r545;
    |  float r547 = r129.x;
    |  float r548 = r27*r547;
    |  float r549 = r546/r548;
    |  float r550 = floor(r549);
    |  float r551 = r548*r550;
    |  float r552 = r546-r551;
    |  float r553 = r129.x;
    |  float r554 = r552-r553;
    |  float r555 = r129.y;
    |  float r556 = r542+r555;
    |  float r557 = r129.y;
    |  float r558 = r27*r557;
    |  float r559 = r556/r558;
    |  float r560 = floor(r559);
    |  float r561 = r558*r560;
    |  float r562 = r556-r561;
    |  float r563 = r129.y;
    |  float r564 = r562-r563;
    |  vec4 r565 = vec4(r554,r564,r543,r544);
    |  float r566 = r565.z;
    |  float r567 = abs(r566);
    |  float r568 = r567-r49;
    |  float r569 = r565.x;
    |  float r570 = r565.y;
    |  float r571 = r565.w;
    |  vec2 r572 = vec2(r569,r570);
    |  vec2 r573 = abs(r572);
    |  vec2 r574 = r573-r159;
    |  float r575 = r574[0];
    |  float r576 = r574[1];
    |  float r577 = max(r575,r576);
    |  float r578 = min(r577,r14);
    |  vec2 r579 = vec2(r14);
    |  vec2 r580 = max(r574,r579);
    |  float r581 = length(r580);
    |  float r582 = r578+r581;
    |  vec2 r583 = vec2(r568,r582);
    |  vec2 r584 = vec2(r14);
    |  vec2 r585 = max(r583,r584);
    |  float r586 = length(r585);
    |  float r587 = max(r568,r582);
    |  float r588 = min(r587,r14);
    |  float r589 = r586+r588;
    |  float r590 = min(r540,r589);
    |  float r591 = r441[0];
    |  float r592 = r441[1];
    |  float r593 = r441[2];
    |  float r594 = r441[3];
    |  float r595 = r181.x;
    |  float r596 = r591+r595;
    |  float r597 = r181.x;
    |  float r598 = r27*r597;
    |  float r599 = r596/r598;
    |  float r600 = floor(r599);
    |  float r601 = r598*r600;
    |  float r602 = r596-r601;
    |  float r603 = r181.x;
    |  float r604 = r602-r603;
    |  float r605 = r181.y;
    |  float r606 = r592+r605;
    |  float r607 = r181.y;
    |  float r608 = r27*r607;
    |  float r609 = r606/r608;
    |  float r610 = floor(r609);
    |  float r611 = r608*r610;
    |  float r612 = r606-r611;
    |  float r613 = r181.y;
    |  float r614 = r612-r613;
    |  vec4 r615 = vec4(r604,r614,r593,r594);
    |  float r616 = r615.z;
    |  float r617 = abs(r616);
    |  float r618 = r617-r49;
    |  float r619 = r615.x;
    |  float r620 = r615.y;
    |  float r621 = r615.w;
    |  vec2 r622 = vec2(r619,r620);
    |  vec2 r623 = abs(r622);
    |  vec2 r624 = r623-r211;
    |  float r625 = r624[0];
    |  float r626 = r624[1];
    |  float r627 = max(r625,r626);
    |  float r628 = min(r627,r14);
    |  vec2 r629 = vec2(r14);
    |  vec2 r630 = max(r624,r629);
    |  float r631 = length(r630);
    |  float r632 = r628+r631;
    |  vec2 r633 = vec2(r618,r632);
    |  vec2 r634 = vec2(r14);
    |  vec2 r635 = max(r633,r634);
    |  float r636 = length(r635);
    |  float r637 = max(r618,r632);
    |  float r638 = min(r637,r14);
    |  float r639 = r636+r638;
    |  float r640 = min(r590,r639);
    |  float r641 = -(r640);
    |  float r642 = max(r436,r641);
    |  return r642;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r1 = 0.8;
    |  float r2 = 0.5;
    |  vec3 r3 = vec3(r1,r1,r2);
    |  float r4 = 2.2;
    |  vec3 r5 = vec3(r4);
    |  vec3 r6 = pow(r3,r5);
    |  /* body */
    |  return r6;
    |}
    |const vec3 bbox_min = vec3(-1.0,-1.0,-1.0);
    |const vec3 bbox_max = vec3(1.0,1.0,1.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
