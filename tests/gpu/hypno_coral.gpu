{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-20,-20,-20],[20,20,20]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 2000.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |uniform float rv_Amp;
    |uniform float rv_Iter;
    |uniform float rv_Offset;
    |uniform float rv_Scale;
    |uniform float rv_Smooth;
    |uniform float rv_Speed;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = 2.0;
    |  float r25 = rv_Offset;
    |  float r27 = 1.5;
    |  float r35 = 10.0;
    |  float r37 = rv_Smooth;
    |  float r40 = 1.0/0.0;
    |  float r42 = 0.5;
    |  float r47 = 0.0;
    |  float r48 = 1.0;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  float r6 = r1/r5;
    |  float r7 = r2/r5;
    |  float r8 = r3/r5;
    |  vec4 r9 = vec4(r6,r7,r8,r4);
    |  float r10 = r9[0];
    |  float r11 = r9[1];
    |  float r12 = r9[2];
    |  float r13 = r9[3];
    |  float r14 = cos(r10);
    |  float r15 = sin(r11);
    |  float r16 = r14*r15;
    |  float r17 = cos(r11);
    |  float r18 = sin(r12);
    |  float r19 = r17*r18;
    |  float r20 = r16+r19;
    |  float r21 = cos(r12);
    |  float r22 = sin(r10);
    |  float r23 = r21*r22;
    |  float r24 = r20+r23;
    |  float r26 = r24-r25;
    |  float r28 = r26/r27;
    |  float r29 = r9[0];
    |  float r30 = r9[1];
    |  float r31 = r9[2];
    |  float r32 = r9[3];
    |  vec3 r33 = vec3(r29,r30,r31);
    |  float r34 = length(r33);
    |  float r36 = r34-r35;
    |  float r38 = -(r28);
    |  float r39 = -(r36);
    |  bool r41 =(r38 == r40);
    |  float r43 = r39-r38;
    |  float r44 = r42*r43;
    |  float r45 = r44/r37;
    |  float r46 = r42+r45;
    |  float r49 = max(r46,r47);
    |  float r50 = min(r49,r48);
    |  float r51 = r48-r50;
    |  float r52 = r39*r51;
    |  float r53 = r38*r50;
    |  float r54 = r52+r53;
    |  float r55 = r37*r50;
    |  float r56 = r48-r50;
    |  float r57 = r55*r56;
    |  float r58 = r54-r57;
    |  float r59 =(r41 ? r39 : r58);
    |  float r60 = -(r59);
    |  float r61 = r60*r5;
    |  return r61;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r5 = 2.0;
    |  float r10 = rv_Scale;
    |  float r14 = rv_Speed;
    |  float r16 = 1.0;
    |  float r17 = rv_Iter;
    |  float r19 = rv_Amp;
    |  float r26 = 0.0;
    |  float r27 = 6.283185307179586;
    |  float r28 = 3.0;
    |  float r29 = r27/r28;
    |  float r30 = r5/r28;
    |  float r31 = r27*r30;
    |  vec3 r32 = vec3(r26,r29,r31);
    |  float r40 = 0.5;
    |  float r41 = 3.141592653589793;
    |  float r49 = 2.2;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  float r6 = r1/r5;
    |  float r7 = r2/r5;
    |  float r8 = r3/r5;
    |  vec3 r9 = vec3(r6,r7,r8);
    |  vec3 r11 = vec3(r10);
    |  vec3 r12 = r9*r11;
    |  vec3 r13=r12;
    |  float r15 = r4*r14;
    |  for (float r18=r16;r18<=r17;r18+=r16) {
    |  float r20 = r19/r18;
    |  vec3 r21 = r13.yzx;
    |  vec3 r22 = vec3(r18);
    |  vec3 r23 = r22*r21;
    |  vec3 r24 = vec3(r15);
    |  vec3 r25 = r23+r24;
    |  vec3 r33 = r25+r32;
    |  vec3 r34 = sin(r33);
    |  vec3 r35 = vec3(r20);
    |  vec3 r36 = r35*r34;
    |  vec3 r37 = r13+r36;
    |  vec3 r38 = vec3(r16);
    |  vec3 r39 = r37+r38;
    |  r13=r39;
    |  }
    |  vec3 r42 = vec3(r41);
    |  vec3 r43 = r13*r42;
    |  vec3 r44 = sin(r43);
    |  vec3 r45 = vec3(r40);
    |  vec3 r46 = r45*r44;
    |  vec3 r47 = vec3(r40);
    |  vec3 r48 = r46+r47;
    |  vec3 r50 = vec3(r49);
    |  vec3 r51 = pow(r48,r50);
    |  return r51;
    |}
    |const vec3 bbox_min = vec3(-20.0,-20.0,-20.0);
    |const vec3 bbox_max = vec3(20.0,20.0,20.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
    {name: "rv_Amp", type: "float", value: 0.6, label: "Amp", config: {slider:[0,3]}};
    {name: "rv_Iter", type: "float", value: 10, label: "Iter", config: {int_slider:[0,50]}};
    {name: "rv_Offset", type: "float", value: 0, label: "Offset", config: {slider:[-1.5,2]}};
    {name: "rv_Scale", type: "float", value: 0.7, label: "Scale", config: #scale_picker};
    {name: "rv_Smooth", type: "float", value: 3.2, label: "Smooth", config: {slider:[0,5]}};
    {name: "rv_Speed", type: "float", value: 1, label: "Speed", config: {slider:[0,4]}};
  ];
}
