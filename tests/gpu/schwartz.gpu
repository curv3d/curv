{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-33.84955592153876,-10,-10],[33.84955592153876,10,10]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(-24.42477796076938,0.0,0.0);
    |  float r23 = 0.1;
    |  float r25 = 2.0;
    |  float r33 = 9.42477796076938;
    |  vec3 r37 = vec3(-0.5752220392306207,0.0,0.0);
    |  vec3 r66 = vec3(9.42477796076938,9.42477796076938,9.42477796076938);
    |  float r73 = 0.0;
    |  vec3 r82 = vec3(23.84955592153876,0.0,0.0);
    |  vec3 r99 = vec3(10.0,10.0,10.0);
    |  float r141 = 1.0;
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  vec4 r12 = vec4(r4,r7,r10,r11);
    |  float r13 = r12.x;
    |  float r14 = cos(r13);
    |  float r15 = r12.y;
    |  float r16 = cos(r15);
    |  float r17 = r14+r16;
    |  float r18 = r12.z;
    |  float r19 = cos(r18);
    |  float r20 = r17+r19;
    |  float r21 = -(r20);
    |  float r22 = abs(r21);
    |  float r24 = r22-r23;
    |  float r26 = r24/r25;
    |  float r27 = r12[0];
    |  float r28 = r12[1];
    |  float r29 = r12[2];
    |  float r30 = r12[3];
    |  vec3 r31 = vec3(r27,r28,r29);
    |  float r32 = length(r31);
    |  float r34 = r32-r33;
    |  float r35 = max(r26,r34);
    |  float r36 = r0.x;
    |  float r38 = r37.x;
    |  float r39 = r36-r38;
    |  float r40 = r0.y;
    |  float r41 = r37.y;
    |  float r42 = r40-r41;
    |  float r43 = r0.z;
    |  float r44 = r37.z;
    |  float r45 = r43-r44;
    |  float r46 = r0.w;
    |  vec4 r47 = vec4(r39,r42,r45,r46);
    |  float r48 = r47.x;
    |  float r49 = cos(r48);
    |  float r50 = r47.y;
    |  float r51 = cos(r50);
    |  float r52 = r49+r51;
    |  float r53 = r47.z;
    |  float r54 = cos(r53);
    |  float r55 = r52+r54;
    |  float r56 = -(r55);
    |  float r57 = abs(r56);
    |  float r58 = r57-r23;
    |  float r59 = r58/r25;
    |  float r60 = r47[0];
    |  float r61 = r47[1];
    |  float r62 = r47[2];
    |  float r63 = r47[3];
    |  vec3 r64 = vec3(r60,r61,r62);
    |  vec3 r65 = abs(r64);
    |  vec3 r67 = r65-r66;
    |  float r68 = r67[0];
    |  float r69 = r67[1];
    |  float r70 = max(r68,r69);
    |  float r71 = r67[2];
    |  float r72 = max(r70,r71);
    |  float r74 = min(r72,r73);
    |  vec3 r75 = vec3(r73);
    |  vec3 r76 = max(r67,r75);
    |  float r77 = length(r76);
    |  float r78 = r74+r77;
    |  float r79 = max(r59,r78);
    |  float r80 = min(r35,r79);
    |  float r81 = r0.x;
    |  float r83 = r82.x;
    |  float r84 = r81-r83;
    |  float r85 = r0.y;
    |  float r86 = r82.y;
    |  float r87 = r85-r86;
    |  float r88 = r0.z;
    |  float r89 = r82.z;
    |  float r90 = r88-r89;
    |  float r91 = r0.w;
    |  vec4 r92 = vec4(r84,r87,r90,r91);
    |  float r93 = r92[0];
    |  float r94 = r92[1];
    |  float r95 = r92[2];
    |  float r96 = r92[3];
    |  vec3 r97 = vec3(r93,r94,r95);
    |  vec3 r98 = abs(r97);
    |  vec3 r100 = r98-r99;
    |  float r101 = r100[0];
    |  float r102 = r100[1];
    |  float r103 = max(r101,r102);
    |  float r104 = r100[2];
    |  float r105 = max(r103,r104);
    |  float r106 = min(r105,r73);
    |  vec3 r107 = vec3(r73);
    |  vec3 r108 = max(r100,r107);
    |  float r109 = length(r108);
    |  float r110 = r106+r109;
    |  float r111 = r92[0];
    |  float r112 = r92[1];
    |  float r113 = r92[2];
    |  float r114 = r92[3];
    |  vec3 r115 = vec3(r111,r112,r113);
    |  vec3 r116 = abs(r115);
    |  vec3 r117 = r116-r99;
    |  float r118 = r117[0];
    |  float r119 = r117[1];
    |  float r120 = max(r118,r119);
    |  float r121 = r117[2];
    |  float r122 = max(r120,r121);
    |  float r123 = min(r122,r73);
    |  vec3 r124 = vec3(r73);
    |  vec3 r125 = max(r117,r124);
    |  float r126 = length(r125);
    |  float r127 = r123+r126;
    |  float r128 = r92.x;
    |  float r129 = cos(r128);
    |  float r130 = r92.y;
    |  float r131 = cos(r130);
    |  float r132 = r129+r131;
    |  float r133 = r92.z;
    |  float r134 = cos(r133);
    |  float r135 = r132+r134;
    |  float r136 = -(r135);
    |  float r137 = abs(r136);
    |  float r138 = r137-r23;
    |  float r139 = r138/r25;
    |  float r140 = max(r127,r139);
    |  float r142 = r141-r23;
    |  float r143 = r110*r142;
    |  float r144 = r140*r23;
    |  float r145 = r143+r144;
    |  float r146 = min(r80,r145);
    |  return r146;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(-24.42477796076938,0.0,0.0);
    |  float r23 = 0.1;
    |  float r25 = 2.0;
    |  float r33 = 9.42477796076938;
    |  vec3 r37 = vec3(-0.5752220392306207,0.0,0.0);
    |  vec3 r66 = vec3(9.42477796076938,9.42477796076938,9.42477796076938);
    |  float r73 = 0.0;
    |  vec3 r82 = vec3(23.84955592153876,0.0,0.0);
    |  vec3 r99 = vec3(10.0,10.0,10.0);
    |  float r141 = 1.0;
    |  float r160 = 0.8;
    |  float r161 = 0.5;
    |  vec3 r162 = vec3(r160,r160,r161);
    |  float r163 = 2.2;
    |  vec3 r164 = vec3(r163);
    |  vec3 r165 = pow(r162,r164);
    |  vec3 r258 = vec3(0.6120655998656237,0.04329769050737353,0.04329769050737353);
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  vec4 r12 = vec4(r4,r7,r10,r11);
    |  float r13 = r12.x;
    |  float r14 = cos(r13);
    |  float r15 = r12.y;
    |  float r16 = cos(r15);
    |  float r17 = r14+r16;
    |  float r18 = r12.z;
    |  float r19 = cos(r18);
    |  float r20 = r17+r19;
    |  float r21 = -(r20);
    |  float r22 = abs(r21);
    |  float r24 = r22-r23;
    |  float r26 = r24/r25;
    |  float r27 = r12[0];
    |  float r28 = r12[1];
    |  float r29 = r12[2];
    |  float r30 = r12[3];
    |  vec3 r31 = vec3(r27,r28,r29);
    |  float r32 = length(r31);
    |  float r34 = r32-r33;
    |  float r35 = max(r26,r34);
    |  float r36 = r0.x;
    |  float r38 = r37.x;
    |  float r39 = r36-r38;
    |  float r40 = r0.y;
    |  float r41 = r37.y;
    |  float r42 = r40-r41;
    |  float r43 = r0.z;
    |  float r44 = r37.z;
    |  float r45 = r43-r44;
    |  float r46 = r0.w;
    |  vec4 r47 = vec4(r39,r42,r45,r46);
    |  float r48 = r47.x;
    |  float r49 = cos(r48);
    |  float r50 = r47.y;
    |  float r51 = cos(r50);
    |  float r52 = r49+r51;
    |  float r53 = r47.z;
    |  float r54 = cos(r53);
    |  float r55 = r52+r54;
    |  float r56 = -(r55);
    |  float r57 = abs(r56);
    |  float r58 = r57-r23;
    |  float r59 = r58/r25;
    |  float r60 = r47[0];
    |  float r61 = r47[1];
    |  float r62 = r47[2];
    |  float r63 = r47[3];
    |  vec3 r64 = vec3(r60,r61,r62);
    |  vec3 r65 = abs(r64);
    |  vec3 r67 = r65-r66;
    |  float r68 = r67[0];
    |  float r69 = r67[1];
    |  float r70 = max(r68,r69);
    |  float r71 = r67[2];
    |  float r72 = max(r70,r71);
    |  float r74 = min(r72,r73);
    |  vec3 r75 = vec3(r73);
    |  vec3 r76 = max(r67,r75);
    |  float r77 = length(r76);
    |  float r78 = r74+r77;
    |  float r79 = max(r59,r78);
    |  float r80 = min(r35,r79);
    |  float r81 = r0.x;
    |  float r83 = r82.x;
    |  float r84 = r81-r83;
    |  float r85 = r0.y;
    |  float r86 = r82.y;
    |  float r87 = r85-r86;
    |  float r88 = r0.z;
    |  float r89 = r82.z;
    |  float r90 = r88-r89;
    |  float r91 = r0.w;
    |  vec4 r92 = vec4(r84,r87,r90,r91);
    |  float r93 = r92[0];
    |  float r94 = r92[1];
    |  float r95 = r92[2];
    |  float r96 = r92[3];
    |  vec3 r97 = vec3(r93,r94,r95);
    |  vec3 r98 = abs(r97);
    |  vec3 r100 = r98-r99;
    |  float r101 = r100[0];
    |  float r102 = r100[1];
    |  float r103 = max(r101,r102);
    |  float r104 = r100[2];
    |  float r105 = max(r103,r104);
    |  float r106 = min(r105,r73);
    |  vec3 r107 = vec3(r73);
    |  vec3 r108 = max(r100,r107);
    |  float r109 = length(r108);
    |  float r110 = r106+r109;
    |  float r111 = r92[0];
    |  float r112 = r92[1];
    |  float r113 = r92[2];
    |  float r114 = r92[3];
    |  vec3 r115 = vec3(r111,r112,r113);
    |  vec3 r116 = abs(r115);
    |  vec3 r117 = r116-r99;
    |  float r118 = r117[0];
    |  float r119 = r117[1];
    |  float r120 = max(r118,r119);
    |  float r121 = r117[2];
    |  float r122 = max(r120,r121);
    |  float r123 = min(r122,r73);
    |  vec3 r124 = vec3(r73);
    |  vec3 r125 = max(r117,r124);
    |  float r126 = length(r125);
    |  float r127 = r123+r126;
    |  float r128 = r92.x;
    |  float r129 = cos(r128);
    |  float r130 = r92.y;
    |  float r131 = cos(r130);
    |  float r132 = r129+r131;
    |  float r133 = r92.z;
    |  float r134 = cos(r133);
    |  float r135 = r132+r134;
    |  float r136 = -(r135);
    |  float r137 = abs(r136);
    |  float r138 = r137-r23;
    |  float r139 = r138/r25;
    |  float r140 = max(r127,r139);
    |  float r142 = r141-r23;
    |  float r143 = r110*r142;
    |  float r144 = r140*r23;
    |  float r145 = r143+r144;
    |  bool r146 = r145<=r73;
    |  bool r147 = r145<=r80;
    |  bool r148 =(r146 || r147);
    |  float r149 = r0.x;
    |  float r150 = r82.x;
    |  float r151 = r149-r150;
    |  float r152 = r0.y;
    |  float r153 = r82.y;
    |  float r154 = r152-r153;
    |  float r155 = r0.z;
    |  float r156 = r82.z;
    |  float r157 = r155-r156;
    |  float r158 = r0.w;
    |  vec4 r159 = vec4(r151,r154,r157,r158);
    |  float r166 = r141-r23;
    |  vec3 r167 = vec3(r166);
    |  vec3 r168 = r165*r167;
    |  vec3 r169 = vec3(r23);
    |  vec3 r170 = r165*r169;
    |  vec3 r171 = r168+r170;
    |  float r172 = r0.x;
    |  float r173 = r2.x;
    |  float r174 = r172-r173;
    |  float r175 = r0.y;
    |  float r176 = r2.y;
    |  float r177 = r175-r176;
    |  float r178 = r0.z;
    |  float r179 = r2.z;
    |  float r180 = r178-r179;
    |  float r181 = r0.w;
    |  vec4 r182 = vec4(r174,r177,r180,r181);
    |  float r183 = r182.x;
    |  float r184 = cos(r183);
    |  float r185 = r182.y;
    |  float r186 = cos(r185);
    |  float r187 = r184+r186;
    |  float r188 = r182.z;
    |  float r189 = cos(r188);
    |  float r190 = r187+r189;
    |  float r191 = -(r190);
    |  float r192 = abs(r191);
    |  float r193 = r192-r23;
    |  float r194 = r193/r25;
    |  float r195 = r182[0];
    |  float r196 = r182[1];
    |  float r197 = r182[2];
    |  float r198 = r182[3];
    |  vec3 r199 = vec3(r195,r196,r197);
    |  float r200 = length(r199);
    |  float r201 = r200-r33;
    |  float r202 = max(r194,r201);
    |  float r203 = r0.x;
    |  float r204 = r37.x;
    |  float r205 = r203-r204;
    |  float r206 = r0.y;
    |  float r207 = r37.y;
    |  float r208 = r206-r207;
    |  float r209 = r0.z;
    |  float r210 = r37.z;
    |  float r211 = r209-r210;
    |  float r212 = r0.w;
    |  vec4 r213 = vec4(r205,r208,r211,r212);
    |  float r214 = r213.x;
    |  float r215 = cos(r214);
    |  float r216 = r213.y;
    |  float r217 = cos(r216);
    |  float r218 = r215+r217;
    |  float r219 = r213.z;
    |  float r220 = cos(r219);
    |  float r221 = r218+r220;
    |  float r222 = -(r221);
    |  float r223 = abs(r222);
    |  float r224 = r223-r23;
    |  float r225 = r224/r25;
    |  float r226 = r213[0];
    |  float r227 = r213[1];
    |  float r228 = r213[2];
    |  float r229 = r213[3];
    |  vec3 r230 = vec3(r226,r227,r228);
    |  vec3 r231 = abs(r230);
    |  vec3 r232 = r231-r66;
    |  float r233 = r232[0];
    |  float r234 = r232[1];
    |  float r235 = max(r233,r234);
    |  float r236 = r232[2];
    |  float r237 = max(r235,r236);
    |  float r238 = min(r237,r73);
    |  vec3 r239 = vec3(r73);
    |  vec3 r240 = max(r232,r239);
    |  float r241 = length(r240);
    |  float r242 = r238+r241;
    |  float r243 = max(r225,r242);
    |  bool r244 = r243<=r73;
    |  bool r245 = r243<=r202;
    |  bool r246 =(r244 || r245);
    |  float r247 = r0.x;
    |  float r248 = r37.x;
    |  float r249 = r247-r248;
    |  float r250 = r0.y;
    |  float r251 = r37.y;
    |  float r252 = r250-r251;
    |  float r253 = r0.z;
    |  float r254 = r37.z;
    |  float r255 = r253-r254;
    |  float r256 = r0.w;
    |  vec4 r257 = vec4(r249,r252,r255,r256);
    |  float r259 = r0.x;
    |  float r260 = r2.x;
    |  float r261 = r259-r260;
    |  float r262 = r0.y;
    |  float r263 = r2.y;
    |  float r264 = r262-r263;
    |  float r265 = r0.z;
    |  float r266 = r2.z;
    |  float r267 = r265-r266;
    |  float r268 = r0.w;
    |  vec4 r269 = vec4(r261,r264,r267,r268);
    |  vec3 r270 =(r246 ? r258 : r165);
    |  vec3 r271 =(r148 ? r171 : r270);
    |  return r271;
    |}
    |const vec3 bbox_min = vec3(-33.84955592153876,-10.0,-10.0);
    |const vec3 bbox_max = vec3(33.84955592153876,10.0,10.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
  ];
}
