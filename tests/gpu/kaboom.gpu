{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-6,-6,-6],[6,6,6]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 2000.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |uniform float rv_Amplitude;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r7 = 6.0;
    |  float r14 = 0.0;
    |  float r15 = 0.8;
    |  float r16 = 0.6;
    |  vec3 r17 = vec3(r14,r15,r16);
    |  float r19 = -(r15);
    |  float r20 = 0.36;
    |  float r21 = 0.48;
    |  float r22 = -(r21);
    |  vec3 r23 = vec3(r19,r20,r22);
    |  float r25 = -(r16);
    |  float r26 = 0.64;
    |  vec3 r27 = vec3(r25,r22,r26);
    |  float r32 = 0.5;
    |  float r36 = 3.0;
    |  float r37 = 2.0;
    |  float r45 = 57.0;
    |  float r48 = 113.0;
    |  float r54 = 43758.5453;
    |  float r57 = 1.0;
    |  float r71 = 58.0;
    |  float r90 = 114.0;
    |  float r100 = 170.0;
    |  float r105 = 171.0;
    |  float r127 = 2.32;
    |  float r130 = 0.25;
    |  float r215 = 3.03;
    |  float r218 = 0.0625;
    |  float r303 = 0.9375;
    |  float r305 = -0.2;
    |  float r307 = rv_Amplitude;
    |  float r310 = 10.0;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r5 = vec3(r1,r2,r3);
    |  float r6 = length(r5);
    |  float r8 = r6-r7;
    |  float r9 = r0[0];
    |  float r10 = r0[1];
    |  float r11 = r0[2];
    |  float r12 = r0[3];
    |  vec3 r13 = vec3(r9,r10,r11);
    |  float r18 = dot(r13,r17);
    |  float r24 = dot(r13,r23);
    |  float r28 = dot(r13,r27);
    |  vec3 r29 = vec3(r18,r24,r28);
    |  vec3 r30=r29;
    |  float r31=r14;
    |  vec3 r33 = floor(r30);
    |  vec3 r34 = fract(r30);
    |  vec3 r35 = r34*r34;
    |  vec3 r38 = vec3(r37);
    |  vec3 r39 = r38*r34;
    |  vec3 r40 = vec3(r36);
    |  vec3 r41 = r40-r39;
    |  vec3 r42 = r35*r41;
    |  float r43 = r33.x;
    |  float r44 = r33.y;
    |  float r46 = r44*r45;
    |  float r47 = r43+r46;
    |  float r49 = r33.z;
    |  float r50 = r48*r49;
    |  float r51 = r47+r50;
    |  float r52 = r51+r14;
    |  float r53 = sin(r52);
    |  float r55 = r53*r54;
    |  float r56 = fract(r55);
    |  float r58 = r51+r57;
    |  float r59 = sin(r58);
    |  float r60 = r59*r54;
    |  float r61 = fract(r60);
    |  float r62 = r34.x;
    |  float r63 = r57-r62;
    |  float r64 = r56*r63;
    |  float r65 = r61*r62;
    |  float r66 = r64+r65;
    |  float r67 = r51+r45;
    |  float r68 = sin(r67);
    |  float r69 = r68*r54;
    |  float r70 = fract(r69);
    |  float r72 = r51+r71;
    |  float r73 = sin(r72);
    |  float r74 = r73*r54;
    |  float r75 = fract(r74);
    |  float r76 = r34.x;
    |  float r77 = r57-r76;
    |  float r78 = r70*r77;
    |  float r79 = r75*r76;
    |  float r80 = r78+r79;
    |  float r81 = r34.y;
    |  float r82 = r57-r81;
    |  float r83 = r66*r82;
    |  float r84 = r80*r81;
    |  float r85 = r83+r84;
    |  float r86 = r51+r48;
    |  float r87 = sin(r86);
    |  float r88 = r87*r54;
    |  float r89 = fract(r88);
    |  float r91 = r51+r90;
    |  float r92 = sin(r91);
    |  float r93 = r92*r54;
    |  float r94 = fract(r93);
    |  float r95 = r34.x;
    |  float r96 = r57-r95;
    |  float r97 = r89*r96;
    |  float r98 = r94*r95;
    |  float r99 = r97+r98;
    |  float r101 = r51+r100;
    |  float r102 = sin(r101);
    |  float r103 = r102*r54;
    |  float r104 = fract(r103);
    |  float r106 = r51+r105;
    |  float r107 = sin(r106);
    |  float r108 = r107*r54;
    |  float r109 = fract(r108);
    |  float r110 = r34.x;
    |  float r111 = r57-r110;
    |  float r112 = r104*r111;
    |  float r113 = r109*r110;
    |  float r114 = r112+r113;
    |  float r115 = r34.y;
    |  float r116 = r57-r115;
    |  float r117 = r99*r116;
    |  float r118 = r114*r115;
    |  float r119 = r117+r118;
    |  float r120 = r34.z;
    |  float r121 = r57-r120;
    |  float r122 = r85*r121;
    |  float r123 = r119*r120;
    |  float r124 = r122+r123;
    |  float r125 = r32*r124;
    |  float r126 = r31+r125;
    |  r31=r126;
    |  vec3 r128 = vec3(r127);
    |  vec3 r129 = r30*r128;
    |  r30=r129;
    |  vec3 r131 = floor(r30);
    |  vec3 r132 = fract(r30);
    |  vec3 r133 = r132*r132;
    |  vec3 r134 = vec3(r37);
    |  vec3 r135 = r134*r132;
    |  vec3 r136 = vec3(r36);
    |  vec3 r137 = r136-r135;
    |  vec3 r138 = r133*r137;
    |  float r139 = r131.x;
    |  float r140 = r131.y;
    |  float r141 = r140*r45;
    |  float r142 = r139+r141;
    |  float r143 = r131.z;
    |  float r144 = r48*r143;
    |  float r145 = r142+r144;
    |  float r146 = r145+r14;
    |  float r147 = sin(r146);
    |  float r148 = r147*r54;
    |  float r149 = fract(r148);
    |  float r150 = r145+r57;
    |  float r151 = sin(r150);
    |  float r152 = r151*r54;
    |  float r153 = fract(r152);
    |  float r154 = r132.x;
    |  float r155 = r57-r154;
    |  float r156 = r149*r155;
    |  float r157 = r153*r154;
    |  float r158 = r156+r157;
    |  float r159 = r145+r45;
    |  float r160 = sin(r159);
    |  float r161 = r160*r54;
    |  float r162 = fract(r161);
    |  float r163 = r145+r71;
    |  float r164 = sin(r163);
    |  float r165 = r164*r54;
    |  float r166 = fract(r165);
    |  float r167 = r132.x;
    |  float r168 = r57-r167;
    |  float r169 = r162*r168;
    |  float r170 = r166*r167;
    |  float r171 = r169+r170;
    |  float r172 = r132.y;
    |  float r173 = r57-r172;
    |  float r174 = r158*r173;
    |  float r175 = r171*r172;
    |  float r176 = r174+r175;
    |  float r177 = r145+r48;
    |  float r178 = sin(r177);
    |  float r179 = r178*r54;
    |  float r180 = fract(r179);
    |  float r181 = r145+r90;
    |  float r182 = sin(r181);
    |  float r183 = r182*r54;
    |  float r184 = fract(r183);
    |  float r185 = r132.x;
    |  float r186 = r57-r185;
    |  float r187 = r180*r186;
    |  float r188 = r184*r185;
    |  float r189 = r187+r188;
    |  float r190 = r145+r100;
    |  float r191 = sin(r190);
    |  float r192 = r191*r54;
    |  float r193 = fract(r192);
    |  float r194 = r145+r105;
    |  float r195 = sin(r194);
    |  float r196 = r195*r54;
    |  float r197 = fract(r196);
    |  float r198 = r132.x;
    |  float r199 = r57-r198;
    |  float r200 = r193*r199;
    |  float r201 = r197*r198;
    |  float r202 = r200+r201;
    |  float r203 = r132.y;
    |  float r204 = r57-r203;
    |  float r205 = r189*r204;
    |  float r206 = r202*r203;
    |  float r207 = r205+r206;
    |  float r208 = r132.z;
    |  float r209 = r57-r208;
    |  float r210 = r176*r209;
    |  float r211 = r207*r208;
    |  float r212 = r210+r211;
    |  float r213 = r130*r212;
    |  float r214 = r31+r213;
    |  r31=r214;
    |  vec3 r216 = vec3(r215);
    |  vec3 r217 = r30*r216;
    |  r30=r217;
    |  vec3 r219 = floor(r30);
    |  vec3 r220 = fract(r30);
    |  vec3 r221 = r220*r220;
    |  vec3 r222 = vec3(r37);
    |  vec3 r223 = r222*r220;
    |  vec3 r224 = vec3(r36);
    |  vec3 r225 = r224-r223;
    |  vec3 r226 = r221*r225;
    |  float r227 = r219.x;
    |  float r228 = r219.y;
    |  float r229 = r228*r45;
    |  float r230 = r227+r229;
    |  float r231 = r219.z;
    |  float r232 = r48*r231;
    |  float r233 = r230+r232;
    |  float r234 = r233+r14;
    |  float r235 = sin(r234);
    |  float r236 = r235*r54;
    |  float r237 = fract(r236);
    |  float r238 = r233+r57;
    |  float r239 = sin(r238);
    |  float r240 = r239*r54;
    |  float r241 = fract(r240);
    |  float r242 = r220.x;
    |  float r243 = r57-r242;
    |  float r244 = r237*r243;
    |  float r245 = r241*r242;
    |  float r246 = r244+r245;
    |  float r247 = r233+r45;
    |  float r248 = sin(r247);
    |  float r249 = r248*r54;
    |  float r250 = fract(r249);
    |  float r251 = r233+r71;
    |  float r252 = sin(r251);
    |  float r253 = r252*r54;
    |  float r254 = fract(r253);
    |  float r255 = r220.x;
    |  float r256 = r57-r255;
    |  float r257 = r250*r256;
    |  float r258 = r254*r255;
    |  float r259 = r257+r258;
    |  float r260 = r220.y;
    |  float r261 = r57-r260;
    |  float r262 = r246*r261;
    |  float r263 = r259*r260;
    |  float r264 = r262+r263;
    |  float r265 = r233+r48;
    |  float r266 = sin(r265);
    |  float r267 = r266*r54;
    |  float r268 = fract(r267);
    |  float r269 = r233+r90;
    |  float r270 = sin(r269);
    |  float r271 = r270*r54;
    |  float r272 = fract(r271);
    |  float r273 = r220.x;
    |  float r274 = r57-r273;
    |  float r275 = r268*r274;
    |  float r276 = r272*r273;
    |  float r277 = r275+r276;
    |  float r278 = r233+r100;
    |  float r279 = sin(r278);
    |  float r280 = r279*r54;
    |  float r281 = fract(r280);
    |  float r282 = r233+r105;
    |  float r283 = sin(r282);
    |  float r284 = r283*r54;
    |  float r285 = fract(r284);
    |  float r286 = r220.x;
    |  float r287 = r57-r286;
    |  float r288 = r281*r287;
    |  float r289 = r285*r286;
    |  float r290 = r288+r289;
    |  float r291 = r220.y;
    |  float r292 = r57-r291;
    |  float r293 = r277*r292;
    |  float r294 = r290*r291;
    |  float r295 = r293+r294;
    |  float r296 = r220.z;
    |  float r297 = r57-r296;
    |  float r298 = r264*r297;
    |  float r299 = r295*r296;
    |  float r300 = r298+r299;
    |  float r301 = r218*r300;
    |  float r302 = r31+r301;
    |  r31=r302;
    |  float r304 = r31/r303;
    |  float r306 = r304+r305;
    |  float r308 = r306*r307;
    |  float r309 = r8-r308;
    |  float r311 = r309/r310;
    |  return r311;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r6 = 0.0;
    |  float r7 = 0.8;
    |  float r8 = 0.6;
    |  vec3 r9 = vec3(r6,r7,r8);
    |  float r11 = -(r7);
    |  float r12 = 0.36;
    |  float r13 = 0.48;
    |  float r14 = -(r13);
    |  vec3 r15 = vec3(r11,r12,r14);
    |  float r17 = -(r8);
    |  float r18 = 0.64;
    |  vec3 r19 = vec3(r17,r14,r18);
    |  float r24 = 0.5;
    |  float r28 = 3.0;
    |  float r29 = 2.0;
    |  float r37 = 57.0;
    |  float r40 = 113.0;
    |  float r46 = 43758.5453;
    |  float r49 = 1.0;
    |  float r63 = 58.0;
    |  float r82 = 114.0;
    |  float r92 = 170.0;
    |  float r97 = 171.0;
    |  float r119 = 2.32;
    |  float r122 = 0.25;
    |  float r207 = 3.03;
    |  float r210 = 0.0625;
    |  float r295 = 0.9375;
    |  float r297 = 1.7;
    |  float r298 = 1.3;
    |  vec3 r299 = vec3(r297,r298,r49);
    |  vec3 r300 = vec3(r49,r8,r6);
    |  vec3 r301 = vec3(r49,r6,r6);
    |  float r302 = 0.2;
    |  vec3 r303 = vec3(r302,r302,r302);
    |  float r304 = 0.4;
    |  vec3 r305 = vec3(r304,r304,r304);
    |  float r307 = 4.0;
    |  float r324 = 0.75;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec3 r5 = vec3(r1,r2,r3);
    |  float r10 = dot(r5,r9);
    |  float r16 = dot(r5,r15);
    |  float r20 = dot(r5,r19);
    |  vec3 r21 = vec3(r10,r16,r20);
    |  vec3 r22=r21;
    |  float r23=r6;
    |  vec3 r25 = floor(r22);
    |  vec3 r26 = fract(r22);
    |  vec3 r27 = r26*r26;
    |  vec3 r30 = vec3(r29);
    |  vec3 r31 = r30*r26;
    |  vec3 r32 = vec3(r28);
    |  vec3 r33 = r32-r31;
    |  vec3 r34 = r27*r33;
    |  float r35 = r25.x;
    |  float r36 = r25.y;
    |  float r38 = r36*r37;
    |  float r39 = r35+r38;
    |  float r41 = r25.z;
    |  float r42 = r40*r41;
    |  float r43 = r39+r42;
    |  float r44 = r43+r6;
    |  float r45 = sin(r44);
    |  float r47 = r45*r46;
    |  float r48 = fract(r47);
    |  float r50 = r43+r49;
    |  float r51 = sin(r50);
    |  float r52 = r51*r46;
    |  float r53 = fract(r52);
    |  float r54 = r26.x;
    |  float r55 = r49-r54;
    |  float r56 = r48*r55;
    |  float r57 = r53*r54;
    |  float r58 = r56+r57;
    |  float r59 = r43+r37;
    |  float r60 = sin(r59);
    |  float r61 = r60*r46;
    |  float r62 = fract(r61);
    |  float r64 = r43+r63;
    |  float r65 = sin(r64);
    |  float r66 = r65*r46;
    |  float r67 = fract(r66);
    |  float r68 = r26.x;
    |  float r69 = r49-r68;
    |  float r70 = r62*r69;
    |  float r71 = r67*r68;
    |  float r72 = r70+r71;
    |  float r73 = r26.y;
    |  float r74 = r49-r73;
    |  float r75 = r58*r74;
    |  float r76 = r72*r73;
    |  float r77 = r75+r76;
    |  float r78 = r43+r40;
    |  float r79 = sin(r78);
    |  float r80 = r79*r46;
    |  float r81 = fract(r80);
    |  float r83 = r43+r82;
    |  float r84 = sin(r83);
    |  float r85 = r84*r46;
    |  float r86 = fract(r85);
    |  float r87 = r26.x;
    |  float r88 = r49-r87;
    |  float r89 = r81*r88;
    |  float r90 = r86*r87;
    |  float r91 = r89+r90;
    |  float r93 = r43+r92;
    |  float r94 = sin(r93);
    |  float r95 = r94*r46;
    |  float r96 = fract(r95);
    |  float r98 = r43+r97;
    |  float r99 = sin(r98);
    |  float r100 = r99*r46;
    |  float r101 = fract(r100);
    |  float r102 = r26.x;
    |  float r103 = r49-r102;
    |  float r104 = r96*r103;
    |  float r105 = r101*r102;
    |  float r106 = r104+r105;
    |  float r107 = r26.y;
    |  float r108 = r49-r107;
    |  float r109 = r91*r108;
    |  float r110 = r106*r107;
    |  float r111 = r109+r110;
    |  float r112 = r26.z;
    |  float r113 = r49-r112;
    |  float r114 = r77*r113;
    |  float r115 = r111*r112;
    |  float r116 = r114+r115;
    |  float r117 = r24*r116;
    |  float r118 = r23+r117;
    |  r23=r118;
    |  vec3 r120 = vec3(r119);
    |  vec3 r121 = r22*r120;
    |  r22=r121;
    |  vec3 r123 = floor(r22);
    |  vec3 r124 = fract(r22);
    |  vec3 r125 = r124*r124;
    |  vec3 r126 = vec3(r29);
    |  vec3 r127 = r126*r124;
    |  vec3 r128 = vec3(r28);
    |  vec3 r129 = r128-r127;
    |  vec3 r130 = r125*r129;
    |  float r131 = r123.x;
    |  float r132 = r123.y;
    |  float r133 = r132*r37;
    |  float r134 = r131+r133;
    |  float r135 = r123.z;
    |  float r136 = r40*r135;
    |  float r137 = r134+r136;
    |  float r138 = r137+r6;
    |  float r139 = sin(r138);
    |  float r140 = r139*r46;
    |  float r141 = fract(r140);
    |  float r142 = r137+r49;
    |  float r143 = sin(r142);
    |  float r144 = r143*r46;
    |  float r145 = fract(r144);
    |  float r146 = r124.x;
    |  float r147 = r49-r146;
    |  float r148 = r141*r147;
    |  float r149 = r145*r146;
    |  float r150 = r148+r149;
    |  float r151 = r137+r37;
    |  float r152 = sin(r151);
    |  float r153 = r152*r46;
    |  float r154 = fract(r153);
    |  float r155 = r137+r63;
    |  float r156 = sin(r155);
    |  float r157 = r156*r46;
    |  float r158 = fract(r157);
    |  float r159 = r124.x;
    |  float r160 = r49-r159;
    |  float r161 = r154*r160;
    |  float r162 = r158*r159;
    |  float r163 = r161+r162;
    |  float r164 = r124.y;
    |  float r165 = r49-r164;
    |  float r166 = r150*r165;
    |  float r167 = r163*r164;
    |  float r168 = r166+r167;
    |  float r169 = r137+r40;
    |  float r170 = sin(r169);
    |  float r171 = r170*r46;
    |  float r172 = fract(r171);
    |  float r173 = r137+r82;
    |  float r174 = sin(r173);
    |  float r175 = r174*r46;
    |  float r176 = fract(r175);
    |  float r177 = r124.x;
    |  float r178 = r49-r177;
    |  float r179 = r172*r178;
    |  float r180 = r176*r177;
    |  float r181 = r179+r180;
    |  float r182 = r137+r92;
    |  float r183 = sin(r182);
    |  float r184 = r183*r46;
    |  float r185 = fract(r184);
    |  float r186 = r137+r97;
    |  float r187 = sin(r186);
    |  float r188 = r187*r46;
    |  float r189 = fract(r188);
    |  float r190 = r124.x;
    |  float r191 = r49-r190;
    |  float r192 = r185*r191;
    |  float r193 = r189*r190;
    |  float r194 = r192+r193;
    |  float r195 = r124.y;
    |  float r196 = r49-r195;
    |  float r197 = r181*r196;
    |  float r198 = r194*r195;
    |  float r199 = r197+r198;
    |  float r200 = r124.z;
    |  float r201 = r49-r200;
    |  float r202 = r168*r201;
    |  float r203 = r199*r200;
    |  float r204 = r202+r203;
    |  float r205 = r122*r204;
    |  float r206 = r23+r205;
    |  r23=r206;
    |  vec3 r208 = vec3(r207);
    |  vec3 r209 = r22*r208;
    |  r22=r209;
    |  vec3 r211 = floor(r22);
    |  vec3 r212 = fract(r22);
    |  vec3 r213 = r212*r212;
    |  vec3 r214 = vec3(r29);
    |  vec3 r215 = r214*r212;
    |  vec3 r216 = vec3(r28);
    |  vec3 r217 = r216-r215;
    |  vec3 r218 = r213*r217;
    |  float r219 = r211.x;
    |  float r220 = r211.y;
    |  float r221 = r220*r37;
    |  float r222 = r219+r221;
    |  float r223 = r211.z;
    |  float r224 = r40*r223;
    |  float r225 = r222+r224;
    |  float r226 = r225+r6;
    |  float r227 = sin(r226);
    |  float r228 = r227*r46;
    |  float r229 = fract(r228);
    |  float r230 = r225+r49;
    |  float r231 = sin(r230);
    |  float r232 = r231*r46;
    |  float r233 = fract(r232);
    |  float r234 = r212.x;
    |  float r235 = r49-r234;
    |  float r236 = r229*r235;
    |  float r237 = r233*r234;
    |  float r238 = r236+r237;
    |  float r239 = r225+r37;
    |  float r240 = sin(r239);
    |  float r241 = r240*r46;
    |  float r242 = fract(r241);
    |  float r243 = r225+r63;
    |  float r244 = sin(r243);
    |  float r245 = r244*r46;
    |  float r246 = fract(r245);
    |  float r247 = r212.x;
    |  float r248 = r49-r247;
    |  float r249 = r242*r248;
    |  float r250 = r246*r247;
    |  float r251 = r249+r250;
    |  float r252 = r212.y;
    |  float r253 = r49-r252;
    |  float r254 = r238*r253;
    |  float r255 = r251*r252;
    |  float r256 = r254+r255;
    |  float r257 = r225+r40;
    |  float r258 = sin(r257);
    |  float r259 = r258*r46;
    |  float r260 = fract(r259);
    |  float r261 = r225+r82;
    |  float r262 = sin(r261);
    |  float r263 = r262*r46;
    |  float r264 = fract(r263);
    |  float r265 = r212.x;
    |  float r266 = r49-r265;
    |  float r267 = r260*r266;
    |  float r268 = r264*r265;
    |  float r269 = r267+r268;
    |  float r270 = r225+r92;
    |  float r271 = sin(r270);
    |  float r272 = r271*r46;
    |  float r273 = fract(r272);
    |  float r274 = r225+r97;
    |  float r275 = sin(r274);
    |  float r276 = r275*r46;
    |  float r277 = fract(r276);
    |  float r278 = r212.x;
    |  float r279 = r49-r278;
    |  float r280 = r273*r279;
    |  float r281 = r277*r278;
    |  float r282 = r280+r281;
    |  float r283 = r212.y;
    |  float r284 = r49-r283;
    |  float r285 = r269*r284;
    |  float r286 = r282*r283;
    |  float r287 = r285+r286;
    |  float r288 = r212.z;
    |  float r289 = r49-r288;
    |  float r290 = r256*r289;
    |  float r291 = r287*r288;
    |  float r292 = r290+r291;
    |  float r293 = r210*r292;
    |  float r294 = r23+r293;
    |  r23=r294;
    |  float r296 = r23/r295;
    |  bool r306 = r296<r122;
    |  float r308 = r296*r307;
    |  float r309 = r49-r308;
    |  vec3 r310 = vec3(r309);
    |  vec3 r311 = r305*r310;
    |  vec3 r312 = vec3(r308);
    |  vec3 r313 = r303*r312;
    |  vec3 r314 = r311+r313;
    |  bool r315 = r296<r24;
    |  float r316 = r296*r307;
    |  float r317 = r316-r49;
    |  float r318 = r49-r317;
    |  vec3 r319 = vec3(r318);
    |  vec3 r320 = r303*r319;
    |  vec3 r321 = vec3(r317);
    |  vec3 r322 = r301*r321;
    |  vec3 r323 = r320+r322;
    |  bool r325 = r296<r324;
    |  float r326 = r296*r307;
    |  float r327 = r326-r29;
    |  float r328 = r49-r327;
    |  vec3 r329 = vec3(r328);
    |  vec3 r330 = r301*r329;
    |  vec3 r331 = vec3(r327);
    |  vec3 r332 = r300*r331;
    |  vec3 r333 = r330+r332;
    |  float r334 = r296*r307;
    |  float r335 = r334-r28;
    |  float r336 = r49-r335;
    |  vec3 r337 = vec3(r336);
    |  vec3 r338 = r300*r337;
    |  vec3 r339 = vec3(r335);
    |  vec3 r340 = r299*r339;
    |  vec3 r341 = r338+r340;
    |  vec3 r342 =(r325 ? r333 : r341);
    |  vec3 r343 =(r315 ? r323 : r342);
    |  vec3 r344 =(r306 ? r314 : r343);
    |  return r344;
    |}
    |const vec3 bbox_min = vec3(-6.0,-6.0,-6.0);
    |const vec3 bbox_max = vec3(6.0,6.0,6.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
    {name: "rv_Amplitude", type: "float", value: 0, label: "Amplitude", config: {slider:[0,20]}};
  ];
}
