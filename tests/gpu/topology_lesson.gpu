{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-0.75,-0.375,-0.5],[0.37499999999999994,0.375,0.5]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 2000.0;
    |const float contrast = 0.5;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |uniform float rv_Morph;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r2 = vec3(-0.375,0.0,0.0);
    |  float r15 = 0.5;
    |  float r19 = 0.0;
    |  float r23 = 0.375;
    |  float r36 = 1.5707963267948966;
    |  vec3 r37 = vec3(1.0,0.0,0.0);
    |  float r68 = 1.0;
    |  float r82 = 0.325;
    |  float r86 = 0.05;
    |  vec3 r93 = vec3(1.0,0.0,0.0);
    |  float r140 = 0.15;
    |  float r142 = rv_Morph;
    |  float r148 = 2.0;
    |  float r149 = r142*r148;
    |  vec3 r150 = vec3(0.0,0.0,r149);
    |  vec3 r162 = vec3(-0.375,0.0,0.575);
    |  float r181 = 0.3375;
    |  float r247 = 1.5;
    |  /* body */
    |  float r1 = r0.x;
    |  float r3 = r2.x;
    |  float r4 = r1-r3;
    |  float r5 = r0.y;
    |  float r6 = r2.y;
    |  float r7 = r5-r6;
    |  float r8 = r0.z;
    |  float r9 = r2.z;
    |  float r10 = r8-r9;
    |  float r11 = r0.w;
    |  vec4 r12 = vec4(r4,r7,r10,r11);
    |  float r13 = r12.z;
    |  float r14 = abs(r13);
    |  float r16 = r14-r15;
    |  float r17 = r12.x;
    |  float r18 = r12.y;
    |  float r20 = r12.w;
    |  vec2 r21 = vec2(r17,r18);
    |  float r22 = length(r21);
    |  float r24 = r22-r23;
    |  vec2 r25 = vec2(r16,r24);
    |  vec2 r26 = vec2(r19);
    |  vec2 r27 = max(r25,r26);
    |  float r28 = length(r27);
    |  float r29 = max(r16,r24);
    |  float r30 = min(r29,r19);
    |  float r31 = r28+r30;
    |  float r32 = r0[0];
    |  float r33 = r0[1];
    |  float r34 = r0[2];
    |  float r35 = r0[3];
    |  vec3 r38 = vec3(r32,r33,r34);
    |  float r39 = cos(r36);
    |  vec3 r40 = vec3(r39);
    |  vec3 r41 = r38*r40;
    |  float r42 = r37.y;
    |  float r43 = r38.z;
    |  float r44 = r42*r43;
    |  float r45 = r37.z;
    |  float r46 = r38.y;
    |  float r47 = r45*r46;
    |  float r48 = r44-r47;
    |  float r49 = r37.z;
    |  float r50 = r38.x;
    |  float r51 = r49*r50;
    |  float r52 = r37.x;
    |  float r53 = r38.z;
    |  float r54 = r52*r53;
    |  float r55 = r51-r54;
    |  float r56 = r37.x;
    |  float r57 = r38.y;
    |  float r58 = r56*r57;
    |  float r59 = r37.y;
    |  float r60 = r38.x;
    |  float r61 = r59*r60;
    |  float r62 = r58-r61;
    |  vec3 r63 = vec3(r48,r55,r62);
    |  float r64 = sin(r36);
    |  vec3 r65 = vec3(r64);
    |  vec3 r66 = r63*r65;
    |  vec3 r67 = r41-r66;
    |  float r69 = cos(r36);
    |  float r70 = r68-r69;
    |  vec3 r71 = vec3(r70);
    |  vec3 r72 = r38*r71;
    |  float r73 = dot(r37,r72);
    |  vec3 r74 = vec3(r73);
    |  vec3 r75 = r37*r74;
    |  vec3 r76 = r67+r75;
    |  float r77 = r76.x;
    |  float r78 = r76.y;
    |  float r79 = r76.z;
    |  vec2 r80 = vec2(r77,r78);
    |  float r81 = length(r80);
    |  float r83 = r81-r82;
    |  vec2 r84 = vec2(r83,r79);
    |  float r85 = length(r84);
    |  float r87 = r85-r86;
    |  float r88 = min(r31,r87);
    |  float r89 = r0[0];
    |  float r90 = r0[1];
    |  float r91 = r0[2];
    |  float r92 = r0[3];
    |  vec3 r94 = vec3(r89,r90,r91);
    |  float r95 = cos(r36);
    |  vec3 r96 = vec3(r95);
    |  vec3 r97 = r94*r96;
    |  float r98 = r93.y;
    |  float r99 = r94.z;
    |  float r100 = r98*r99;
    |  float r101 = r93.z;
    |  float r102 = r94.y;
    |  float r103 = r101*r102;
    |  float r104 = r100-r103;
    |  float r105 = r93.z;
    |  float r106 = r94.x;
    |  float r107 = r105*r106;
    |  float r108 = r93.x;
    |  float r109 = r94.z;
    |  float r110 = r108*r109;
    |  float r111 = r107-r110;
    |  float r112 = r93.x;
    |  float r113 = r94.y;
    |  float r114 = r112*r113;
    |  float r115 = r93.y;
    |  float r116 = r94.x;
    |  float r117 = r115*r116;
    |  float r118 = r114-r117;
    |  vec3 r119 = vec3(r104,r111,r118);
    |  float r120 = sin(r36);
    |  vec3 r121 = vec3(r120);
    |  vec3 r122 = r119*r121;
    |  vec3 r123 = r97-r122;
    |  float r124 = cos(r36);
    |  float r125 = r68-r124;
    |  vec3 r126 = vec3(r125);
    |  vec3 r127 = r94*r126;
    |  float r128 = dot(r93,r127);
    |  vec3 r129 = vec3(r128);
    |  vec3 r130 = r93*r129;
    |  vec3 r131 = r123+r130;
    |  float r132 = r131.x;
    |  float r133 = r131.y;
    |  float r134 = r131.z;
    |  vec2 r135 = vec2(r132,r133);
    |  float r136 = length(r135);
    |  float r137 = r136-r82;
    |  vec2 r138 = vec2(r137,r134);
    |  float r139 = length(r138);
    |  float r141 = r139-r140;
    |  float r143 = r68-r142;
    |  float r144 = r88*r143;
    |  float r145 = r141*r142;
    |  float r146 = r144+r145;
    |  float r147 = r0.x;
    |  float r151 = r150.x;
    |  float r152 = r147-r151;
    |  float r153 = r0.y;
    |  float r154 = r150.y;
    |  float r155 = r153-r154;
    |  float r156 = r0.z;
    |  float r157 = r150.z;
    |  float r158 = r156-r157;
    |  float r159 = r0.w;
    |  vec4 r160 = vec4(r152,r155,r158,r159);
    |  float r161 = r160.x;
    |  float r163 = r162.x;
    |  float r164 = r161-r163;
    |  float r165 = r160.y;
    |  float r166 = r162.y;
    |  float r167 = r165-r166;
    |  float r168 = r160.z;
    |  float r169 = r162.z;
    |  float r170 = r168-r169;
    |  float r171 = r160.w;
    |  vec4 r172 = vec4(r164,r167,r170,r171);
    |  float r173 = r172.z;
    |  float r174 = abs(r173);
    |  float r175 = r174-r68;
    |  float r176 = r172.x;
    |  float r177 = r172.y;
    |  float r178 = r172.w;
    |  vec2 r179 = vec2(r176,r177);
    |  float r180 = length(r179);
    |  float r182 = r180-r181;
    |  vec2 r183 = vec2(r175,r182);
    |  vec2 r184 = vec2(r19);
    |  vec2 r185 = max(r183,r184);
    |  float r186 = length(r185);
    |  float r187 = max(r175,r182);
    |  float r188 = min(r187,r19);
    |  float r189 = r186+r188;
    |  float r190 = r0[0];
    |  float r191 = r0[1];
    |  float r192 = r0[2];
    |  float r193 = r0[3];
    |  vec3 r194 = vec3(r190,r191,r192);
    |  float r195 = cos(r36);
    |  vec3 r196 = vec3(r195);
    |  vec3 r197 = r194*r196;
    |  float r198 = r93.y;
    |  float r199 = r194.z;
    |  float r200 = r198*r199;
    |  float r201 = r93.z;
    |  float r202 = r194.y;
    |  float r203 = r201*r202;
    |  float r204 = r200-r203;
    |  float r205 = r93.z;
    |  float r206 = r194.x;
    |  float r207 = r205*r206;
    |  float r208 = r93.x;
    |  float r209 = r194.z;
    |  float r210 = r208*r209;
    |  float r211 = r207-r210;
    |  float r212 = r93.x;
    |  float r213 = r194.y;
    |  float r214 = r212*r213;
    |  float r215 = r93.y;
    |  float r216 = r194.x;
    |  float r217 = r215*r216;
    |  float r218 = r214-r217;
    |  vec3 r219 = vec3(r204,r211,r218);
    |  float r220 = sin(r36);
    |  vec3 r221 = vec3(r220);
    |  vec3 r222 = r219*r221;
    |  vec3 r223 = r197-r222;
    |  float r224 = cos(r36);
    |  float r225 = r68-r224;
    |  vec3 r226 = vec3(r225);
    |  vec3 r227 = r194*r226;
    |  float r228 = dot(r93,r227);
    |  vec3 r229 = vec3(r228);
    |  vec3 r230 = r93*r229;
    |  vec3 r231 = r223+r230;
    |  float r232 = r231.x;
    |  float r233 = r231.y;
    |  float r234 = r231.z;
    |  vec2 r235 = vec2(r232,r233);
    |  float r236 = length(r235);
    |  float r237 = r236-r82;
    |  vec2 r238 = vec2(r237,r234);
    |  float r239 = length(r238);
    |  float r240 = r239-r140;
    |  float r241 = r68-r142;
    |  float r242 = r189*r241;
    |  float r243 = r240*r142;
    |  float r244 = r242+r243;
    |  float r245 = -(r244);
    |  float r246 = max(r146,r245);
    |  float r248 = r246/r247;
    |  return r248;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  vec3 r1 = vec3(0.9573695761995268,0.8355277914608409,0.6870308121546249);
    |  vec3 r2 = vec3(0.20109572962134564,0.04614884242235095,0.0);
    |  float r3 = rv_Morph;
    |  float r4 = 1.0;
    |  /* body */
    |  float r5 = r4-r3;
    |  vec3 r6 = vec3(r5);
    |  vec3 r7 = r1*r6;
    |  vec3 r8 = vec3(r3);
    |  vec3 r9 = r2*r8;
    |  vec3 r10 = r7+r9;
    |  return r10;
    |}
    |const vec3 bbox_min = vec3(-0.75,-0.375,-0.5);
    |const vec3 bbox_max = vec3(0.37499999999999994,0.375,0.5);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col, iqcol, contrast);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
    {name: "rv_Morph", type: "float", value: 0, label: "Morph", config: {slider:[0,1]}};
  ];
}
