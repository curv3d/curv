{
  is_2d: #false;
  is_3d: #true;
  bbox: [[-5,-5,-1],[5,5,1]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |const int ray_max_iter = 200;
    |const float ray_max_depth = 400.0;
    |uniform vec3 u_eye3d;
    |uniform vec3 u_centre3d;
    |uniform vec3 u_up3d;
    |uniform float rv_Swirl_Diameter;
    |uniform float rv_Swirl_Strength;
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r3 = 0.0;
    |  float r15 = rv_Swirl_Strength;
    |  float r16 = 2.718281828459045;
    |  float r18 = 0.6931471805599453;
    |  float r19 = rv_Swirl_Diameter;
    |  float r20 = r18*r19;
    |  float r21 = 10.0;
    |  float r22 = r20/r21;
    |  float r23 = r22;
    |  float r44 = 1.9634954084936207;
    |  float r48 = 0.7853981633974483;
    |  vec2 r66 = vec2(0.0,-1.0/0.0);
    |  vec2 r73 = vec2(1.0/0.0,1.0/0.0);
    |  vec2 r103 = vec2(-1.0/0.0,-1.0/0.0);
    |  vec2 r110 = vec2(0.0,1.0/0.0);
    |  float r143 = 4.0;
    |  float r153 = 1.0;
    |  /* body */
    |  float r1 = r0.z;
    |  float r2 = abs(r1);
    |  float r4 = r2-r3;
    |  float r5 = r0.x;
    |  float r6 = r0.y;
    |  float r7 = r0.w;
    |  vec4 r8 = vec4(r5,r6,r3,r7);
    |  float r9 = r8[0];
    |  float r10 = r8[1];
    |  float r11 = r8[2];
    |  float r12 = r8[3];
    |  vec2 r13 = vec2(r9,r10);
    |  float r14 = length(r13);
    |  float r17 = -(r14);
    |  float r24 = r17/r23;
    |  float r25 = pow(r16,r24);
    |  float r26 = r15*r25;
    |  vec2 r27 = vec2(r9,r10);
    |  float r28 = atan(r27.y,r27.x);
    |  float r29 = r26+r28;
    |  float r30 = cos(r29);
    |  float r31 = sin(r29);
    |  vec2 r32 = vec2(r30,r31);
    |  vec2 r33 = vec2(r14);
    |  vec2 r34 = r33*r32;
    |  float r35 = r34.x;
    |  float r36 = r34.y;
    |  vec4 r37 = vec4(r35,r36,r11,r12);
    |  float r38 = r37[0];
    |  float r39 = r37[1];
    |  float r40 = r37[2];
    |  float r41 = r37[3];
    |  vec2 r42 = vec2(r38,r39);
    |  float r43 = atan(r42.y,r42.x);
    |  float r45 = r43+r44;
    |  vec2 r46 = vec2(r38,r39);
    |  float r47 = length(r46);
    |  float r49 = r45/r48;
    |  float r50 = floor(r49);
    |  float r51 = r48*r50;
    |  float r52 = r45-r51;
    |  float r53 = r52-r44;
    |  float r54 = cos(r53);
    |  float r55 = sin(r53);
    |  vec2 r56 = vec2(r54,r55);
    |  vec2 r57 = vec2(r47);
    |  vec2 r58 = r56*r57;
    |  float r59 = r58.x;
    |  float r60 = r58.y;
    |  vec4 r61 = vec4(r59,r60,r40,r41);
    |  float r62 = r61[0];
    |  float r63 = r61[1];
    |  float r64 = r61[2];
    |  float r65 = r61[3];
    |  vec2 r67 = vec2(r62,r63);
    |  vec2 r68 = r66-r67;
    |  float r69 = r68[0];
    |  float r70 = r68[1];
    |  float r71 = max(r69,r70);
    |  vec2 r72 = vec2(r62,r63);
    |  vec2 r74 = r72-r73;
    |  float r75 = r74[0];
    |  float r76 = r74[1];
    |  float r77 = max(r75,r76);
    |  float r78 = max(r71,r77);
    |  float r79 = r66.x;
    |  float r80 = r73.x;
    |  bool r81 = r62<r79;
    |  float r82 = r79-r62;
    |  bool r83 = r62>r80;
    |  float r84 = r62-r80;
    |  float r85 =(r83 ? r84 : r3);
    |  float r86 =(r81 ? r82 : r85);
    |  float r87 = r66.y;
    |  float r88 = r73.y;
    |  bool r89 = r63<r87;
    |  float r90 = r87-r63;
    |  bool r91 = r63>r88;
    |  float r92 = r63-r88;
    |  float r93 =(r91 ? r92 : r3);
    |  float r94 =(r89 ? r90 : r93);
    |  vec2 r95 = vec2(r86,r94);
    |  float r96 = length(r95);
    |  bool r97 = r78<=r3;
    |  float r98 =(r97 ? r78 : r96);
    |  float r99 = r61[0];
    |  float r100 = r61[1];
    |  float r101 = r61[2];
    |  float r102 = r61[3];
    |  vec2 r104 = vec2(r99,r100);
    |  vec2 r105 = r103-r104;
    |  float r106 = r105[0];
    |  float r107 = r105[1];
    |  float r108 = max(r106,r107);
    |  vec2 r109 = vec2(r99,r100);
    |  vec2 r111 = r109-r110;
    |  float r112 = r111[0];
    |  float r113 = r111[1];
    |  float r114 = max(r112,r113);
    |  float r115 = max(r108,r114);
    |  float r116 = r103.x;
    |  float r117 = r110.x;
    |  bool r118 = r99<r116;
    |  float r119 = r116-r99;
    |  bool r120 = r99>r117;
    |  float r121 = r99-r117;
    |  float r122 =(r120 ? r121 : r3);
    |  float r123 =(r118 ? r119 : r122);
    |  float r124 = r103.y;
    |  float r125 = r110.y;
    |  bool r126 = r100<r124;
    |  float r127 = r124-r100;
    |  bool r128 = r100>r125;
    |  float r129 = r100-r125;
    |  float r130 =(r128 ? r129 : r3);
    |  float r131 =(r126 ? r127 : r130);
    |  vec2 r132 = vec2(r123,r131);
    |  float r133 = length(r132);
    |  bool r134 = r115<=r3;
    |  float r135 =(r134 ? r115 : r133);
    |  float r136 = min(r98,r135);
    |  float r137 = r8[0];
    |  float r138 = r8[1];
    |  float r139 = r8[2];
    |  float r140 = r8[3];
    |  vec2 r141 = vec2(r137,r138);
    |  float r142 = length(r141);
    |  float r144 = r142-r143;
    |  float r145 = max(r136,r144);
    |  vec2 r146 = vec2(r4,r145);
    |  vec2 r147 = vec2(r3);
    |  vec2 r148 = max(r146,r147);
    |  float r149 = length(r148);
    |  float r150 = max(r4,r145);
    |  float r151 = min(r150,r3);
    |  float r152 = r149+r151;
    |  float r154 = r152-r153;
    |  return r154;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r3 = 0.0;
    |  float r12 = rv_Swirl_Strength;
    |  float r13 = 2.718281828459045;
    |  float r15 = 0.6931471805599453;
    |  float r16 = rv_Swirl_Diameter;
    |  float r17 = r15*r16;
    |  float r18 = 10.0;
    |  float r19 = r17/r18;
    |  float r20 = r19;
    |  float r41 = 1.9634954084936207;
    |  float r45 = 0.7853981633974483;
    |  vec2 r63 = vec2(0.0,-1.0/0.0);
    |  vec2 r70 = vec2(1.0/0.0,1.0/0.0);
    |  vec2 r100 = vec2(-1.0/0.0,-1.0/0.0);
    |  vec2 r107 = vec2(0.0,1.0/0.0);
    |  vec3 r136 = vec3(1.0,1.0,0.6120655998656237);
    |  vec3 r137 = vec3(1.0,0.0,0.0);
    |  /* body */
    |  float r1 = r0.x;
    |  float r2 = r0.y;
    |  float r4 = r0.w;
    |  vec4 r5 = vec4(r1,r2,r3,r4);
    |  float r6 = r5[0];
    |  float r7 = r5[1];
    |  float r8 = r5[2];
    |  float r9 = r5[3];
    |  vec2 r10 = vec2(r6,r7);
    |  float r11 = length(r10);
    |  float r14 = -(r11);
    |  float r21 = r14/r20;
    |  float r22 = pow(r13,r21);
    |  float r23 = r12*r22;
    |  vec2 r24 = vec2(r6,r7);
    |  float r25 = atan(r24.y,r24.x);
    |  float r26 = r23+r25;
    |  float r27 = cos(r26);
    |  float r28 = sin(r26);
    |  vec2 r29 = vec2(r27,r28);
    |  vec2 r30 = vec2(r11);
    |  vec2 r31 = r30*r29;
    |  float r32 = r31.x;
    |  float r33 = r31.y;
    |  vec4 r34 = vec4(r32,r33,r8,r9);
    |  float r35 = r34[0];
    |  float r36 = r34[1];
    |  float r37 = r34[2];
    |  float r38 = r34[3];
    |  vec2 r39 = vec2(r35,r36);
    |  float r40 = atan(r39.y,r39.x);
    |  float r42 = r40+r41;
    |  vec2 r43 = vec2(r35,r36);
    |  float r44 = length(r43);
    |  float r46 = r42/r45;
    |  float r47 = floor(r46);
    |  float r48 = r45*r47;
    |  float r49 = r42-r48;
    |  float r50 = r49-r41;
    |  float r51 = cos(r50);
    |  float r52 = sin(r50);
    |  vec2 r53 = vec2(r51,r52);
    |  vec2 r54 = vec2(r44);
    |  vec2 r55 = r53*r54;
    |  float r56 = r55.x;
    |  float r57 = r55.y;
    |  vec4 r58 = vec4(r56,r57,r37,r38);
    |  float r59 = r58[0];
    |  float r60 = r58[1];
    |  float r61 = r58[2];
    |  float r62 = r58[3];
    |  vec2 r64 = vec2(r59,r60);
    |  vec2 r65 = r63-r64;
    |  float r66 = r65[0];
    |  float r67 = r65[1];
    |  float r68 = max(r66,r67);
    |  vec2 r69 = vec2(r59,r60);
    |  vec2 r71 = r69-r70;
    |  float r72 = r71[0];
    |  float r73 = r71[1];
    |  float r74 = max(r72,r73);
    |  float r75 = max(r68,r74);
    |  float r76 = r63.x;
    |  float r77 = r70.x;
    |  bool r78 = r59<r76;
    |  float r79 = r76-r59;
    |  bool r80 = r59>r77;
    |  float r81 = r59-r77;
    |  float r82 =(r80 ? r81 : r3);
    |  float r83 =(r78 ? r79 : r82);
    |  float r84 = r63.y;
    |  float r85 = r70.y;
    |  bool r86 = r60<r84;
    |  float r87 = r84-r60;
    |  bool r88 = r60>r85;
    |  float r89 = r60-r85;
    |  float r90 =(r88 ? r89 : r3);
    |  float r91 =(r86 ? r87 : r90);
    |  vec2 r92 = vec2(r83,r91);
    |  float r93 = length(r92);
    |  bool r94 = r75<=r3;
    |  float r95 =(r94 ? r75 : r93);
    |  float r96 = r58[0];
    |  float r97 = r58[1];
    |  float r98 = r58[2];
    |  float r99 = r58[3];
    |  vec2 r101 = vec2(r96,r97);
    |  vec2 r102 = r100-r101;
    |  float r103 = r102[0];
    |  float r104 = r102[1];
    |  float r105 = max(r103,r104);
    |  vec2 r106 = vec2(r96,r97);
    |  vec2 r108 = r106-r107;
    |  float r109 = r108[0];
    |  float r110 = r108[1];
    |  float r111 = max(r109,r110);
    |  float r112 = max(r105,r111);
    |  float r113 = r100.x;
    |  float r114 = r107.x;
    |  bool r115 = r96<r113;
    |  float r116 = r113-r96;
    |  bool r117 = r96>r114;
    |  float r118 = r96-r114;
    |  float r119 =(r117 ? r118 : r3);
    |  float r120 =(r115 ? r116 : r119);
    |  float r121 = r100.y;
    |  float r122 = r107.y;
    |  bool r123 = r97<r121;
    |  float r124 = r121-r97;
    |  bool r125 = r97>r122;
    |  float r126 = r97-r122;
    |  float r127 =(r125 ? r126 : r3);
    |  float r128 =(r123 ? r124 : r127);
    |  vec2 r129 = vec2(r120,r128);
    |  float r130 = length(r129);
    |  bool r131 = r112<=r3;
    |  float r132 =(r131 ? r112 : r130);
    |  bool r133 = r132<=r3;
    |  bool r134 = r132<=r95;
    |  bool r135 =(r133 || r134);
    |  vec3 r138 =(r135 ? r136 : r137);
    |  return r138;
    |}
    |const vec3 bbox_min = vec3(-5.0,-5.0,-1.0);
    |const vec3 bbox_max = vec3(5.0,5.0,1.0);
    |// ray marching. ro is ray origin, rd is ray direction (unit vector).
    |// result is (t,r,g,b), where
    |//  * t is the distance that we marched,
    |//  * r,g,b is the colour of the distance field at the point we ended up at.
    |//    (-1,-1,-1) means no object was hit.
    |vec4 castRay( in vec3 ro, in vec3 rd, float time )
    |{
    |    float tmin = 0.0;
    |    float tmax = ray_max_depth;
    |   
    |    float t = tmin;
    |    vec3 c = vec3(-1.0,-1.0,-1.0);
    |    for (int i=0; i<ray_max_iter; i++) {
    |        float precis = 0.0005*t;
    |        vec4 p = vec4(ro+rd*t,time);
    |        float d = dist(p);
    |        if (abs(d) < abs(precis)) {
    |            c = colour(p);
    |            break;
    |        }
    |        t += d;
    |        if (t > tmax) break;
    |    }
    |    return vec4( t, c );
    |}
    |vec3 calcNormal( in vec3 pos, float time )
    |{
    |    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    |    return normalize( e.xyy*dist( vec4(pos + e.xyy,time) ) + 
    |                      e.yyx*dist( vec4(pos + e.yyx,time) ) + 
    |                      e.yxy*dist( vec4(pos + e.yxy,time) ) + 
    |                      e.xxx*dist( vec4(pos + e.xxx,time) ) );
    |}
    |float calcAO( in vec3 pos, in vec3 nor, float time )
    |{
    |    float occ = 0.0;
    |    float sca = 1.0;
    |    for( int i=0; i<5; i++ )
    |    {
    |        float hr = 0.01 + 0.12*float(i)/4.0;
    |        vec3 aopos =  nor * hr + pos;
    |        float dd = dist( vec4(aopos,time) );
    |        occ += -(dd-hr)*sca;
    |        sca *= 0.95;
    |    }
    |    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    
    |}
    |// in ro: ray origin
    |// in rd: ray direction
    |// out: rgb colour
    |vec3 render( in vec3 ro, in vec3 rd, float time )
    |{ 
    |    //vec3 col = vec3(0.7, 0.9, 1.0) +rd.z*0.8;
    |    vec3 col = background_colour;
    |    vec4 res = castRay(ro,rd, time);
    |    float t = res.x;
    |    vec3 c = res.yzw;
    |    if( c.x>=0.0 )
    |    {
    |        vec3 pos = ro + t*rd;
    |        vec3 nor = calcNormal( pos, time );
    |        vec3 ref = reflect( rd, nor );
    |        
    |        // material        
    |        col = c;
    |
    |        // lighting        
    |        float occ = calcAO( pos, nor, time );
    |        vec3  lig = normalize( vec3(-0.4, 0.6, 0.7) );
    |        float amb = clamp( 0.5+0.5*nor.z, 0.0, 1.0 );
    |        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
    |        float bac = clamp( dot( nor, normalize(vec3(-lig.x,lig.y,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.z,0.0,1.0);
    |        float dom = smoothstep( -0.1, 0.1, ref.z );
    |        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
    |        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
    |        
    |        vec3 lin = vec3(0.0);
    |        lin += 1.30*dif*vec3(1.00,0.80,0.55);
    |        lin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;
    |        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
    |        lin += 0.50*bac*vec3(0.35,0.35,0.35)*occ;
    |        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
    |        vec3 iqcol = col*lin;
    |
    |        //col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );
    |        col = mix(col,iqcol, 0.5);
    |    }
    |
    |    return vec3( clamp(col,0.0,1.0) );
    |}
    |// Create a matrix to transform coordinates to look towards a given point.
    |// * `eye` is the position of the camera.
    |// * `centre` is the position to look towards.
    |// * `up` is the 'up' direction.
    |mat3 look_at(vec3 eye, vec3 centre, vec3 up)
    |{
    |    vec3 ww = normalize(centre - eye);
    |    vec3 uu = normalize(cross(ww, up));
    |    vec3 vv = normalize(cross(uu, ww));
    |    return mat3(uu, vv, ww);
    |}
    |// Generate a ray direction for ray-casting.
    |// * `camera` is the camera look-at matrix.
    |// * `pos` is the screen position, normally in the range -1..1
    |// * `lens` is the lens length of the camera (encodes field-of-view).
    |//   0 is very wide, and 2 is a good default.
    |vec3 ray_direction(mat3 camera, vec2 pos, float lens)
    |{
    |    return normalize(camera * vec3(pos, lens));
    |}
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec3 col = vec3(0.0);
    |    const vec3 origin = (bbox_min + bbox_max) / 2.0;
    |    const vec3 radius = (bbox_max - bbox_min) / 2.0;
    |    float r = max(radius.x, max(radius.y, radius.z)) / 1.3;
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 o = vec2(0.0);
    |#endif
    |    vec2 p = -1.0 + 2.0 * (fragCoord+o) / iResolution.xy;
    |    p.x *= iResolution.x/iResolution.y;
    |
    |    vec3 eye = vec3(u_eye3d.x, -u_eye3d.z, u_eye3d.y)*r + origin;
    |    vec3 centre = vec3(u_centre3d.x, -u_centre3d.z, u_centre3d.y)*r + origin;
    |    vec3 up = vec3(u_up3d.x, -u_up3d.z, u_up3d.y);
    |    mat3 camera = look_at(eye, centre, up);
    |    vec3 dir = ray_direction(camera, p, 2.5);
    |
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    col += render( eye, dir, time );
    |
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |
    |    // convert linear RGB to sRGB
    |    col = pow(col, vec3(0.454545454545454545));
    |    fragColour = vec4(col,1.0);
    |}
    ";
  parameters: [
    {name: "rv_Swirl_Diameter", type: "float", value: 16, label: "Swirl_Diameter", config: {slider:[4,40]}};
    {name: "rv_Swirl_Strength", type: "float", value: 4, label: "Swirl_Strength", config: {slider:[-10,10]}};
  ];
}
