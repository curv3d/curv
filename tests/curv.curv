do
assert(is_list 0 == false);
assert(is_list[]);

assert(bit(false)==0 && bit(true)==1);

assert( dot [[], []] == 0 );
assert( dot [[[1,2],[3,4]], [[2,0],[1,2]]] == [[4,4],[10,8]] );
assert( dot [[[1,2,3],[4,5,6]], [9,8,7]] == [46,118] );
assert( dot [[1,2,3], [[2,1,3],[3,3,2],[4,1,2]]] == [20,10,13] );
assert(
    dot[ [[[1],[2]],[[3],[4]]], [[1,2]] ]
    == [[[1,2],[2,4]],[[3,6],[4,8]]]
);
sc_test {
    'dot[vec,vec]': _-> dot[[1,2], [3,4]] == 11;
    'dot[vec,mat]': _-> dot[[1,2], [[3,4],[5,6]]] == [13,16];
    'dot[mat,vec]': _-> dot[[[1,2],[3,4]], [5,6]] == [17,39];
    'dot[mat,mat]': _-> dot[[[1,2],[3,4]], [[5,6],[7,8]]] == [[19,22],[43,50]];
};

// matrix (mat2,mat3,mat4 in GLSL)
let m = [[0,1],[2,3]];
    a = [m];
in sc_test {
    'm.[i,j]': _-> m.[0,0]==0 && m.[0,1]==1 && m.[1,0]==2 && m.[1,1]==3;
    'm.[i]': _-> m.[0]==[0,1] && m.[1]==[2,3];
    'a.[i]': _-> a.[0] == m;
    //'a.[i,j]': _-> a.[0,0] == [0,1];
    //'a.[i,j,k]': _-> a.[0,1,1] == 3;
};

assert(cross[[2,3,4],[5,6,7]] == [-3,6,-3]);

assert(
  idmatrix 3 ==
  [[1,0,0],
   [0,1,0],
   [0,0,1]]
);

assert(
    (let a = 1;
         b = 2;
         c = let x=10; y=20 in [x,y];
     in [a,b,c])
    == [1,2,[10,20]]
);

assert(
    let r = {'x':1,y:2};
    in r.x==1 && r.'y'==2
);

assert(
  let r = {a:1};
  in defined(r.a) && not(defined(r.b)) && defined(r.[#a])
);

assert((0..<5) == [0,1,2,3,4]);

assert(reverse[1,2,3] == [3,2,1] && reverse[] == []);
assert(sum[1,2,3]==6 && sum[]==0);

assert(
  (let f[x,y] = x+y; a = [2,3]; in f a)
  == 5
);

assert([1,2,3].[0] == 1);
assert([1,2,3].[[0,2]] == [1,3]);

assert((sqrt << 4) == 2);
assert((1..10 >> map(x->x^2) >> reverse) == [100,81,64,49,36,25,16,9,4,1]);

assert((let q=1; m={a=q;f x = x + a}; in m.f 3) == 4);

assert(
    let f x = if (x <= 0) 1 else x * f(x-1);
    in f 3 == 6
);

assert( 
    let f =
            let zero = 0;
                m = { f g x = if (x > zero) f g (g x) else x };
            in m.f(a->a-1);
    in f 3.25 == -.75
);
assert(
    let n=4;
        s=sqrt;
    in (let na = (n+5);
            rpr f = f na;
        in rpr s) == 3
);

assert(
    let a = 1;
        f x = x + a;
    in f 2 == 3
);

assert(
    (let a=1 in do a:=a+2 in a) == 3
);

assert(
  (let a = 1;
   in do
      if (a > 0)
          a := a + 2
      else
          (a) := a - 2;
   in a) == 3
);

assert(
  (let a = 1;
   in do
      if (a > 0) (
          a := a + 2
      );
   in a) == 3
);

assert(
  (do local a = 1;
      local b = 2;
      if (a > 0) (
          a := a + 2;
          b := b + 3;
      );
   in a + b) == 8
);

assert(
    let Sum list =
            do  local i = 0;
                local total = 0;
                while (i < count list) (
                    total := total + list.[i];
                    i := i + 1;
                );
            in total;
    in Sum(1,2,3) == 6
);

assert(
    is_bool false && is_num 42 && is_string "" && is_list []
    && is_record{a:1} && is_record{a=1} && is_record(cube 1)
    && not(is_record[])
    && is_func(x->x) && is_shape(cube 1)
);

assert(
    transpose [] == [] &&
    transpose [[]] == [] &&
    transpose [[],[]] == [] &&
    transpose [[1]] == [[1]] &&
    transpose [[1],[2]] == [[1,2]] &&
    transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]
);

assert( asin 1 == 1.5707963267948966 && acos 1 == 0 );

assert( round 0.5 == 0 && round 1.5 == 2 );

assert( indices(1,2) == [0,1] && fields{a:1} == [#a]
    //&& fields[{},{b:2}] == [[],[#b]]
    );

assert(
    let a = {x:1, y:2};
    in {...a, x:3} == {x:3, y:2}
);

assert( merge({a:1,z:26},{b:17,a:42}) == {a:42,b:17,z:26} );

assert( {call x = x + 1} 3 == 4 );

assert( strcat("foo","bar",0) == "foobar0" );

assert( [if (true) ()] == [] );

assert( "$(2+2)" == "4" && "$("foo")" == ""_foo"_" && "${"foo"}" == "foo" );

assert( (let x=1 in x+2) == 3
    && (let x=2; y=3; in x+y) == 5
);
assert( [if (true) (1;2)] == [1,2] );
assert( {if (true) (a:1;b:2)} == {a:1,b:2} );

assert( (x+y where (x=1;y=2)) == 3 );

assert_error["foo",error "foo"];
assert_error[
    "assertion failed: expected error "_foo"_, actual error "_bar"_",
    do assert_error["foo",error "bar"] in null];
assert_error[
    "assertion failed: expected error "_foo"_, got value "_bar"_",
    do assert_error["foo","bar"] in null];

exec(file "scope.curv");

assert_error[
    "argument #1 of file: illegal recursive reference to file "_a"_",
    file "a"];

assert({a:1;b:2} == {a:1,b:2});

let include{a:1,b:2} in assert(a+b==3);
let include{a=1;b=2} in assert(a+b==3);

let [a,[b,(c)]] = [1,[2,3]] in assert(a+b+c==6);

let {a,b}={a:1,b:2} in assert(a+b==3);

assert_error[
    "record has an unmatched field named a",
    do local {x} = {x:1,a:2} in x];
assert_error[
    "record is missing a field named a",
    do local {a} ={x:1} in a];

let {a,b=2} = {a:1} in assert(a+b==3);

let {a=10,b=20,c} = {c:30} in assert([a,b,c]==[10,20,30]);
let {a=11,b=22,c=33} = {} in assert([a,b,c]==[11,22,33]);
assert_error[
    "record has an unmatched field named d",
    let {a=12,b=23,c=34} = {d:true} in [a,b,c]
];
let {} = {} in ();
let [] = [] in ();

let {a:[x,y]} = {a:[1,2]} in assert([x,y]==[1,2]);
let {'foo bar': fb} = {'foo bar':42} in assert(fb == 42);

let f={a,b}->a+b in assert(f{a:3,b:4} == 7);
let f{a,b}=a+b in assert(f{a:30,b:40} == 70);

assert(decode[65,66,67] == "ABC");
assert_error[
    "argument #1 of char: 0 is not in the range 1..127",
    decode[0]];
assert(encode "ABC" == [65,66,67]);
assert("$[65,66,67]" == "ABC");

let f = match [
        [a,b,c] -> a+b+c;
        x -> null;
    ];
in assert( [f[1,2,3], f 17] == [6,null] );

assert( (3 `max` 5) == 5 );

let [b :: is_bool, n :: is_num] = [false,0] in assert(not b && n==0);

assert(
    (42 >> match [
        (b :: is_bool) -> error "can't happen";
        (n :: is_num) -> n+1 ])
    == 43);

(
    local a = 42;
    for (i in 1..3) (
        local n = i;
        a := a + n;
    );
    assert(a == 48);
);

assert(
    {for ([i,j] in 1..3>>map(x->[x,x^2])) [symbol "$i",j]}
    == {'1':1, '2':4, '3':9}
);

assert( sort[7,8,9,1,2,3] == [1,2,3,7,8,9] );

let f (x::is_num) (y::is_num) = x + y;
in (
    assert_error["argument #1 of f: argument #true does not match is_num", f true];
    assert_error["argument #2 of f: argument #true does not match is_num", f 1 true];
);

let
    d = file "dir";
    r = {n:42, d:{b:true}};
in (
    assert("$d" == "{d,n}");
    assert(defined(d.n) && defined(d.d));
    assert(d.d.b == true);
    assert(d == r);
    assert(r == d);
);

let {a::is_num;} = {a:42};
    b :: is_num = 17;
in assert(a == 42 && b == 17);


assert((1::is_num) == 1);
assert_error["predicate assertion failed", true::is_num];

let
    r = parametric a=1,b=2 in {x:a,y:b};
    r2 = r{a:10};
in (
    assert(fields r == [#argument,#call,#x,#y]);
    assert(r.x == 1 && r.y == 2);
    assert(r.argument == {a:1,b:2});
    assert(fields r2 == [#argument,#call,#x,#y]);
    assert(r2.x == 10 && r2.y == 2);
    assert(r2.argument == {a:10,b:2});
);
let
    r = parametric b=false,n=1 in { x=if(not b) n else 0; }
in
    assert(r.x==1 && r{n:17}.x == 17);

let s = slider[1,10];
in (
    assert(is_func s);
    assert(s 10);
    assert(not(s true));
);

let a = b where b = 1; in assert(a == 1);

assert(contains[[1,2,3],1] && not(contains[[1,2,3],7]));

assert((
    let
        dummy = 1;
    in
        let
            b = a;
        in
            b
    where
        (
            a = 42;
        ))
== 42);

// string comprehensions
assert("${1,2,3}" == "123");
assert("${"foo";"bar"}" == "foobar");
assert("${
    for (i in 0..3) i;
}" == "0123");

let
    a5n = [0,1,2,3,4];
    a5v2 = [[00,01],[10,11],[20,21],[30,31],[40,41]];
    a56n = [[00,01,02,03,04,05],
            [10,11,12,13,14,15],
            [20,21,22,23,24,25],
            [30,31,32,33,34,35],
            [40,41,42,43,44,45]];
    a56v2 = [[[000,001],[010,011],[020,021],[030,031],[040,041],[050,051]],
             [[100,101],[110,111],[120,121],[130,131],[140,141],[150,151]],
             [[200,201],[210,211],[220,221],[230,231],[240,241],[250,251]],
             [[300,301],[310,311],[320,321],[330,331],[340,341],[350,351]],
             [[400,401],[410,411],[420,421],[430,431],[440,441],[450,451]]];
in sc_test {
    'bool==bool': _->
        true == true;
    '[5]num': _->
        count a5n == 5 && a5n.[0]==0 && a5n.[4]==4;
    '[5]vec2': _->
        count a5v2 == 5 && count(a5v2.[0])==2
           && a5v2.[0]==[00,01]
           && a5v2.[1].[0] == 10
           && a5v2.[1,0] == 10
           && a5v2.[4]==[40,41];
    '[5,6]num': _->
        count a56n == 5
           && a56n.[0,0] == 00
           && a56n.[1,2] == 12
           && a56n.[4,5] == 45;
    '[5,6]vec2': _->
        count a56v2 == 5 && count(a56v2.[0,0])==2
           && a56v2.[1,2] == [120,121]
           && a56v2.[1,2,0] == 120
           && a56v2.[1,2].[0] == 120;
    'local_array_variable': _->
        let a = a5n in a.[2] == 2;
};

// assignment statement
assert_error["foo: not defined", do foo := 1 in 42];
assert_error["sin: not assignable", do sin := 1 in 42];
assert_error["foo: not assignable from inside an expression",
    let foo = 0 in 1 + (do foo := 2 in foo)
];
assert_error[
  "x: not assignable",
  (
    let
        f x =
            do
                if (is_num x)
                    x := [x,x,x];
            in x;
    in [f 2, f[1,2,3]]
  ) == [[2,2,2], [1,2,3]]
];
sc_test{
'let-assign': _->
    (let x = 1 in
    do x := x * 2 in
    do x := x * 3 in
    x) == 6;
'do-assign': _->
    (let
        a = 1;
    in do
        local b = 2;
        a := a + 1;
        b := b + 1;
    in a*b) == 6;
'where-do-assign': _->
    (do
        local b = 2;
        a := a + 1;
        b := b + 1;
    in a*b
    where a = 1) == 6;
'let-if-assign': _->
  (
    let a = 1;
    in if (a > 0)
        do a := a + 1;
        in a
    else
        a
  ) == 2;
'vector-element-assign': _->
  (
    let a = [1,2,3];
    in do
        a.[X] := 17;
        a.[1] := 42;
        a.[2] := 99;
    in a
  ) == [17,42,99];
};
assert(
  [
    for (i in 1..3) (
        i := i * 2;
        i;
    )
  ] == [2,4,6]
);
assert(
    [let i = 0 in while (i < 3) (i; i := i + 1)]
    == [0,1,2]
);

let 'a'= {'foo bar'=0;'baz'=1};
in assert(strcat[a]=="{baz:1,'foo bar':0}");
let '_' = 1 in assert('_' == 1);

assert(#foo == #'foo');
assert(#true == #'true');
assert(#foo != #bar);
assert(#foo != "foo");
assert(fields{'':0, 'a b':1, 'foo':2} == [#'', #'a b', #foo]);
assert(not(fields{true:1}) == [#false]);
assert(is_symbol #true && is_symbol #foo);
let f = match [ /*0->#zero,*/ #one->1 ]; in (
    /*assert(f 0 == #zero);*/
    assert(f #one == 1);
);
assert(strcat[#foo] == "foo" && repr #foo == "#foo");
assert(strcat[#true] == "true" && repr #true == "#true");
assert("${#foo} $(#bar)" == "foo #bar");
assert("${#true} $(#false)" == "true #false");

assert( let r = {a:1,b:2} in do r.a := 42 in r == {a:42,b:2} );
assert( let r={a=1;b=2} in do r.a:=17 in r == {a:17,b:2} );
assert( let r=file "dir" in do r.n:=0 in r == {n:0,d:{b:#true}} );
assert( let r=file "dir" in do r.d:=0 in r == {n:42,d:0} );
assert( let r=file "dir" in do r.d.b:=0 in r == {n:42,d:{b:0}} );

// local definitions
let x = 0; in
(
    local x = x + 1;
    assert(x == 1);
);
assert(
    [local x=0; while(x<3)(x;x:=x+1);]
    == [0,1,2]
);
assert([local a=1; a; a+1] == [1,2]);
(
    local include {a:1};
    assert(a == 1);
);
assert( ([x,y]->do local (y=x,x=y) in [x,y]) [1,2] == [2,1] );
assert_error["a local definition must be followed by '; <statement>'",
    local x = 1];
assert_error[
    "Not a recursive definition.
    |The syntax 'local <definition>' is a statement.
    |Omit the word 'local' to convert to a definition.",
    let local x = 1; y = 2 in y];
assert_error[
    "a: not assignable from inside an expression",
    do local a=1; local test a := 2 in a];

// list assignment
(
    local a = [1,2,3];
    local b = a;
    a.[0] := 17;
    a.[1] := 42;
    assert(a == [17,42,3] && b == [1,2,3]);
);
assert_error[   // a[i] is a locative; [i]>>a is not a locative
    "not a locative",
    do local a=[1,2,3]; [0]>>a := 17; in true
];

// bitwise operators
assert( and[] == true && and[true,false] == false );
assert( and[[true,false],[true,true]] == [true,false] );
assert_error["argument #1 of and: #true is not a list", and true];
assert( or[] == false && or[true,false] == true );
assert( or[[true,true,false,false],[true,false,true,false]]
        == [true,true,true,false] );
assert( xor[[true,true,false,false],[true,false,true,false]]
        == [false,true,true,false] );
assert( lshift[[true,true,false],1] == [#false,#true,#true] );
assert( rshift[[true,false,true,false],1] == [#false,#true,#false,#false] );
assert( bool32_sum[
            [true, true, for (i in 1..30) false],
            [true, for (i in 1..31) false]]
        == [false, false, true, for (i in 1..29) false] );
let
    bits = nat_to_bool32
in assert( bool32_product[bits 7, bits 5] == bits 35 );
assert((bool32_sum[nat_to_bool32 17, nat_to_bool32 15] >> bool32_to_nat) == 32);
assert((5 >> nat_to_bool32 >> bit) ==
       [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);
assert(float_to_bool32 0 ==
    [#false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false]);
assert(float_to_bool32 1 ==
    [#false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#true,#true,#true,#true,#true,#true,#true,#false,
     #false]);
assert(float_to_bool32 (-1) ==
    [#false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#true,#true,#true,#true,#true,#true,#true,#false,
     #true]);
assert(bool32_to_float
    [#false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#false,#false,#false,#false,#false,#false,#false,
     #false,#false,#false,#true,#true,#true,#true,#true,#true,#true,#false,
     #true] == -1);
let
    none = [for (_ in 1..32) #false];
    all = [for (_ in 1..32) #true];
    f = #false;
    T = #true;
    bits = nat_to_bool32;
    ff = [f,f];
    logic = [[f,f],[T,f],[f,T],[T,T]];
in sc_test {
    'nat_to_bool32': _->
        nat_to_bool32 0 ==
        [f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f];
    'not': _-> not none == all && not[f,T]==[T,f];
    'and': _-> not(and[true,false]) && and[] &&
            and[bits 0xFF00FF00, bits 0xFF0000FF] == bits 0xFF000000 &&
            ([bits 0xFF00FF00, bits 0x00FF00FF]
              `and` [bits 0x00FFFF00,bits 0xFF0000FF])
              == [bits 0x0000FF00, bits 0x000000FF];
    'or': _-> or[true,false] && not(or[]) &&
            or[bits 0xFF00FF00, bits 0xFF0000FF] == bits 0xFF00FFFF &&
            or[[T,T,f,f],[T,f,T,f]] == [T,T,T,f];
    'xor': _-> xor[true,false] && not(xor[]) &&
            xor[bits 0xFF00FF00, bits 0xFF0000FF] == bits 0x0000FFFF;
    'lshift': _-> lshift[bits 0xFF00FF00, 8] == bits 0x00FF0000;
    'rshift': _-> rshift[bits 0xFF00FF00, 8] == bits 0x00FF00FF;
    'bool32_sum': _-> bool32_sum[bits 42, bits 1000] == bits 1042;
    'bool32_product': _-> bool32_product[bits 7, bits 5] == bits 35;
    'bool32_to_float': _-> bool32_to_float(bits 1065353216) == 1;
    'float_to_bool32': _-> float_to_bool32 1 == bits 1065353216;
    'indexing': _->
        let [ab,cd] = [ff,[f,T]]; in do
        ab.[0] := cd.[1]; in let
        [a,b] = ab;
        [c,d] = cd;
        in [a,b] == ab && [c,d] == cd && xor[ab,cd] == [T,T];
    '<': _->
        ([0,1,2] < [1, 1, 1]) == [T,f,f];
};

assert([for (i in 1..10 until i > 3) i] == [1,2,3]);
sc_test {
    'for-until': _->
        do
            local x = 0;
            for (i in 1..10 until i > 3)
                x := x + i;
        in x == 6;
    '+': _->
        2 + 3 == 5
        && 1+[2,3]+50 == [53,54]
        && [1,1]+[2,3] == [3,4]
        && 30 + [[1,1],[2,2]] + 400 == [[431,431],[432,432]]
        && [[1,1],[2,2]] + [3,4] == [[4,4],[6,6]]
        && [[1,2],[3,4]] + [[5,6],[7,8]] == [[6,8],[10,12]]
        ;
    'select': _->
        select[[1,2] >= 2, [1,2], [10,20]] == [10,2] &&
        select[[false,true], 1, 0] == [0,1];
    '<': _->
        ([1,2,3] < 2) == [#true,#false,#false];
};

//assert([{a:1},{a:2}].a == [1,2]);
//assert(defined([{a:1},{a:2},{}].a) == [#true,#true,#false]);

// lens
let n=42 in (
    assert(n.[[]] == []);
    assert(n.[] == n);
    assert(n.[[]] == []);
);
let a=[1,2,3] in (
    assert(a.[0] == 1);
    assert(a.[0] == 1);
    assert(a.[[1,2]] == [2,3]);
    assert(a.[[1,2]] == [2,3]);
);
let r={a:1,b:2} in (
    assert(r.[[#b,#a]] == [2,1]);
    assert(r.[#a] == 1);
    assert(r.[[#a,#b]] == [1,2]);
);
assert_error [
    "Bad index: 0.5
    |collection: {}
    |index: 0.5",
    {}.[0.5] ];
assert_error [
    "Index incompatible with collection: {} is not a list
    |collection: {}
    |index: 0",
    {}.[0] ];
assert_error [
    "Bad index: {} does not contain the field .foo
    |collection: {}
    |index: #foo",
    {}.[#foo] ];
assert_error [
    "Bad index: 9007199254740992 is not in the range 0..2
    |collection: [1,2,3]
    |index: 9007199254740992",
    [1,2,3].[2^53] ];
assert_error [
    "Bad index: 0 is not in range
    |collection: []
    |index: 0",
    [].[0] ];
assert_error [
    "Bad index: 9007199254740992 is not in range
    |collection: []
    |index: 9007199254740992",
    [].[2^53] ];
assert_error [
    "Bad index: 3.141592653589793
    |collection: []
    |index: 3.141592653589793",
    [].[pi] ];
assert_error [
    "Index incompatible with collection: [] is not a record
    |collection: []
    |index: #foo",
    [].[#foo] ];
assert_error [
    "Bad index: inf
    |collection: []
    |index: inf",
    [].[inf] ];
assert_error [
    "Bad index: {}
    |collection: {}
    |index: {}",
    {}.[{}] ];

// match and compose form a non-commutative ring with error and id
assert(match[error,n->n+1] 2 == 3);
assert(compose[id,n->n+1,n->n*5] 2 == 15);
let
  in_domain F = match[compose[F,_->true],_->false];
  f (x :: is_num) = x + 1;
in (
  assert(in_domain error 2 == false && in_domain id 2 == true);
  assert(in_domain f 2 == true && in_domain f #foo == false);
);

assert_error [
    "statements cannot be mixed with definitions",
    {a=1; print 2} ];
assert_error [
    "definitions cannot be mixed with statements",
    {print 2; a=1} ];
assert_error [
    "Not an expression.
    |The syntax 'a = b' is a definition, not an expression.
    |Try 'a == b' to test for equality.",
    let in a=1 ];
assert_error [
    "Not an expression.
    |The syntax 'a = b' is a definition, not an expression.
    |Try 'a == b' to test for equality.",
    let x=1 in a=1 ];

let f = match[ensure is_num, _->#null]
in assert(f 42 == 42 && f true == #null);

// symbol
assert(symbol "" == #'' && symbol "true" == true && symbol "foo" == #foo);
assert_error [
    "argument #1 of symbol: string "_$_[1]"_ contains illegal character 0x1",
    symbol[char 1]
];
let s = #''_' in
    assert(string s == "'" && repr s == "#''_'" && symbol "'" == s);

// char and string
let c=char 42 in assert(is_char c && repr c == "#"_*"_");
assert(char 36 == #"$");
assert(char[] == [] && char[97] == "a");
assert("" == [] && repr "" == "[]");
assert([char 97] == "a" && repr[char 97] == ""_a"_");
assert(is_string[] && is_string[char 97]);
assert(concat["ab","cd"] == "abcd");
assert(concat["a",[1]] == [char 97,1]);
assert([for (c in "abc") c] == "abc");
assert("a"++"b" == "ab" && [1]++[2]==[1,2] && "a"++[2]==[#"a",2]);
assert( "foo".[0] == #"f" && "foobar".[[3,2,4]] == "boa" );
assert( "abc".[[0,[1,2]]] == [#"a","bc"] );
assert( [..."abc",#"d"] == "abcd" );
assert( string (#"a") == "a" && string "b" == "b" && string #cd == "cd" );
assert( string "" == "" && string("abc"++[1,2,3]) == "abc[1,2,3]"
        && string([1,2,3]++"abc") == "[1,2,3]abc" );
assert( "$_" == "$" && ""_" == string #'"' );
assert( ucode (#"a") == 97 && ucode "12" == [49,50] );
assert( ucode [#"a","12"] == [97,[49,50]] );
assert( is_list "abc" && not(is_list #abc) );
assert( select [[true,false], "ab", "cd"] == "ad" );
assert( repr[char 1] == [quot,dol]++"[1]"++[quot] );
assert( repr("abc"++[1,2,3]) == ""_abc"_++[1,2,3]" );
assert( repr([1,2,3]++"abc") == "[1,2,3]++"_abc"_" );
assert( "${dol}" == "$" );
assert( let f[x,y]="$x|$y" in f "ab" == "a|b" );
let a="abc";
    b=amend 1 42 a;
    c=amend 1 (#"b") b; // c is a denormalized string
in (
    assert(is_string c);
    assert(a==c);
    assert(symbol c == #abc);
);

// associations
let r={a:1} in assert([...r] == [[#a,1]]);
assert({[#a,1]} == {a:1});
assert([a:1] == [[#a,1]]);
assert((a:1) == [#a,1]);

exec (file "index.curv");

(
    local negate x = -x;
    local a = 1..3;
    a!reverse!negate;
    assert(a == [-3, -2, -1]);
);

// compound locatives
( local a=0; a.[this]:=3; assert(a==3) );
( local (a=[1,2];b={c:3}); [a.[0],b.c]:=[4,5]; assert([a,b]==[[4,2],{c:5}]) );

assert( string(sign[-10,-0,0,10]) == "[-1,-0,0,1]" );
assert( time != #null ); // issue #122

// scalar patterns
let f = match [
    0 -> #nat,
    -1 -> #int,
    #a -> #sym,
    #"a" -> #char
] in assert([f 0, f (-1), f #a, f #"a"] == [#nat, #int, #sym, #char]);

// types
assert(string Num=="Num" && Num==Num && Num!=0 && is Num 42);
assert((#bad >> match[is,id]) == #bad);
assert(as Num 42 == 42);
assert(is {T:Num} 42 && as {T:Num} 42 == 42);
assert((#bad >> match[as,id]) == #bad && (#bad >> match[as Num,id]) == #bad);
assert(string Bool=="Bool" && is Bool true && as Bool false == false);
assert(Bool == Bool && Bool != Num);
assert(is Char #"a" && not(is Char "a"));
assert(Any!=Num && is Any #foo && as Any [] == []);
assert(is Num time && is Bool (time==time));
assert(is Type Num && is Type {T:Type});
assert(is Symbol true && is Symbol #foo);
assert(is Func sin && is Func {call: x->x+1});
let f = x::Num->x+1 in (
    assert(f 2 == 3);
    assert_error["argument #1 of f: argument #true does not match Num",
        f true];
);
let T0=Tuple[]; T1=Tuple[Num]; T2=Tuple[Symbol,Num]; in (
    assert(T0 == T0 && T1 != T2);
    assert(string T0 == "Tuple[]" && string T2 == "Tuple[Symbol,Num]");
    assert(is T0 [] && is T1 [42] && is T2 [#foo,17]);
);
assert(Array[]Num == Num && Array[0]Num == Tuple[]);
assert(Array[1,2]Num == Array[1](Array[2]Num));
assert(is (Array[3]Num) [1,2,3]);
assert(is (Array[4,4]Num) (idmatrix 4));
assert(is (List Num) [] && is (List Char) "foo");
assert(String 42 == "42" && is String "foo");

// script return value:
in null
