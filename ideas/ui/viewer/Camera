Programmable Camera Position
============================
* The GUI displays the camera position in the HUD.
* You can copy these numbers and use them in the CLI to set the initial
  camera position in the viewer or in 3D image export using -Ocamera=...
* You can specify the initial camera position using the `render.camera`
  field within a Shape.
  * Can `render.camera` be parameterized using value pickers? Maybe not,
    that conflicts with the existing Viewer GUI that provides mouse controls
    for the camera. I don't know how to resolve that conflict.
* The current camera position is available as a read-only reactive 'camera'
  record variable,
  like $vpr/$vpt/$vpd in OpenSCAD (ViewPort Rotation, Translation, Distance).
  Applications include: a billboard that is rotated to always face the front.

"arcball rotation" to replace my ad-hoc mouse rotation code.

3D Camera Design
----------------
centre -- a point the camera is looking at
radius -- define a sphere around the part of the scene that we are looking at
eyedir -- unit vector from the camera location to the centre
fov -- field of view, an angle, 0° to 180°. 0° gives orthographic view.
up -- unit vector, orthogonal to eyedir

In Curv 0.5 (and some popular 3D cameras), eyedir and radius are combined
into a single non-unit vector, called eye3d in Curv.

Benefits of keeping radius and eyedir separate:
* We can use a single Camera data structure for both 2D and 3D.
  The 2D viewer ignores eyedir, fov, and Z coordinates.
* More intuitive relation between camera parameters and camera controls.
  Zoom changes radius without modifying the other 4 parameters.
  Rotate changes eyedir/up without changing radius.

Some cameras have a camera position (eyepoint) instead of a centre point.
But with the Curv design, changing the FOV without changing other parameters
produces a dolly zoom effect that holds the contents of the focal sphere
visible while changing the perspective lines. This is what I want to see
when interactively tweaking the FOV.

This design unifies a perspective camera and an orthographic camera.
This is made possible by the centre point/radius design.
Interactively dial the FOV down to 0 and you have an orthographic view.

2D Camera Design
----------------
centre -- 2D point the camera is looking at
radius -- define a circle around the part of the scene that we are looking at
up -- 2D unit vector

The centre and radius define the focal circle. The focal circle is centred
in the viewport and is the largest circle that fits in the viewport.

Older Ideas
-----------
What are the components of a 3D camera position?
Requirements:
 * arcball rotation: does this have a preferred camera representation?
 * the billboard application: ease of coding?
 * shadertoy-style shaders: ease of coding?

Camera parameterization: https://jsantell.com/3d-projection
 * Dolly-zoom: a nice design for what it looks like to change the field-of-view
   angle without changing anything else.
 * Mentions the model-viewer project: a lot of thought went into creating the
   scene and framing rules in model-viewer. We wanted an arbitrarily-sized model
   inside a viewport of any size and aspect to be framed well. The model is
   placed inside a "room" that maximizes the model's size given the current
   aspect ratio, with the camera "framing" the room's outer plane.

gluLookAt(eye, centre, up)
    eye: point, camera location
    centre: reference point
    up: vector

Curv:
    centre -- a point the camera is looking at
    eye -- a vector from centre to the eye point (in the camera)
    up -- a normalized vector perpendicular to eye

In OpenSCAD, it is:
    {translate=[x,y,z], rotate=[x,y,z], distance=d}
Maybe add a FOV, since that has been requested multiple times.

Microsoft .net
  PerspectiveCamera(
    position :: Point3D -- position of camera
    lookDirection :: Vector3D
    upDirection :: Vector3D
    fieldOfView :: Double -- angle of projection in degrees)
  OrthographicCamera(
    position :: Point3D -- position of camera
    lookDirection :: Vector3D
    upDirection :: Vector3D
    width :: Double // width of viewing box in world units)

In issue #73, P-E-W suggested:
  target = [0,0,0];  // Point the camera is aimed at
  direction = [1,0,0];  // Direction of the camera's location from the above point
  distance = 10;  // Distance of the camera's location from the above point
  zoom = 5;  // Magnification of the camera's field of view.
      Large values for both distance and zoom approximate a parallel projection.
Which doesn't work because it doesn't account for rotation around the axis from
camera to target.
