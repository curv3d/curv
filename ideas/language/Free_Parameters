Free Parameters
===============
An alternative to the Fluid_Variables proposal,
and an alternative to reactive values in Curv 0.5.

A free parameter is a kind of named global variable
with a type and a default value.
* The default value is not required, eg for the proposed `last` parameter,
  see [[Slice]].

A parametric value is a special kind of value that consists of three parts:
* pexpr: An expression over one or more free parameters.
* ptype: A type, specifing the set of values that the expression ranges over.
  This type is derived from the expression.
* pval: An ordinary (non-parametric) value, which is the result of evaluating
  the expression using the default values of each free parameter.

A free parameter is a special case of a parametric value.

You can query a parametric value PV to determine what free parameters it
depends on.

You can substitute a parameter in PV for a another value, creating a new
value by partial evaluation of the expression. This operation is not merely
ordinary function call notation because functions can be parametric.

The 'parametric' operator now constructs parametric values of any type,
not just records.
* What happens if the parametric body is already parametric?
  * Right now, any hidden parameters in result of evaluating the body expression
    are discarded. That's a problem if `time` is a free parameter, it means
    that an animated shape in a parametric body loses its animation.
  * Do shape parameters just accumulate, then? What happens if all primitive
    shape constructors are parametric?
    * How does glisp work?

Examples
--------
`time` is now a free parameter with default value 0.
This will fix some bugs that currently exist, involving reactive values
in bbox which prevent parametric images from being viewed.

`rectify` is a free parameter that controls whether we use expensive algorithms
to provide an exact distance field. Used for #sharp mesh export. Default false.

`last` is a free parameter, type Int, no default value, used as a List index.
See [[Slice]].

Parameter Identity
------------------
We need a way to determine if two parameters are the same.
In the spirit of "worse is better":

 1. Identity is a symbol.
 2. Identity is a term.
 3. ...
