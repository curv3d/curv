User Defined Data Types
=======================
We introduce user-defined data types (UDTs), which can't be confused with
built-in data types. This allows for simple data abstraction.

You can create an abstract interface to a user defined type using a fully
functional interface (all operations on the data type are functions).
The operations may optionally be typed checked (only values created by your
data constructors are allowed as arguments). Your data constructors can be used
for pattern matching. Instances of your data type are printed as constructor
expressions, no extra code is required. The internal representation of your
type can optionally be hidden, so that it doesn't appear in the printed
representation.

UDT Requirements:
* constructor functions
* instances print as constructor expressions
* constructor expressions can be used as patterns
* index values can be used as selectors
* equality and referential transparency

Other considerations:
* Backwards compatibility with POD based functional interfaces?
* Metaprogramming: construct a UDT algorithmically?

An operation on a UDT is a function:
* A constructor (maps arguments to an instance).
* A combinator (maps one or more instances to another instance).
* An observer (maps an instance to a noninstance).
* A selector (an observer that maps an instance to a data structure element,
  and can be used for updating an instance; aka an index or lens).

By convention, the operations on a UDT are packaged in a module named after
the UDT.

Data Types
----------
Every boxed Curv value contains a type tag, which is used for dynamic
dispatching. This is a statement about the Curv VM.

Type tags are disjoint. They don't form a hierarchy. You don't declare
relationships between two data types (they both implement the same
interface) in the data type definition itself. Because data and operations
are orthogonal, disjoint in value-oriented programming (unlike OOP).

Instead, there is an orthogonal concept of Theories (aka interfaces)
and Theory inheritance. An interface can be extended to support a data type
without modifying the code for that data type. See ADA.

A value's type tag is determined when it is constructed. In fact, I believe
that it is uniquely determined by the value's constructor (and not by any
constructor arguments).

A simple data constructor has a unique type tag associated with it.

Each type tag has an associated Type value -- all of the values with that tag
belong to the associated type. Not all Types have an associated tag: those
that do are called "data types".

Primitive types (which are not constructed using 'data' definitions) also
have tags and data types. For example, `Num` is a data type.

Data types are used by theories for efficient dynamic dispatch of overloaded
operations. A theory used for dynamic dispatch may require its types to be
data types.

Data types are disjoint, so every value has a unique data type associated with
it. We could provide an operation that returns a value's data type. I have no
high level use for this. It would be part of a low-level metaprogramming API.

Data Product Definitions
------------------------
A product-style data definition has the syntax:
    data <identifier> <TypeSpec>...
where the <identifier> is bound to a branded data type algebra in the local
environment, and there are one or more occurrences of <TypeSpec>, which
specifies the type of a constructor argument.

For example,
    data Foo Num
defines a user-defined data type called `Foo`, which has a single constructor
argument, which is a number. To construct an instance of `Foo`, use
    Foo 42
This overloading of the name `Foo` works because Foo is actually an Algebra,
where `Foo.T` is the new data type, and `Foo.call` is the constructor function.

A <TypeSpec> is either a type expression, or a POD expression that is
convertable to a type. Eg, [T1,T2] and {a:T1,b:T2} are POD values that are
converted to Tuple and Record types.

Data Sum Definitions
--------------------
A data sum definition has the syntax:
    data <identifier> = ctorspec1 | ctorspec2 | ...
where there are one or more <ctorspecs>s,
and a <ctorspec> is a constructor name followed by zero or more <TypeSpec>s.
Recursive definitions are supported.

This separates the data type name from the constructor names,
and allows for multiple constructor names. For singleton constructors,
it avoids the problem cited earlier of overloading a constructor name
with a data type name.

For example,
    data LispList = nil | pair [Any, LispList];

There are two constructor syntaxes supported. Either:
    LispList.nil
    LispList.pair[42, LispList.nil]
or:
    LispList #nil
    LispList (#pair[42, #nil])
The former syntax gives curried constructor functions that can be passed as
arguments. The latter syntax permits library APIs to parse and validate POD
variant values passed as arguments, and is also a kind of metaprogramming for
abstracting over the syntax for invoking a data sum constructor.

(We can imagine an alternate reality where each constructor name also has
an associated data type, which would then require a hierarchical space of
data tags. But there's no real requirement for this, and it's better to keep
data type semantics simple. If you need a type with multiple constructors,
where each constructor has its own type, then you can use theories for this.)

Why do we need both constructor syntaxes? One is compatible with the creative
coding dialect, and one is more familiar to Haskell programmers? What about:
    data LispList (Enum[#nil, #pair[Any, LispList])

Singleton Data Types
--------------------
It looks like we should be able to extend data product definitions to have zero
constructor arguments, so that
    data Foo
defines a singleton data type with exactly one instance, called `Foo`.

This appears to lead to a contradiction. The value `Foo` denotes both a data
type, and also its sole instance. This may be incoherent: it depends on type
semantics. The corresponding Haskell `data` definition can give the same name
to both concepts because it has different name spaces for types and values.

You could use
    data Foo []
and use Foo[] to construct the singleton instance.

Data sum definitions can be used for singleton types. Eg,
    data Foo = foo
Now Foo is the type and Foo.foo is the singleton instance.

Abstract Data Constructors
--------------------------
In some cases we wish the true representation of a UDT value to be different
from the constructor argument (that is printed when the value is printed,
and that is matched on by constructor patterns).

For example, I want this for the Colour type. External: sRGB, internal:
linear RGB.

Here's a possible syntax:
    data TypeName = {
        construct param = internal_representation;
        deconstruct internal_rep_param = external_representation;
    }
With this design, the data type is identified with the data constructor,
which has exactly one argument.
* 'construct' is called to construct an instance of the data type.
* 'deconstruct' is called to print an instance (it maps the instance
  to a constructor argument).
* 'deconstruct' is used when matching an instance against a constructor pattern.

This feature could be implemented using a Theory, similar to how Haskell has
a type class Show and Rust has a trait. This Theory provides a bidirectional
mapping between the internal representation and the constructor argument.

Referential Transparency and Equality
-------------------------------------
Curv is referentially transparent. But a data type definition creates a new
data type, different from all existing data types. It is as if executing the
definition causes the side effect of allocating a new data type object.
And since data type definitions can occur in module literals, that would mean
evaluating the module literal causes a side effect. Two exact copies of the
same module literal would not return equivalent values, even if both are
evaluated in the same lexical scope.

These side effect semantics don't even make sense if you consider distributing
Curv values over the internet. How do we ensure that the same data type
exists in two different computers connected only by the internet? There has to
be a description of the data type that can be copied without losing its
identity.

I have two alternative proposals for restoring referential transparency:
 0. Unconditioned equivalence -- solves the problem
 1. nominal equivalence
 2. structural equivalence

Under Nominal Equivalence, data type definitions can only occur in modules.
All modules are labelled, with absolute pathnames as labels.
Module equivalence is determined by comparing labels.
* Data type definitions cannot occur in `let` heads, which is a restriction
  on composability. Some code can only be written at the 'top level' inside
  modules.
* The benefits of this somewhat restrictive approach are that it avoids the
  difficulty of implementing structural equivalence, and it lets you reason
  about module equivalence by looking only at module names.
* The problem is that structural equivalence of API values still pops up
  when we consider 'functors' (module constructors), because functor arguments
  now appear in module labels, and these arguments could be lambda expressions.
  We could beat this problem back by requiring that functions appearing as
  functor arguments must have absolute labels. Ugh.

Under Structural Equivalence, we take on the hard task of providing a
referentially transparent equivalence relation for anonymous functions,
where equivalence guarantees that the two functions have identical input/output
behaviour, and non-equivalence is silent on whether the functions behave the
same. We still have labelled values, but the labels are not the sole criteria
for determining value equivalence.
* The Unison language appears to solve this problem. They ignore names, which
  violates my goals, but that's a minor issue. My real question is whether their
  method is referentially transparent.
* Dependently typed languages such as Idris would appear to solve the problem
  of referentially transparent structural equivalence of anonymous functions.
  In this context, I know that preserving referential transparency and
  equational reasoning is a key goal, so their method should work, if I can
  repurpose the algorithms without converting Curv to a dependently typed
  language.

So apparently I've reduced this to the problem of understanding how to
implement Idris. Yay?

How about this: two anonymous functions are structurally equivalent if
they have identical parse trees, and if all of their non-local bindings
have equivalent values. This is good enough to support referential
transparency. It doesn't preserve equivalence across semantics-preserving
program transformations (like Idris would) but that's not critical.

It looks like Stupid-Simple Structural Equivalence is the winner for now.

Two user-defined data types are equivalent if:
 * The parse trees of the data type definitions are identical.
 * The non-local bindings have equivalent values.
 * The labels are equivalent. Note that if the data type definition is
   embedded in a module, then the module's label is added to the type and
   constructor labels. So here is where nominal equivalence is mixed in.

Data type definitions can appear in any context, including a `let` head,
or as a REPL command.

Given two UDT instances that print the same (as textually identical
constructor expressions `F x`), these two values are equal if the F's
(the constructors) are equal and the x's (the constructor arguments) are equal.
[In other words, I am not at present guaranteeing an isomorphism between
equality of value and equality of printed representation. Maybe later.]

TODO: figure out how this interacts with Theories and operation overloading.

Shapes
------
The shape library needs data constructors with zero or more curried arguments.
    everything
    cube 10
    rotate (45*deg) cube

We need a workaround for singletons.

Indices
-------
Index values for a UDT.

Metaprogramming
---------------
Constructing a UDT algorithmically.
