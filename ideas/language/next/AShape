Algebraic Shape Abstraction
===========================
ADA is a big project, and not fully designed.
* Branded Values
* Types & Data Types
* Algebras
* Theories
To make progress, work through concrete use cases.

What is a small, useful subset to implement first?
* Begin with ADA for Shapes.
* All Theories are built in. Shape, Index, ...
* No theory inheritance, initially.
* Single sorted theories only, with type named T.
* Single dispatch only? 'Ordered' has a binary operator. Don't get boxed in.
* Algebra and theory binding in same location (like an OOP class).

Goals:
* Shapes constructed using the shape library are branded values that print
  as constructor expressions. The CSG tree is preserved in the shape value.
* Define new operations with different implementions for different shape types,
  with dynamic dispatch.
  * Pattern match on shape constructors.
  * Eventually, put these operations in Theories so that new overloads can
    be added by third party shape libraries.
  * Can map shapes onto a high level CSG repr like SVG without modifying the
    shape library for each mapping. (aka The Expression Problem.)
* In a SubCurv stack trace, function names are `dist` if the argument to
  make_shape is a scoped record, or function name is missing if argument
  is a dynamic record. With ADA, I'd like to see qualified names like
  `cube.distance` and `rotate.distance` in the trace.
* Somehow this makes it easier to overcome current limitations of SubCurv:
  * Write a shape constructor taking a shape-gen function argument.
* Explain relation of `parametric` shapes to shape constructors.

Shape Theory
------------
`Shape` is a built-in theory. Initially hard coded with no syntax
for user defined theories.

def Shape = theory T {
    distance: [Num,Num,Num] T => Num;
    colour: [Num,Num,Num] T => Num;
    data bounds: T => BBox;
    data is_2d: T => Bool;
    data is_3d: T => Bool;
};

The keyword 'data' is optional. It can only apply to functions of T.
It causes the function result to be computed and cached when the Shape
instance is constructed (and then recomputed whenever a prerequisite
field value changes). Without the 'data' tag, the bounds, is_2d and is_3d
are computed by traversing the CSG tree each time they are requested.

Varieties of Shape Primitives
-----------------------------
* niladic shapes: `everything`, `nothing`.
* monadic prototypes. Primitive shapes like `cube` which take a single
  record argument as an argument, all of the record fields have default
  values, and `cube` is an instance of itself, equivalent to `cube {}`.
* combinators, with one or more arguments, and at least one argument is a
  shape or list of shapes.

In all cases, the shape primitive without arguments is also a Shape Algebra,
so that primitive distance functions in a stack trace print as:
* everything.distance
* cube.distance
* rotate.distance

This shape algebra may be extended with shape-specific static values and
operations (not part of any theory), where appropriate.

Monadic Prototypes
------------------
Maybe
    make_parametric <single-sorted-theory> {fields} {algebra definitions}
returns a prototypical value which is:
 * An instance of the algebra. It's record-like: each of the fields is an
   assignable instance field.
 * A Function that maps a parameter record to an instance of the Algebra.
 * An Algebra implementing the specified Theory, with T bound to the datatype.
   It's module-like: the module members are not assignable, although they
   belong to the same namespace as the instance fields.

def sphere = make_parametric Shape {d = 2} {
    distance self [x,y,z] = mag[x,y,z] - self.d/2;
    bounds self = (let r=self.d/2; [[-r,-r,-r],[r,r,r]]);
    is_3d self = true;
};

Maybe
    parametric <single-sorted-theory> {fields+members} <expr>
is a generalization of Curv 0.5 `parametric`, returning a prototypical value
derived from <expr> (or wrapping <expr>).

std.cube has a `circumratio` field.
I've already introduced `static` members to theories. How about:
    def cube = parametric Shape {
        d = 2,
        static circumratio = sqrt 3,
    } box[d,d,d]

std.cube has `exact` and `mitred` fields. How about:
    def cube = parametric Shape {
        d = 2,
        static circumratio = sqrt 3,
        static mitred d = (
            let r = d / 2;
            make_shape {
                dist[x,y,z,t] = max(abs[x,y,z] - r);
                bbox = [[-r, -r, -r], [r,r,r]];
                is_3d = true;
            }
        ),
        static exact d = box.exact[d,d,d],
    } exact d

The obvious implementation of `parametric` is to create a wrapper around
the <expr> value, a proxy that forwards Theory operations to the wrapped
value. This could be optimized in the case where the <expr> is a call to
a statically known constructor.

Shape Library (in ADA)
----------------------
Each shape constructor in the standard library
is a branded Data Constructor, which is bound to an Algebra,
which is an instance of Shape.

Many of the primitive shape constructors (like `sphere`)
are actually prototypical shapes, which also implement the Function theory,
and simultaneously behave as constructor functions. How does `sphere`
work in ADA? How many entities must exist to implement this, and what are
their relations?

Let's say that there is an auxiliary Algebra called `Sphere`.
`Sphere.T` is the data type of all sphere shapes.
The primary constructor is `Sphere d` (which is actually Sphere.call d).

What, then, is `sphere` (which is both a Sphere and a Function)?
 1. Can all spheres be called as a function, to be reparameterized
    with a new diameter? If so, they would be like `parametric` shapes.
 2. Or is there a unique `sphere` prototype that is simultaneously
    a Shape and a Function, which is distinct from `Sphere 2`, since
    the latter is not a Function. Then `sphere != Sphere 2`.

I think #1 is more elegant.
So the Sphere algebra implements both Shape and Function.

Then, given Sphere, we could define
    sphere = Sphere 2;
Although, this definition causes spheres to print as `Sphere d`
not as `sphere d`. How do we fix this?

How does the data type Sphere.T know that it should use Sphere as its
constructor name? When a data type is generated, the constructors must
also be generated at the same time, so that the data type knows how to
print itself using constructor expressions. User defined data types are
intended to be used with ADA, and a single-sorted algebra has different
fields for the type T and the constructor or constructors. So the thing
we use for constructing new data types must bind multiple names (for
the type and for the constructors).

Is it possible for 'sphere' to simultaneously be an Algebra, a constructor
function, and a prototypical instance of the Sphere data type?
* Under ADA, 'Algebra' and 'Function' are disjoint theories, and a single
  data type can implement both theories.
* The implication is that the prototypical 'sphere' implements the Algebra,
  Function and Shape theories. And if 'sphere == sphere 2' then every sphere
  is an Algebra, specifically every sphere is the Sphere algebra.

Under which circumstances can we define 'prototype' values like 'sphere'
and 'everything'? It could work for implementing any single-sorted Theory
that doesn't conflict with Algebra and Function.

Maybe
    make_parametric <single-sorted-theory> {fields} {algebra definitions}
returns a prototypical value which is:
 * An Algebra implementing the specified Theory.
 * A Function that maps a parameter record to an instance of the Algebra.
 * If all of the fields have default values, then the prototypical value
   is also an instance of the Algebra.
To define `everything`, which has no parameters, we use `{}` as the parameter.
Parameters can have picker types, which is only relevant for Shapes,
and in future other graphical value types.

In make_parametric,
* <single-sorted-theory> is an expression.
* {fields} could be an expression -- it denotes a record schema.
* {algebra definitions} is a module expression. This follows from the
  Algebra constructor syntax 'algebra <theory-expr> <module-expr>'.

How would I define the shape constructor `sphere d`?

// Curv 0.5
sphere =
    let sphere_e d =
        let r = d / 2;
        in make_shape {
            dist[x,y,z,t] = mag[x,y,z] - r;
            bbox = [[-r,-r,-r],[r,r,r]];
            is_3d = true;
        };
    in make_shape {
        ... sphere_e 2,
        call : sphere_e,
    };

sphere = make_parametric Shape {d = 2} {
    distance self [x,y,z] = mag[x,y,z] - self.d/2;
    bounds self = let r=self.d/2 in [[-r,-r,-r],[r,r,r]];
    is_3d self = true;
};

This is OOP flavoured ADA. A sphere is a record with a 'd' field.
The {fields} argument of make_parametric defines instance variables.
The generic code for obtaining a shape's distance is:
    Shape.distance s [x,y,z]
It is proposed that 'sphere' is its own Algebra (so that sphere.call is
a parameterized sphere constructor). So the {fields} argument must be disjoint
from the algebra fields, and neither has a 'call' or 'T' field, which are added.
So 'sphere.T' is the Type of all spheres (shortened to just 'sphere').

