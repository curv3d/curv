Full Metal Equality
===================
A single universal equality operator (x==y) with five axioms:
 1. Reflexive: x==x.
 2. Symmetric: if x==y then y==x.
 3. Transitive: if x==y and y==z then x==z.
 4. For any ordinary function f, if x==y then f x == f y.
    (Related to Leibniz's Identity of Indiscernables.)
 5. If two values print the same, they are equal.
    There is an isomorphism between "printed representation" and equality.

Ordinary vs Test Functions
--------------------------
A test function can inspect the internal representation of Curv values
and make distinctions that violate the equality axioms. It can distinguish
between two different internal representations of the same value, which
compare equal, thus violating the fourth axiom.

Test functions are needed for debugging and unit testing.
They may also be needed internally for high performance implementations of
ordinary functions. All of these are software engineering concerns.

We would like all functions in the creative coding dialect to be ordinary
functions, so that Axiom 4 works for equality. We could guarantee this
nice behaviour in the creative coding dialect by adding more bureaucracy
to the software engineering dialect.

The idea is that test functions are "tainted", similar to unsafe functions
in Rust. Normally, the use of test functions is restricted to test blocks.
  Test code cannot change the result of a program, and cannot invalidate
  equational reasoning (in non test code) based on The Axioms.

A function that directly calls a test function outside of a test block is
"tainted" and marked as being a test function. The taint can be removed
(when writing high performance but safe code using test functions) using
some keyword analogous to "unsafe" in Rust.

Data Equality
-------------
A data value is one that isn't a function, and contains no functions as
elements. If x and y are data, then x==y is data equality, which obeys the
five axioms.

Numbers:
 * NaN is not a number. NaN equality violates the reflexive axiom.
 * Negative zero is not a number. NegZero equality violates the fourth axiom.

GPU Numbers:
 * Code run on the GPU will generate NaN and -0 values, and these values can
   be stored in huge data structures generated on the GPU, which can then be
   inspected by Curv code. We can't sanitize huge data structures when they
   are transferred from GPU to CPU. Generating GPU code that avoids bad values
   might be too expensive. So we need tools to handle these values safely when
   they enter the interpreter from the GPU.

Branded Value Equality
----------------------
Branded values use Unconditioned brand identity. Two branded
values are equal iff they have the same brand, and the brand is isomorphic to
the printed representation. Branded value equality obeys the five axioms.

Function Equality
-----------------
We are left with the question of equality for anonymous functions.

Anonymous functions should be printed as lambda expressions that, when
evaluated, return a function that is equal to the original.

 1. In Curv 0.5, anonymous functions print as "<function>", and all anonymous
    functions compare equal. This is an equivalence relation but violates the
    fourth axiom, and the requirement for how functions are printed.
 
 2. Let's suppose that function equality is supported in a way that satisfies
    the five axioms. Anon Functions are printed as specified above, and
    compare equal if their printed reps are equal.

    The fourth axiom partially specifies function equality in a way that is
    useful to programmers. Consider an anonymous curried function F x y.
    F x is a function. According to axiom 4, if a == b then F a == F b.
    Eg if 'F a b = a + b' then F 2 == F (1 + 1) even if we are comparing
    two distinct closure objects. Mainstream languages with function equality
    don't offer these semantics, they just compare closure object pointers
    for equality.

    For another example, using the shape representation of Curv 0.5 (a record
    containing function closures), then Full Metal function equality means:
    * Two shapes are equal if they have the same constructor function
      and the same constructor arguments. Eg, cube 1 == cube 1.
    * Two shapes are unequal if they are not operationally equivalent.
    * There is a grey area: two shapes that are constructed differently
      but that are operationally equivalent may or may not be equal,
      it depends on the implementation.

    In short, two closures are equal if the lambda bodies are equal and the
    captured environments are equal. Now we need to define equality for
    lambda bodies and consider when functions are unequal.

    (a) Function equality is implementation defined (not fully specified).
        It is guaranteed that two closures are equal if their environments are
        equal, and their lambda bodies have the same source code location.

        This leaves a grey area:
        * If two anon functions are generated by evaluating lambda expressions
          with different source code locations, they are not guaranteed to
          be equal, even if the lambdas are identical and the environment
          is identical. Copying an expression to another source code location
          may not preserve function equality.
        * If two anon functions are generated from two different evaluations
          of the same lambda expr, and are operationally equivalent, but 
          the environment captured by the closure is different, they are
          not guaranteed to be equal.

        You can avoid the grey area and control function equality semantics
        by using branded functions.

        This design provides useful guarantees to programmers while not
        imposing a high cost on the implementation, and not preventing
        optimizations that speed up function calls or reduce the cost
        of closures. We don't aim to make function equality itself
        as fast as possible.

        In the intended implementation, a function closure is represented
        by a pointer to the compiled function body, plus a list of captured
        nonlocal binding values. Equality is tested by comparing code pointers
        and comparing the captured environment. The printed rep of an anon
        function contains:
        * The values of (at least) non-constant, non-local binding values
          that are stored in the closure. A binding value that has no effect
          on the function result can be omitted as an optimization.
        * The source code of the function body.
        * An ID that maps back to a source code location corresponding to
          the closure's code pointer. (This doesn't preclude CSE optimization
          where two distinct lambda expressions share a code pointer.)

    (b) We strengthen (a) to guarantee that an anonymous function value
        contains a link to the exact source location of the lambda expression
        that generated the function value. I think this is useful for
        understanding program dynamics (where did this function come from?).

        This seems closely related to Unconditioned identity of branded values,
        which also contain these source location links. We could just say
        that all API values (functions, modules, etc) have a source location
        link, regardless of whether they are branded.

    (c) We strengthen (b) to make equality semantics deterministic.
         * The source code location of an anon function's lambda is
           part of its identity (for equality). Maybe there's a runtime
           cost to preserving this information when CSE unifies function
           bodies.
         * The values of non-local variables referenced by the lambda are
           part of the function's identity, and must be preserved in the
           closure. This forces closures to capture data that isn't
           relevant to the final result returned by the function.

        There are benefits to preserving source code location and the full
        set of non-const nonlocal bindings in a function: it's useful for
        debugging (understanding program dynamics), a separate issue from
        equational reasoning.
        * From a C/C++ perspective, I can imagine enabling this feature
          in debug mode and disabling it in release mode (for performance).

        I've identified 3 conflicting requirements:
         1. Mechanical sympathy: make it as easy as possible to understand why
            two function values are comparing equal, so that you can understand
            a program's dynamic behaviour and debug it.
         2. Optimization: the compiler rewrites the program to make it run as
            quickly as possible, at the expense of (1).
         3. Equational reasoning. When code is rewritten using The Axioms
            as rewrite rules then meaning is preserved.
             * If you copy an expression and evaluate in the same lexical
               environment as the original, both copies should return the
               same value.
             * If you rewrite the copy using The Axioms, the result continues
               to be equal.
            WRT anon function equality, this requirement conflicts with (1).
            If you see two textually distinct function literals then it can
            be an extreme intellectual effort to *prove* whether the language
            will treat them as equal, using The Axioms to transform one
            expression into the other, or to prove that no such transformation
            exists.

        For the creative coding dialect, the top priority is #1,
        mechanical sympathy. With respect to functional equality, even
        Haskell sacrifices equational reasoning (#3) in service of other goals.
        Haskell statically prohibits function equality, which makes certain
        intuitively reasonable program transformations illegal.

        Deterministic function equality is best for mechanical sympathy.
        It gives simple rules for understanding why two function literals are
        equal or unequal, and ensures consistent portable behaviour across
        implementations or releases (new optimizations don't break existing
        programs).

    (d) Like (a,b,c), except we hash the function body source code and
        compare hashes, instead of comparing code pointers. Copying a lambda
        without changing the code preserves equality. We don't print a
        source code location. Loosely inspired by Unison.

        The goal is to preserve equational reasoning in the specific case
        of copying lambda expressions.

    (e) Like (d), except that we preserve equational reasoning even in the
        presence of semantics-preserving code transformations.
        Two lambdas that have different code but are semantically equivalent
        under code transformations guided by The Axioms are equivalent,
        and are normalized to the same representation when a function is
        printed.

        As we add more semantics-preserving code transformations to
        our definition of lambda equivalence, the implementation difficulty
        goes way up, but we also interfere with a developer's ability to
        predict function equality in a given code fragment. The rule that
        equates lambda equivalence with source code location is easy to
        understand, especially if we are including that information in the
        function anyway, as per (b).

 3. The equality operator fails if either operand is an anonymous function.
    To be consistent, we must fail if an operand is a data structure containing
    an anonymous function.
     * There is an Eq type, a subset of Any, which contains the values that
       support equality tests. (Kind of like Haskell.) Both arguments to ==
       must belong to Eq. For a POD data structure to be in Eq, all of its
       elements must be in Eq. For a branded value to be in Eq, all of the
       arguments in its brand must be in Eq.
     * This seems expensive. Naively, equality can't bail out early after
       determining that two values cannot be equal, it must still examine
       all the elements of a data structure to see if there are any anonymous
       functions.
     * If we bail out early anyway, we get inconsistent behaviour. Whether
       equality succeeds or fails depends on the order in which data structure
       elements are examined.
     * We could optimize this by adding a ternary flag to data structures that
       potentially might contain anonymous function elements, specifying
       whether anonymous values are present. This flag has three values:
       yes, no, undetermined.
    Suppose that variable x contains either `#none` or `#some a`, where `a`
    is an arbitrary value (`a` could be an anonymous function).
    Then `x==#none` will fail, instead of return false, if x is `#some f`.
    The workaround is to use pattern matching. Option #4 gives the expected
    behaviour.

 4. The equality operator fails if you test two anonymous functions for
    equality. But an anon function is unequal to data or to a branded value.
    As long as we can determine inequality without comparing two anon functions,
    we will return a useful result.
     * To be consistent, while scanning two data structures to compare them
       for equality, if we test two anon function elements for equality, we
       shouldn't immediately fail because there might be unequal elements
       later in the scan that prove inequality.
     * Therefore, we should extend the equality operator to return a
       ternary result (yes, no, undetermined), and extend the boolean ops to
       support ternary inputs, so that we can define equality of data structures
       by testing the equality of corresponding elements.
     * It's possible that a==b is false, b==c is false, but a==c fails.
       We don't have an Eq type to determine if a value can be compared for
       equality, it's weirder than that.

Surprisingly (to me), I think that 2(c) provides better axioms and guarantees
that "code works as expected" for the creative coder than 1, 3 or 4.
And it's so easy to implement. It's surprising because #3 is inspired by
Haskell, and Haskell's brand is that it has excellent pure functional semantics.
The lesson, I guess, is that generalizing Haskell's Eq type and static typing
mindset to a value-oriented programming language is treacherous.

Prior art is mostly useless in figuring out this design. Other languages
suck at this/do not share Curv's design goals.

Equality, Equivalence & Referential Transparency
================================================
`x == y` is the equality predicate. It is useful for comparing data values,
especially numbers, and less useful for comparing API values.
Due to a misfeature of IEEE floating point arithmetic, `0 == -0`
even though those two numbers are not operationally equivalent.
But I think I need those semantics for porting floating point algorithms,
and in SubCurv for GPU code generation.

`x === y` is the equivalence predicate. If `x === y` then `x` and `y`
are semantically equivalent: `y` can be substituted for `x` in any
context without changing the meaning of a program. So `0 === -0` is false.

Two labelled API values are equivalent if they abstractly represent the
same API. It's possible that two API values are operationally equivalent
because they happen to have the same internal implementation, but they aren't
intended to be interchangeable, and === reports them as not equivalent.
It's not theoretically possible to prove that two functions are operationally
equivalent, but that's not even relevant for comparing API values, which
only need compare as equivalent when they are *documented* to be equivalent.

Design Goals
------------
First class values
  Everything in Curv is represented by first class immutable values,
  including data, functions, modules and types. "First class" means:
  can be bound to a variable, stored as an element of a data structure,
  passed as an argument to a function, and returned as a result.

Labelled Values
  A function, module or type is called an "API value", in contrast to
  data values such as booleans, numbers, lists and records.

  In mainstream languages, API entities often have a name which is part
  of their identity.
  * Mainstream languages have a specialized function definition syntax
    which includes the function name. This function name is commonly
    attached to the function value or function object at runtime.
    If you define a function in javascript, python or lisp, and later print
    the function value, the name will be printed. Modern languages
    also have lambda expressions, which construct anonymous function values.
  * In mainstream languages, it is usually impossible to define
    a module without giving it a name.
  * Statically typed languages use a combination of "structural equivalence"
    and "nominal equivalence" to determine if two types are the same.
    Nominal types and type constructors have names which are part of their
    identity. A new nominal type is often constructed by binding a name to
    a type expression. If the language also has modules, then the name of
    the module that contains the type is also part of the type's identity.

  In Curv, API values may be optionally given names, which introduces a
  concept of "nominal value equivalence" (a generalization of nominal type
  equivalence).

  Curv also has labelled data values, as part of its data abstraction system.
  You can define a labelled 'data constructor' (a kind of API value),
  which maps zero or more curried arguments onto a labelled data value.

The Equivalence Operator
* There is an equivalence operator, `a === b`. If true, then the values
  `a` and `b` are semantically equivalent: `b` can be substituted for `a`
  in any context without changing the meaning of the program.
* The equivalence operator is an equivalence relation:
    `a === a` for every value `a`
    `a === b` implies `b === a`
    `a === b && b === c` implies `a === c`
* Curv is referentially transparent.
* Function, module and type values are called "API values".

Two labels are equivalent (===) if they are structurally equivalent.
Equivalence for labelled values means label equivalence.

What makes this work (in the current prototype design) is that labels
are globally unique. There's no scope where two values can have the same
label but different provenance.
* Labels for standard bindings are prefixed with `std.`
* Labels for members of a top level directory record are prefixed
  with `std.file "pathname".`
* The only situation where a label is a bare symbol (other than `std`) is in
  the REPL local bindings scope. Those values cannot escape the REPL context.
