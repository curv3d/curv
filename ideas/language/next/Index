Index Values (Lenses)
=====================
Make a choice:
 1. index values are disjoint from functions
 2. index values are functions

Right now, #1 is already implemented, and the get/set API is trivial to add.
Let's go with that for now.

The design for #2 is really unclear, and we can switch to that model later
if a good and compelling design emerges.

The benefit of #2 is in ADA when an Algebra exports a getter function and
you want to upgrade that to be an index while retaining bkwd compat. Well,
maybe we support this case by allowing *some* index values to be functions,
without requiring that all are. Eg, under ADA, Function and Index are disjoint
theories, but an algebra can implement both. So when an index/getter
is used as a function (eg, passed as argument to `compose`) then it loses
its index nature.

1. They are disjoint
--------------------
What are the benefits?
* Intuitive: It's non-intuitive that '0' can be applied like a function
  to a list. The explicitness of `get 0` is easier to understand.
* Avoid a semantic tarpit: how to correctly unify functions with indexes
  using an algebra. '0 a' seems like ad-hoc overloading of function call
  syntax because it isn't clear that Indexes are functions, that they form
  a Function algebra or that I can make a Function theory that primitive
  functions and indexes both implement.
* Record indexes: If user defined index values are abstract values (they
  implement the Index theory using Algebra Data Abstraction), and therefore
  not record values, then records can work as implicit pick indexes. Eg,
    [4,5,6].[{a:0,b:1}] => {a:4,b:5}
    include lib.web_colour >> get{white: #porcelain}
* `sRGB` can be both a colourspace index and a colour constructor function.
    sRGB[r,g,b] => aColour
    aColour.[sRGB] => [r,g,b]

Many languages have the concept of getter and setter functions, which are
abstract functions for accessing data structure elements. Getters and setters
come in pairs.

In Curv, index values know how to both get and set.
To convert an index value into a getter or setter function, you write:
    get I T
    set I newval T

An API can provide just an abstract index value `foo`, instead of providing
both `get_foo` and `set_foo`. You can recover the latter functions by
writing `get foo` and `set foo`.

2. They are functions
---------------------
This is inspired by Algebraic Data Abstraction, wherein operations on abstract
data types are functions. An Algebra can provide a function for extracting a
value from an instance, then later make this function bidirectional and turn
it into a lens, without breaking backward compatibility.
* the Principle of Uniform Reference?

There are potentially many functions that could be made bidirectional
(`reverse` is an example), without breaking backward compatibility.
Having a rich set of bidirectional functions points us in the direction
of a solution to the view-update problem. Maybe.

So index values are functions.

  This is analogous to how locatives behave either as expressions or locations,
  depending on context (right or left of a :=). And closely related, given
  that 'i x' is both an expression and a locative (if i is an index).

Benefits:
  * More composability.
  * Index values are functional abstractions over locatives.
    The Law of Abstraction requires us to have functional abstractions
    over all phrase types. Index values satisfy the requirement for locatives.
    This proposal lets you use function call syntax for applying an index
    to a locative.

what it means:
  Ad-hoc:
    * ad-hoc overloading of function call (functions and indices)
  Principled, algebraic:
    * The Index theory is a subtype of the Function theory.
    * The Function theory contains function application, id, error, match
      and compose.
    * Although, 'error' is effectively identical for any algebra that implements
      this theory, and 'match' doesn't seem useful for Indexes. When would I
      use 'error' as an index? Maybe the Function theory just contains
      application, id and compose.
    * Maybe it is the Map theory and the Function algebra, where a Map is more
      general than a Function. An Index is a Map.

Later thought:
Not sure if it makes sense for Index to be a subtheory of Function.
Let's say they are disjoint, and index algebras can implement Function if
it is desired. If Function is a theory, then the juxta operator (f x) is
overloaded for each algebra that implements Function. So YES juxta is
overloaded.

Even with the algebraic gloss, we can still choose to only have one
overloaded Map operation, which is the function call syntax. We can still
have separate 'compose' and 'tpath' operations, and not try to join those
into a single overloaded compose operation, which would encounter difficulties
with the meaning of 'compose[]'.
 * 'compose[]' returns 'id', a branded value belonging to the Function theory.
   'id x' is 'x'. A Theory that extends Function must also extend the meaning
   of 'id'

So the two interpretations may be equivalent in the function and index APIs.

If 'i' is an index, we can classify 'i t' and 't >> i' as equivalent 
to 't.[i]', and these are all locatives. We can drop the low-precedence '@'
operator proposal and use 't>>i' instead. Eg, t.[i,j] <=> t >> tslice[i,j].

#foo {foo:1} => 1, like in Clojure.
0 [1,2,3] => 1

However, the 't.[i]' syntax is specific to indexing, especially since
the 'i' argument is actually a generator that is converted to a slice.
I won't allow 'x.[f]' function calls.

Some tree operations can be generalized as indexes.
Eg, 'reverse' can be an index.

Every combinator that can work on indexes, should do so.
Eg, 'map <index> => <index>'.
    'map #foo' selects column 'foo' from a table, and is an index.
So map returns an index if its argument is an index.

Previously, I conjectured that this proposal would include
    [f,g] x => [f x, g x]
as in Nial (an Atlas) or in FP (a Construction Functional). But functions are
not indexes, even though indexes and functions are both maps. (The Algebraic
analysis clarified this.) So this doesn't logically follow from the 'indexes
are Maps' proposal. However, I do get this feature from the 'dmap' proposal,
where you'd write 'x >>~ [f,g]'.

In [[tree/Lens]] I proposed a 'pick' index combinator, similar to above.
    [3,4,5] >> pick[0,1] => [3,4]
    [3,4,5] >> pick{a:0,b:1} => {a:3,b:4}
This should work on all Maps.
    x >> pick[f,g] => [f x, g x]
So pick returns an index if all the elements of its argument are indexes.

  Something weird about this. Doesn't map onto ADA overloading. There are 2
  versions of pick: 'Map.pick' (for the Map *theory*) and Index.pick (on the
  Index *algebra*). First returns a Map, second returns an Index.

  I think I am proposing ad-hoc, not principled, overloading of 'pick'.
  There is an Index version, a Map version, that's it.
  Which is unlike the overloading of function call syntax, which works
  for any algebra that implements 'Map'.
    ...Except in one context. 'f x' as a locative requires 'f' to be an Index.
  Best then to use two different operation names?

A colour space index like sRGB needs to be repackaged as 'sRGB.from'
(since sRGB is already a function).
